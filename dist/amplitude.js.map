{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 2a5313f5f097b8cb5d16","webpack:///./src/config.js","webpack:///./src/core/helpers.js","webpack:///./src/visual/visual.js","webpack:///./src/core/core.js","webpack:///./src/events/events.js","webpack:///./src/events/helpers.js","webpack:///./src/init/init.js","webpack:///./src/events/handlers.js","webpack:///./src/index.js","webpack:///./src/soundcloud/soundcloud.js","webpack:///./src/visual/helpers.js"],"names":["module","exports","version","active_song","Audio","active_metadata","active_album","active_index","active_playlist","autoplay","playback_speed","callbacks","songs","playlists","start_song","shuffled_playlists","starting_playlist","starting_playlist_song","shuffled_statuses","shuffled_active_indexes","repeat_statuses","repeat","repeat_song","shuffle_list","shuffle_on","shuffle_active_index","default_album_art","debug","volume","pre_mute_volume","volume_increment","volume_decrement","soundcloud_client","soundcloud_use_art","soundcloud_song_count","soundcloud_songs_ready","is_touch_moving","is_sliding","buffered","bindings","continue_next","delay","AmplitudeHelpers","resetConfig","config","handle_song_elements","writeDebugMessage","message","console","log","runCallback","callbackName","callbackFunction","error","changeSong","songIndex","song","AmplitudeCore","stop","AmplitudeVisualSync","setPlayPauseButtonsToPause","resetSongSliders","resetSongPlayedProgressBars","resetTimes","checkNewAlbum","setNewSong","displaySongMetadata","setActiveContainer","syncSongDuration","checkNewSong","newAlbum","checkNewPlaylist","playlist","index","src","url","album","shuffleSongs","shuffleTemp","Array","length","i","original_index","randNum","Math","floor","random","shuffleSwap","shufflePlaylistSongs","shuffleList","original","temp","setActivePlaylist","isURL","pattern","test","isInt","int","isNaN","parseInt","Number","waitFor","condition","callback","window","setTimeout","bind","syncCurrentTime","currentTime","completionPercentage","AmplitudeVisualSyncHelpers","syncCurrentHours","hours","syncCurrentMinutes","minutes","syncCurrentSeconds","seconds","syncMainSliderLocation","syncPlaylistSliderLocation","syncSongSliderLocation","syncSongPlayedProgressBar","resetCurrentHours","resetCurrentMinutes","resetCurrentSeconds","resetCurrentTime","songSliders","document","getElementsByClassName","value","resetSongBufferedProgressBars","songBufferedProgressBars","songPlayedProgressBars","songContainers","classList","remove","querySelectorAll","hasAttribute","add","imageMetaDataKeys","ignoredKeys","songInfoElements","info","getAttribute","main","undefined","indexOf","setAttribute","innerHTML","setFirstSongInPlaylist","elementPlaylist","syncPlaybackSpeed","playbackSpeedClasses","syncBufferedProgressBars","parseFloat","syncVolumeSliders","amplitudeVolumeSliders","playPauseElements","setElementPause","syncMainPlayPause","state","paused","setElementPlay","syncPlaylistPlayPause","playlistPlayPauseElements","syncSongPlayPause","songPlayPauseElements","syncRepeat","repeatClasses","syncRepeatPlaylist","repeatButtons","syncRepeatSong","repeatSongClasses","syncMute","muteClasses","syncShuffle","shuffleButtons","syncPlaylistShuffle","location","mainSongSliders","playlistSongSliders","syncVolumeSliderLocation","volumeSliders","songDuration","syncDurationHours","syncDurationMinutes","syncDurationSeconds","syncDurationTime","syncCountDownTime","syncSongsMetaData","play","live","reconnectStream","navigator","userAgent","playbackRate","pause","disconnectStream","setVolume","volumeLevel","muted","setSongLocation","songPercentage","duration","song_percentage","skipToLocation","addEventListener","once","load","playNow","setSongAtIndex","playSongAtIndex","setPlaylistSongAtIndex","playPlaylistSongAtIndex","setPlaybackSpeed","playbackSpeed","AmplitudeEvents","initializeEvents","bindTimeUpdate","bindKeyDownEventHandlers","bindSongEnded","bindProgress","bindPlay","bindPause","bindPlayPause","bindStop","bindMute","bindVolumeUp","bindVolumeDown","bindSongSlider","bindVolumeSlider","bindNext","bindPrev","bindShuffle","bindRepeat","bindPlaybackSpeed","bindSkipTo","removeEventListener","AmplitudeHandlers","updateTime","keydown","songEnded","progess","progress","play_classes","pause_classes","play_pause_classes","playPause","stop_classes","mute_classes","mute","volume_up_classes","volumeUp","volume_down_classes","volumeDown","ua","msie","song_sliders","match","songSlider","volume_sliders","volumeSlider","next_classes","next","prev_classes","prev","shuffle_classes","shuffle","repeat_classes","playback_speed_classes","skipToClasses","skipTo","AmplitudeEventsHelpers","computeCurrentTimes","currentSeconds","currentMinutes","currentHours","computeSongDuration","songDurationSeconds","songDurationMinutes","songDurationHours","computeSongCompletionPercentage","speed","setRepeat","setRepeatSong","setMainPlayPause","setPlaylistPlayPause","AmplitudeCoreHelpers","setSongPlayPause","setShuffle","setNext","nextIndex","endOfList","setNextPlaylist","shuffledPlaylistActiveSongIndex","playlistActiveSongIndex","setPrev","prevIndex","setPrevPlaylist","runKeyEvent","key","AmplitudesEventHelpers","AmplitudeEvenstHelpers","AmplitudeInitializer","initialize","userConfig","ready","countPlaylists","initializeDefaultLiveSettings","checkValidSongsInPlaylists","initializePlaylistShuffleStatuses","initializePlaylistsRepeatStatuses","initializePlaylistShuffleLists","initializePlaylistShuffleIndexes","initializeFirstSongInPlaylistMetaData","tempUserConfig","AmplitudeSoundcloud","loadSoundCloud","setConfig","rebindDisplay","preload","size","hasOwnProperty","bufferedEnd","end","songCompletionPercentage","event","which","playButtonSongIndex","playButtonPlaylistIndex","pauseButtonSongIndex","pauseButtonPlaylistIndex","locationPercentage","isFinite","repeatSong","Amplitude","init","bindNewElements","getActivePlaylist","getPlaybackSpeed","getRepeat","getRepeatPlaylist","playlistKey","getShuffle","getShufflePlaylist","setShufflePlaylist","setRepeatPlaylist","getDefaultAlbumArt","setDefaultAlbumArt","getSongPlayedPercentage","getSongPlayedSeconds","getSongDuration","setSongPlayedPercentage","percentage","setDebug","getActiveSongMetadata","getSongByIndex","getSongAtPlaylistIndex","addSong","push","addSongToPlaylist","removeSong","splice","removeSongFromPlaylist","getAudio","getSongs","getSongsInPlaylist","songsArray","getSongsState","getSongsStatePlaylist","shuffled_status","getActiveIndex","getActiveIndexState","getVersion","getBuffered","setMetaData","metaData","setDelay","time","audio","head","getElementsByTagName","script","createElement","type","onreadystatechange","initSoundcloud","onload","appendChild","SC","client_id","getStreamableURLs","soundcloud_regex","resolveStreamable","get","sound","streamable","stream_url","cover_art_url","artwork_url","soundcloud_data","name","artist","hourSelectors","join","currentHourSelectors","minuteSelectors","currentMinuteSelectors","l","secondSelectors","currentSecondSelectors","timeSelectors","currentTimeSelectors","timeText","songPlayedPercentage","syncMainSongPlayedProgressBars","syncPlaylistSongPlayedProgressBars","syncIndividualSongPlayedProgressBars","max","element","durationHourSelectors","durationMinuteSelectors","durationSecondSelectors","durationTime","durationTimeSelectors","durationText","timeRemaining","totalCurrentSeconds","totalDurationSeconds","timeRemainingTotalSeconds","remainingHours","remainingMinutes","remainingSeconds","timeRemainingSelectors"],"mappings":"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","file":"amplitude.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Amplitude\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Amplitude\"] = factory();\n\telse\n\t\troot[\"Amplitude\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2a5313f5f097b8cb5d16","/**\r\n * These variables make Amplitude run. The config is the most important\r\n * containing active settings and parameters.\r\n *\r\n * The config JSON is the global settings for ALL of Amplitude functions.\r\n * This is global and contains all of the user preferences. The default\r\n * settings are set, and the user overwrites them when they initialize\r\n * Amplitude.\r\n *\r\n * @module config\r\n * @type {object}\r\n * @property {string}  \tconfig.version          \t\t\t\t- The current version of AmplitudeJS.\r\n * @property {object} \tconfig.active_song \t\t \t\t\t\t\t-\tHandles all of the audio.\r\n * @property {object} \tconfig.active_metadata\t\t\t\t\t- Contains the active metadata for the song.\r\n * @property {string} \tconfig.active_album\t\t\t\t\t\t\t- Holds the active album name. Used to check and see if the album changed and run the album changed callback.\r\n * @property {number} \tconfig.active_index\t\t\t\t\t\t\t- Contains the index of the actively playing song.\r\n * @property {string} \tconfig.active_playlist\t\t\t\t\t- Contains the key to the active playlist index.\r\n * @property {boolean}\tconfig.autoplay\t\t\t\t\t\t\t\t\t- Set to true to autoplay the song\r\n * @property {number} \tconfig.playback_speed\t\t\t\t\t\t- Sets the initial playback speed of the song. The values for this can be 1.0, 1.5, 2.0\r\n * @property {object} \tconfig.callbacks\t\t\t\t\t\t\t\t- The user can pass a JSON object with a key => value store of callbacks to be run at certain events.\r\n * @property {array} \t\tconfig.songs\t\t\t\t\t\t\t\t\t\t- Contains all of the songs the user has passed to Amplitude to use.\r\n * @property {object} \tconfig.playlists\t\t\t\t\t\t\t\t- Contains all of the playlists the user created.\r\n * @property {object} \tconfig.start_song \t\t\t\t\t\t\t- The index of the song that AmplitudeJS should start with.\r\n * @property {object} \tconfig.shuffled_playlists\t\t\t\t- Will contain shuffled playlists.\r\n * @property {string} \tconfig.starting_playlist \t\t\t\t- The starting playlist the player will intiialize to.\r\n * @property {string} \tconfig.starting_playlist_song \t- The index of the song in the playlist that should be started.\r\n * @property {object} \tconfig.shuffled_statuses \t\t\t\t- Contains whether the current playlist is in shuffle mode or not.\r\n * @property {object} \tconfig.repeat_statuses \t\t\t\t\t- Contains whether the playlist is in repeat mode or not.\r\n * @property {object} \tconfig.shuffled_active_indexes\t- Contains the active index in a shuffled playlist.\r\n * @property {boolean} \tconfig.repeat \t\t\t\t\t\t\t\t\t- When repeat is on, when the song ends the song will replay itself.\r\n * @property {object} \tconfig.shuffle_list\t\t\t\t\t\t\t- When shuffled, gets populated with the songs the user provided in a random order.\r\n * @property {boolean} \tconfig.shuffle_on\t\t\t\t\t\t\t\t- When on, gets set to true so when traversing through songs, AmplitudeJS knows whether or not to use the songs object or the shuffle_list\r\n * @property {number} \tconfig.shuffle_active_index \t\t- When shuffled, this index is used to let AmplitudeJS know where it's at when traversing.\r\n * @property {string}\t\tconfig.default_album_art \t\t\t\t- The user can set default album art to be displayed if the song they set doesn't contain album art.\r\n * @property {boolean} \tconfig.debug\t\t\t\t\t\t\t\t\t\t- When set to true, AmplitudeJS will print to the console any errors providing helpful feedback to the user.\r\n * @property {number} \tconfig.volume \t\t\t\t\t\t\t\t\t- The user can set the initial volume to a number between 0 and 1 over-riding the default of .5\r\n * @property {number} \tconfig.pre_mute_volume \t\t\t\t\t- This is set on mute so that when a user un-mutes AmplitudeJS knows what to restore the volume to.\r\n * @property {number}\t\tconfig.volume_increment \t\t\t\t- The default values are an integer between 1 and 100 for how much the volume should increase when the user presses the volume up button.\r\n * @property {number}\t\tconfig.volume_decrement \t\t\t\t- The default values are an integer between 1 and 100 for how much the volume should decrease when the user presses the volume down button.\r\n * @property {string} \tconfig.soundcloud_client \t\t\t\t- When using SoundCloud, the user will have to provide their API Client ID\r\n * @property {boolean} \tconfig.soundcloud_use_art \t\t\t- The user can set this to true and AmplitudeJS will use the album art for the song returned from the Soundcloud API\r\n * @property {number} \tconfig.soundcloud_song_count \t\t- Used on config to count how many songs are from Soundcloud and compare it to how many are ready for when to move to the rest of the configuration\r\n * @property {number} \tconfig.soundcloud_songs_ready \t- Used on config to count how many songs are ready so when we get all of the data from the SoundCloud API that we need this should match the SoundCloud song count meaning we can move to the rest of the config.\r\n * @property {integer}\tconfig.is_touch_moving \t\t\t\t\t- Flag for if the user is moving the screen.\r\n * @property {boolean}\tconfig.is_sliding \t\t\t\t\t- Flag for if the user is sliding the song slider.\r\n * @property {boolean}\tconfig.buffered\t\t\t\t\t\t\t\t\t- How much of the song is buffered.\r\n * @property {object} \tconfig.bindings\t\t\t\t\t\t\t\t\t- Array of bindings to certain key events.\r\n * @property {boolean} \tconfig.continue_next \t\t\t\t\t\t- Determines when a song ends, we should continue to the next song.\r\n * @property {number}   config.delay \t\t\t\t\t\t\t\t\t\t- Sets the delay between songs in MS.\r\n */\r\nmodule.exports = {\r\n\tversion: '3.3.1',\r\n\r\n\tactive_song: new Audio(),\r\n\r\n\tactive_metadata: {},\r\n\r\n\tactive_album: '',\r\n\r\n\tactive_index: 0,\r\n\r\n\tactive_playlist: '',\r\n\r\n\tautoplay: false,\r\n\r\n\tplayback_speed: 1.0,\r\n\r\n\tcallbacks: {},\r\n\r\n\tsongs: [],\r\n\r\n\tplaylists: {},\r\n\r\n\tstart_song: '',\r\n\r\n\tshuffled_playlists: {},\r\n\r\n\tstarting_playlist: '',\r\n\r\n\tstarting_playlist_song: '',\r\n\r\n\tshuffled_statuses: {},\r\n\r\n\tshuffled_active_indexes: {},\r\n\r\n\trepeat_statuses: {},\r\n\r\n\trepeat: false,\r\n\r\n\trepeat_song: false,\r\n\r\n\tshuffle_list: {},\r\n\r\n\tshuffle_on: false,\r\n\r\n\tshuffle_active_index: 0,\r\n\r\n\tdefault_album_art: '',\r\n\r\n\tdebug: false,\r\n\r\n\tvolume: .5,\r\n\r\n\tpre_mute_volume: .5,\r\n\r\n\tvolume_increment: 5,\r\n\r\n\tvolume_decrement: 5,\r\n\r\n\tsoundcloud_client: '',\r\n\r\n\tsoundcloud_use_art: false,\r\n\r\n\tsoundcloud_song_count: 0,\r\n\r\n\tsoundcloud_songs_ready: 0,\r\n\r\n\tis_touch_moving: false,\r\n\r\n\tis_sliding: false,\r\n\r\n\tbuffered: 0,\r\n\r\n\tbindings: {},\r\n\r\n\tcontinue_next: true,\r\n\r\n\tdelay: 0\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/config.js","/**\r\n * Imports the config module\r\n * @module config\r\n */\r\nimport config from '../config.js';\r\n\r\n/**\r\n * AmplitudeJS Core Module\r\n * @module core/AmplitudeCore\r\n */\r\nimport AmplitudeCore from '../core/core.js';\r\n\r\n/**\r\n * AmplitudeJS Visual Sync\r\n * @module visual/AmplitudeVisualSync\r\n*/\r\nimport AmplitudeVisualSync from '../visual/visual.js';\r\n\r\n/**\r\n * For the sake of code clarity, these functions perform helper tasks\r\n * assisting the logical functions with what they need such as setting\r\n * the proper song index after an event has occured.\r\n *\r\n * @module core/AmplitudeHelpers\r\n */\r\nlet AmplitudeHelpers = (function () {\r\n\t/**\r\n\t * Resets the config to the default state. This is called on initialize\r\n\t * to ensure the user's config is what matters.\r\n\t *\r\n\t * Public Accessor: AmplitudeHelpers.resetConfig()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction resetConfig(){\r\n\t\tconfig.active_song \t\t\t\t\t\t\t= new Audio();\r\n\t\tconfig.active_metadata \t\t\t\t\t= {};\r\n\t\tconfig.active_album \t\t\t\t\t\t= '';\r\n\t\tconfig.active_index \t\t\t\t\t\t= 0;\r\n\t\tconfig.active_playlist \t\t\t\t\t= '';\r\n\t\tconfig.active_playlist \t\t\t\t\t= '';\r\n\t\tconfig.autoplay \t\t\t\t\t\t\t\t= false;\r\n\t\tconfig.playback_speed \t\t\t\t\t= 1.0;\r\n\t\tconfig.callbacks \t\t\t\t\t\t\t\t= {};\r\n\t\tconfig.songs \t\t\t\t\t\t\t\t\t\t= [];\r\n\t\tconfig.playlists \t\t\t\t\t\t\t\t= {};\r\n\t\tconfig.start_song \t\t\t\t\t\t\t= '';\r\n\t\tconfig.shuffled_playlists \t\t\t= {};\r\n\t\tconfig.starting_playlist \t\t\t\t= '';\r\n\t\tconfig.starting_playlist_song \t= '';\r\n\t\tconfig.shuffled_statuses \t\t\t\t= {};\r\n\t\tconfig.repeat \t\t\t\t\t\t\t\t\t= false;\r\n\t\tconfig.shuffle_list \t\t\t\t\t\t= {};\r\n\t\tconfig.shuffle_on \t\t\t\t\t\t\t= false;\r\n\t\tconfig.shuffle_active_index \t\t= 0;\r\n\t\tconfig.default_album_art \t\t\t\t= '';\r\n\t\tconfig.debug \t\t\t\t\t\t\t\t\t\t= false;\r\n\t\tconfig.handle_song_elements \t\t= true;\r\n\t\tconfig.volume \t\t\t\t\t\t\t\t\t= .5;\r\n\t\tconfig.pre_mute_volume \t\t\t\t\t= .5;\r\n\t\tconfig.volume_increment \t\t\t\t= 5;\r\n\t\tconfig.volume_decrement \t\t\t\t= 5;\r\n\t\tconfig.soundcloud_client \t\t\t\t= '';\r\n\t\tconfig.soundcloud_use_art \t\t\t= false;\r\n\t\tconfig.soundcloud_song_count \t\t= 0;\r\n\t\tconfig.soundcloud_songs_ready \t= 0;\r\n\t\tconfig.continue_next \t\t\t\t\t\t= true;\r\n\t}\r\n\r\n\t/**\r\n\t * Writes out debug message to the console if enabled.\r\n\t *\r\n\t * Public Accessor: AmplitudeHelpers.writeDebugMessage( message )\r\n\t *\r\n\t * @access public\r\n\t * @param {string} message - The string that gets printed to alert the user of a debugging error.\r\n\t */\r\n\tfunction writeDebugMessage( message ){\r\n\t\tif( config.debug ){\r\n\t\t\tconsole.log( message );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Runs a user defined callback method\r\n\t *\r\n\t * Public Accessor: AmplitudeHelpers.runCallback( callbackName )\r\n\t *\r\n\t * @access public\r\n\t * @param {string} callbackName - The name of the callback we are going to run.\r\n\t */\r\n\tfunction runCallback( callbackName ){\r\n\t\t/*\r\n\t\t\tChecks to see if a user defined a callback method for the\r\n\t\t\tcallback we are running.\r\n\t\t*/\r\n\t\tif( config.callbacks[callbackName] ){\r\n\t\t\t/*\r\n\t\t\t\tBuild the callback function\r\n\t\t\t*/\r\n\t\t\tlet callbackFunction = config.callbacks[ callbackName ];\r\n\r\n\t\t\t/*\r\n\t\t\t\tWrite a debug message stating the callback we are running\r\n\t\t\t*/\r\n\t\t\twriteDebugMessage( 'Running Callback: '+callbackName );\r\n\r\n\t\t\t/*\r\n\t\t\t\tRun the callback function and catch any errors\r\n\t\t\t*/\r\n      try {\r\n        callbackFunction();\r\n      }catch( error ) {\r\n        if( error.message == \"CANCEL EVENT\" ){\r\n          throw error;\r\n        }else{\r\n          writeDebugMessage( 'Callback error: '+error.message );\r\n\t\t\t\t}\r\n      }\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the active song in the config. This happens in multiple\r\n\t * scenarios: The user clicks a play button that has an index that is\r\n\t * different than what is currently playing, the song ends and the next\r\n\t * song begins, etc.\r\n\t *\r\n\t * Public Accessor: AmplitudeHelpers.changeSong( songIndex )\r\n\t *\r\n\t * @access public\r\n\t * @param {number} songIndex - The song index we are changing to\r\n\t *\r\n\t */\r\n\tfunction changeSong( songIndex ){\r\n\t\t/*\r\n\t\t\tGrab the song at the index defined by the user.\r\n\t\t*/\r\n\t\tlet song = config.songs[ songIndex ];\r\n\r\n\t\t/*\r\n\t\t\tStops the currently playing song so we can adjust\r\n\t\t\twhat we need.\r\n\t\t*/\r\n\t\tAmplitudeCore.stop();\r\n\r\n\t\t/**\r\n\t\t * @todo: Stop Visualization\r\n\t\t */\r\n\r\n\t\t/*\r\n\t\t\tSet all play buttons to pause while we change\r\n\t\t\tthe song.\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.setPlayPauseButtonsToPause();\r\n\r\n\t\t/*\r\n\t\t\tSince it is a new song, we reset the song sliders. These\r\n\t\t\treact to time updates and will eventually be updated but we\r\n\t\t\tforce update them is if there is a song slider bound to a\r\n\t\t\tspecific song, they won't update.\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.resetSongSliders();\r\n\r\n\t\t/*\r\n\t\t\tResets the progress bars\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.resetSongPlayedProgressBars();\r\n\r\n\t\t/*\r\n\t\t\tReset all the time place holders accordingly.\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.resetTimes();\r\n\r\n\t\t/*\r\n\t\t\tRun a callback if an album is going\r\n\t\t\tto change.\r\n\t\t*/\r\n\t\tif( checkNewAlbum( song ) ){\r\n\t\t\trunCallback('album_change');\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tSet the new song information so we can use the\r\n\t\t\tactive meta data later on.\r\n\t\t*/\r\n\t\tsetNewSong( song, songIndex );\r\n\r\n\t\t/*\r\n\t\t\tDisplay the new visual metadata now that the config has\r\n\t\t\tbeen changed. This will show the new song.\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.displaySongMetadata();\r\n\r\n\t\t/*\r\n\t\t\tSets the active container. This is a class that\r\n\t\t\tdesigners can use on an element that contains the current\r\n\t\t\tsong's controls to show it's highlighted.\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.setActiveContainer();\r\n\r\n\t\t/*\r\n\t\t\tSets the active song's duration\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.syncSongDuration();\r\n\r\n\t\t/*\r\n\t\t\tRun song change callback.\r\n\t\t*/\r\n\t\trunCallback('song_change');\r\n\t}\r\n\r\n\t/**\r\n\t * Checks to see if the new song to be played is different than the song\r\n\t * that is currently playing. To be true, the user would have selected\r\n\t * play on a new song with a new index. To be false, the user would have\r\n\t * clicked play/pause on the song that was playing.\r\n\t *\r\n\t * Public Accessor: AmplitudeHelpers.checkNewSong( songIndex )\r\n\t *\r\n\t * @access public\r\n\t * @param {number} songIndex - The index of the new song to be played.\r\n\t * @returns {boolean} True if we are setting a new song, false if we are not setting a new song.\r\n\t */\r\n\tfunction checkNewSong( songIndex ){\r\n\t\tif( songIndex != config.active_index ){\r\n\t\t\treturn true;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks to see if there is a new album\r\n\t *\r\n\t * Public Accessor: AmplitudeHelpers.checkNewAlbum( new Album )\r\n\t *\r\n\t * @access public\r\n\t * @param {string} newAlbum - Checks to see if the new song will have a new album.\r\n\t * @returns {boolean} True if there is a new album, false if there is not a new ablum.\r\n\t */\r\n\tfunction checkNewAlbum( newAlbum ){\r\n\t\tif( config.active_album != newAlbum ){\r\n\t\t\treturn true;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks to see if there is a new playlist\r\n\t *\r\n\t * Public Accessor: AmplitudeHelpers.checkNewPlaylist( playlist )\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist - The playlist passed in to check against the active playlist.\r\n\t * @returns {boolean} True if there is a new playlist, false if there is not a new playlist.\r\n\t */\r\n\tfunction checkNewPlaylist( playlist ){\r\n\t\tif( config.active_playlist != playlist ){\r\n\t\t\treturn true;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the new song in the config. Sets the src of the audio object,\r\n\t * updates the\tmetadata and sets the active album.\r\n\t *\r\n\t * @access private\r\n\t * @param {object} song \t- The song object of the song we are changing to.\r\n\t * @param {number} index \t- The index of the song in the songs object we are changing.\r\n\t */\r\n\tfunction setNewSong( song, index ){\r\n\t\tconfig.active_song.src \t= song.url;\r\n\t\tconfig.active_metadata \t= song;\r\n\t\tconfig.active_album    \t= song.album;\r\n\t\tconfig.active_index \t\t= index;\r\n\t}\r\n\r\n\t/**\r\n\t * Shuffles individual songs in the config\r\n\t * Based off of: http://www.codinghorror.com/blog/2007/12/the-danger-of-naivete.html\r\n\t *\r\n\t * Public Accessor: AmplitudeHelpers.shuffleSongs()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction shuffleSongs(){\r\n\t\t/*\r\n\t\t\tBuilds a temporary array with the length of the config.\r\n\t\t*/\r\n\t\tlet shuffleTemp = new Array( config.songs.length );\r\n\r\n\t\t/*\r\n\t\t\tSet the temporary array equal to the songs array.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < config.songs.length; i++ ){\r\n\t\t\tshuffleTemp[i] = config.songs[i];\r\n\t\t\tshuffleTemp[i].original_index = i;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tIterate ove rthe songs and generate random numbers to\r\n\t\t\tswap the indexes of the shuffle array.\r\n\t\t*/\r\n\t\tfor( let i = config.songs.length - 1; i > 0; i-- ){\r\n\t\t\tlet randNum = Math.floor( ( Math.random() * config.songs.length ) + 1 );\r\n\t\t\tshuffleSwap( shuffleTemp, i, randNum - 1 );\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tSet the shuffle list to the shuffle temp.\r\n\t\t*/\r\n\t\tconfig.shuffle_list = shuffleTemp;\r\n\t}\r\n\r\n\t/**\r\n\t * Shuffle songs in a playlist\r\n\t *\r\n\t * Public Accessor: AmplitudeHelpers.shufflePlaylistSongs( playlist )\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist - The playlist we are shuffling.\r\n\t */\r\n\tfunction shufflePlaylistSongs( playlist ){\r\n\t\t/*\r\n\t\t\tBuilds a temporary array with the length of the playlist songs.\r\n\t\t*/\r\n\t\tlet shuffleTemp = new Array( config.playlists[playlist].length );\r\n\r\n\t\t/*\r\n\t\t\tSet the temporary array equal to the playlist array.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < config.playlists[playlist].length; i++ ){\r\n\t\t\tshuffleTemp[i] = config.songs[ config.playlists[playlist][i] ];\r\n\t\t\tshuffleTemp[i].original_index = config.playlists[playlist][i];\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tIterate ove rthe songs and generate random numbers to\r\n\t\t\tswap the indexes of the shuffle array.\r\n\t\t*/\r\n\t\tfor( let i = config.playlists[playlist].length - 1; i > 0; i-- ){\r\n\t\t\tlet randNum = Math.floor( ( Math.random() * config.playlists[playlist].length ) + 1 );\r\n\t\t\tshuffleSwap( shuffleTemp, i, randNum - 1 );\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tSet the shuffle list to the shuffle temp.\r\n\t\t*/\r\n\t\tconfig.shuffled_playlists[playlist] = shuffleTemp;\r\n\t}\r\n\r\n\t/**\r\n\t * Swaps and randomizes the song shuffle.\r\n\t *\r\n\t * @access private\r\n\t * @param {object} shuffleList \t- The list of songs that is going to be shuffled\r\n\t * @param {number} original \t\t- The original index of he song in the songs array\r\n\t * @param {number} random \t\t\t- The randomized index that will be the new index of the song in the shuffle array.\r\n\t */\r\n\tfunction shuffleSwap( shuffleList, original, random ){\r\n\t\tlet temp = shuffleList[ original ];\r\n\t\tshuffleList[ original ] = shuffleList[ random ];\r\n\t\tshuffleList[ random ] = temp;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the active playlist\r\n\t *\r\n\t * Public Accessor: AmplitudeHelpers.setActivePlaylist( playlist )\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist - The string of the playlist being set to active.\r\n\t */\r\n\tfunction setActivePlaylist( playlist ){\r\n\t\t/*\r\n\t\t\tIf the active playlist is different than the playlist being set,\r\n\t\t\twe run the `playlist_changed` callback.\r\n\t\t*/\r\n\t\tif( config.active_playlist != playlist ){\r\n\t\t\trunCallback('playlist_changed');\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tSet the active playlist to the playlist parameter.\r\n\t\t*/\r\n\t\tconfig.active_playlist = playlist;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if the string passed in is a URL or not\r\n\t *\r\n\t * Public Accessor: AmplitudeHelpers.isURL( url )\r\n\t *\r\n\t * @access public\r\n\t * @param {string} url - The string we are testing to see if it's a URL.\r\n\t * @returns {boolean} True if the string is a url, false if it is not.\r\n\t */\r\n\tfunction isURL( url ){\r\n\t\t/*\r\n\t\t\tTest the string against the URL pattern and return if it matches\r\n\t\t*/\r\n\t\tlet pattern = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/\r\n\r\n\t\treturn pattern.test( url );\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if what is passed in is an integer or not.\r\n\t *\r\n\t * Public Accessor: AmplitudeHelpers.isInt( int )\r\n\t *\r\n\t * @access public\r\n\t * @param {string|number} int - The variable we are testing to see is an integer or not.\r\n\t * @returns {boolean} If the variable is an integer or not.\r\n\t */\r\n\tfunction isInt( int ){\r\n\t\treturn !isNaN( int ) &&\r\n         \t\tparseInt( Number( int ) ) == int &&\r\n         \t\t!isNaN( parseInt( int, 10 ) );\r\n\t}\r\n\r\n    /**\r\n     * Waits for a condition to change to perform a callback\r\n     *\r\n     * Public Accessor: AmplitudeHelpers.waitFor( condition, callback )\r\n     *\r\n     * @access public\r\n     * @param condition - The condition necessary to perform the callback\r\n     * @param {function} callback - The function to be executed after the condition is true\r\n     */\r\n    function waitFor( condition, callback ) {\r\n        if(!condition) {\r\n            window.setTimeout(waitFor.bind(null, condition, callback), 100);\r\n        } else {\r\n            callback();\r\n        }\r\n    }\r\n\r\n\t/*\r\n\t\tReturns the public functions\r\n\t*/\r\n\treturn {\r\n\t\tresetConfig: resetConfig,\r\n\t\twriteDebugMessage: writeDebugMessage,\r\n\t\trunCallback: runCallback,\r\n\t\tchangeSong: changeSong,\r\n\t\tcheckNewSong: checkNewSong,\r\n\t\tcheckNewAlbum: checkNewAlbum,\r\n\t\tcheckNewPlaylist: checkNewPlaylist,\r\n\t\tshuffleSongs: shuffleSongs,\r\n\t\tshufflePlaylistSongs: shufflePlaylistSongs,\r\n\t\tsetActivePlaylist: setActivePlaylist,\r\n\t\tisURL: isURL,\r\n\t\tisInt: isInt,\r\n        waitFor: waitFor\r\n\t}\r\n})();\r\n\r\nexport default AmplitudeHelpers\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/helpers.js","/**\r\n * Imports the config module\r\n * @module config\r\n */\r\nimport config from '../config.js';\r\n\r\n/**\r\n * Imports the Amplitude Visual Sync Helpers to keep the display in sync\r\n * @module visual/AmplitudeVisualSyncHelpers\r\n */\r\nimport AmplitudeVisualSyncHelpers from './helpers.js';\r\n\r\n\r\n/**\r\n * Helps with the syncing of the display data\r\n *\r\n * @module visual/AmplitudeVisualSync\r\n */\r\nlet AmplitudeVisualSync = (function() {\r\n\t/**\r\n\t * Visually displays the current time on the screen. This is called on\r\n\t * time update for the current song.\r\n\t *\r\n\t * @access public\r\n\t * @param {object} currentTime \t\t\t\t\t- An object containing the current time for the song in seconds, minutes, and hours.\r\n\t * @param {float} completionPercentage\t- The percent of the way through the song the user is at.\r\n\t */\r\n\tfunction syncCurrentTime( currentTime, completionPercentage ){\r\n\t\t/*\r\n\t\t\tSet current hour display.\r\n\t\t*/\r\n\t\tAmplitudeVisualSyncHelpers.syncCurrentHours( currentTime.hours );\r\n\r\n\t\t/*\r\n\t\t\tSet current minute display.\r\n\t\t*/\r\n\t\tAmplitudeVisualSyncHelpers.syncCurrentMinutes( currentTime.minutes );\r\n\r\n\t\t/*\r\n\t\t\tSet current second display.\r\n\t\t*/\r\n\t\tAmplitudeVisualSyncHelpers.syncCurrentSeconds( currentTime.seconds );\r\n\r\n\t\t/*\r\n\t\t\tSet current time display.\r\n\t\t*/\r\n\t\tAmplitudeVisualSyncHelpers.syncCurrentTime( currentTime );\r\n\r\n\t\t/*\r\n\t\t\tSet all song sliders to be to the current percentage\r\n\t\t\tof the song played.\r\n\t\t*/\r\n\t\tsyncMainSliderLocation( completionPercentage );\r\n\t\tsyncPlaylistSliderLocation( config.active_playlist, completionPercentage );\r\n\t\tsyncSongSliderLocation( config.active_playlist, config.active_index, completionPercentage );\r\n\r\n\t\tAmplitudeVisualSyncHelpers.syncSongPlayedProgressBar( completionPercentage );\r\n\t}\r\n\r\n\t/**\r\n\t * Visually sync all of the times to the initial time of 0. This is so\r\n\t * we can keep all the players in sync\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction resetTimes(){\r\n\t\tAmplitudeVisualSyncHelpers.resetCurrentHours();\r\n\t\tAmplitudeVisualSyncHelpers.resetCurrentMinutes();\r\n\t\tAmplitudeVisualSyncHelpers.resetCurrentSeconds();\r\n\t\tAmplitudeVisualSyncHelpers.resetCurrentTime();\r\n\t}\r\n\r\n\t/**\r\n\t * Visually syncs the song sliders back to 0. This usually happens when\r\n\t * a song has changed, we ensure that all song sliders get reset.\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction resetSongSliders(){\r\n\t\tlet songSliders = document.getElementsByClassName(\"amplitude-song-slider\");\r\n\r\n\t\t/*\r\n\t\t\tIterate over all of the song sliders and set them to\r\n\t\t\t0 essentially resetting them.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < songSliders.length; i++ ){\r\n\t\t\tsongSliders[i].value = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets all of the song buffered progress bars to 0\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction resetSongBufferedProgressBars(){\r\n\t\t/*\r\n\t\t\tGets all of the song buffered progress bars.\r\n\t\t*/\r\n\t\tlet songBufferedProgressBars = document.getElementsByClassName(\"amplitude-buffered-progress\");\r\n\r\n\t\t/*\r\n\t\t\tIterate over all of the song buffered progress bar and\r\n\t\t\tset them to 0 which is like re-setting them.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < songBufferedProgressBars.length; i++ ){\r\n\t\t\tsongBufferedProgressBars[i].value = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets all of the song played progress bars to 0\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction resetSongPlayedProgressBars(){\r\n\t\tlet songPlayedProgressBars = document.getElementsByClassName(\"amplitude-song-played-progress\");\r\n\r\n\t\tfor( let i = 0; i < songPlayedProgressBars.length; i++ ){\r\n\t\t\tsongPlayedProgressBars[i].value = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the class 'amplitude-active-song-container' to the element\r\n\t * containing visual information regarding the active song.\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction setActiveContainer(){\r\n\t\tlet songContainers = document.getElementsByClassName('amplitude-song-container');\r\n\r\n\t\t/*\r\n\t\t\tRemoves all of the active song containrs.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < songContainers.length; i++ ){\r\n\t\t\tsongContainers[i].classList.remove('amplitude-active-song-container');\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tFinds the active index and adds the active song container to the element\r\n\t\t\tthat represents the song at the index.\r\n\t\t*/\r\n\t\tif( config.active_playlist == '' || config.active_playlist == null ){\r\n\t\t\tif( document.querySelectorAll('.amplitude-song-container[amplitude-song-index=\"'+config.active_index+'\"]') ){\r\n\t\t\t\tlet songContainers = document.querySelectorAll('.amplitude-song-container[amplitude-song-index=\"'+config.active_index+'\"]');\r\n\r\n\t\t\t\tfor( let i = 0; i < songContainers.length; i++ ){\r\n\t\t\t\t\tif( !songContainers[i].hasAttribute('amplitude-playlist') ){\r\n\t\t\t\t\t\tsongContainers[i].classList.add('amplitude-active-song-container');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif( document.querySelectorAll('.amplitude-song-container[amplitude-song-index=\"'+config.active_index+'\"][amplitude-playlist=\"'+config.active_playlist+'\"]') ){\r\n\t\t\t\tlet songContainers = document.querySelectorAll('.amplitude-song-container[amplitude-song-index=\"'+config.active_index+'\"][amplitude-playlist=\"'+config.active_playlist+'\"]');\r\n\r\n\t\t\t\tfor( let i = 0; i < songContainers.length; i++ ){\r\n\t\t\t\t\tsongContainers[i].classList.add('amplitude-active-song-container');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Displays the active song's metadata. This is called after a song has\r\n\t * been changed. This method takes the active song and displays the\r\n\t * metadata. So once the new active song is set, we update all of the\r\n\t * screen elements.\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction displaySongMetadata(){\r\n\t\t/*\r\n\t\t\tDefine the image meta data keys. These are managed separately\r\n\t\t\tsince we aren't actually changing the inner HTML of these elements.\r\n\t\t*/\r\n\t\tlet imageMetaDataKeys \t= ['cover_art_url', 'station_art_url', 'podcast_episode_cover_art_url'];\r\n\r\n\t\t/*\r\n\t\t\tThese are the ignored keys that we won't be worrying about displaying.\r\n\t\t\tEvery other key in the song object can be displayed.\r\n\t\t*/\r\n\t\tlet ignoredKeys \t\t= ['url', 'live'];\r\n\r\n\t\t/*\r\n\t\t\tGet all of the song info elements\r\n\t\t*/\r\n\t\tlet songInfoElements = document.querySelectorAll('[amplitude-song-info]');\r\n\r\n\t\t/*\r\n\t\t\tIterate over all of the song info elements. We will either\r\n\t\t\tset these to the new values, or clear them if the active song\r\n\t\t\tdoesn't have the info set.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < songInfoElements.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tGet the info so we can check if the active meta data has the\r\n\t\t\t\tkey.\r\n\t\t\t*/\r\n\t\t\tlet info = songInfoElements[i].getAttribute('amplitude-song-info');\r\n\r\n\t\t\t/*\r\n\t\t\t\tGet the song info element playlist.\r\n\t\t\t*/\r\n\t\t\tlet playlist = songInfoElements[i].getAttribute('amplitude-playlist');\r\n\r\n\t\t\t/*\r\n\t\t\t\tGet the main song info flag.\r\n\t\t\t*/\r\n\t\t\tlet main = songInfoElements[i].getAttribute('amplitude-main-song-info');\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf the playlists match or the element is a main element, then\r\n\t\t\t\twe set the song info.\r\n\t\t\t*/\r\n\t\t\tif( config.active_playlist == playlist || main == 'true' ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the active metadata has the key, then we set it,\r\n\t\t\t\t\totherwise we clear it. If it's an image element then\r\n\t\t\t\t\twe default it to the default info if needed.\r\n\t\t\t\t*/\r\n\t\t\t\tif( config.active_metadata[info] != undefined ){\r\n\t\t\t\t\tif( imageMetaDataKeys.indexOf( info ) >= 0 ){\r\n\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', config.active_metadata[info]);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tsongInfoElements[i].innerHTML = config.active_metadata[info];\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tWe look for the default album art because\r\n\t\t\t\t\t\tthe actual key didn't exist. If the default album\r\n\t\t\t\t\t\tart doesn't exist then we set the src attribute\r\n\t\t\t\t\t\tto null.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif( imageMetaDataKeys.indexOf( info ) >= 0 ){\r\n\t\t\t\t\t\tif( config.default_album_art != '' ){\r\n\t\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', config.default_album_art);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', '');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tsongInfoElements[i].innerHTML = '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n   * Sets the first song in the playlist. This is used to fill in the meta\r\n\t * data in the playlist\r\n\t *\r\n\t * @param {object} song \t\t\t- The song we are setting to be the first song in the playlist\r\n\t * @param {string} playlist \t- Key of the playlist we are setting the first song in\r\n\t */\r\n\tfunction setFirstSongInPlaylist( song, playlist ){\r\n\t\t/*\r\n\t\t\tDefine the image meta data keys. These are managed separately\r\n\t\t\tsince we aren't actually changing the inner HTML of these elements.\r\n\t\t*/\r\n\t\tlet imageMetaDataKeys \t= ['cover_art_url', 'station_art_url', 'podcast_episode_cover_art_url'];\r\n\r\n\t\t/*\r\n\t\t\tThese are the ignored keys that we won't be worrying about displaying.\r\n\t\t\tEvery other key in the song object can be displayed.\r\n\t\t*/\r\n\t\tlet ignoredKeys \t\t= ['url', 'live'];\r\n\r\n\t\t/*\r\n\t\t\tGet all of the song info elements\r\n\t\t*/\r\n\t\tlet songInfoElements = document.querySelectorAll('[amplitude-song-info][amplitude-playlist=\"'+playlist+'\"]');\r\n\r\n\t\t/*\r\n\t\t\tIterate over all of the song info elements. We will either\r\n\t\t\tset these to the new values, or clear them if the active song\r\n\t\t\tdoesn't have the info set.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < songInfoElements.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tGet the info so we can check if the active meta data has the\r\n\t\t\t\tkey.\r\n\t\t\t*/\r\n\t\t\tlet info = songInfoElements[i].getAttribute('amplitude-song-info');\r\n\r\n\t\t\t/*\r\n\t\t\t\tGet the song info element playlist.\r\n\t\t\t*/\r\n\t\t \tlet elementPlaylist = songInfoElements[i].getAttribute('amplitude-playlist');\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf the playlists match or the element is a main element, then\r\n\t\t\t\twe set the song info.\r\n\t\t\t*/\r\n\t\t\tif( elementPlaylist == playlist ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the active metadata has the key, then we set it,\r\n\t\t\t\t\totherwise we clear it. If it's an image element then\r\n\t\t\t\t\twe default it to the default info if needed.\r\n\t\t\t\t*/\r\n\t\t\t\tif( song[info] != undefined ){\r\n\t\t\t\t\tif( imageMetaDataKeys.indexOf( info ) >= 0 ){\r\n\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', song[info]);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tsongInfoElements[i].innerHTML = song[info];\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tWe look for the default album art because\r\n\t\t\t\t\t\tthe actual key didn't exist. If the default album\r\n\t\t\t\t\t\tart doesn't exist then we set the src attribute\r\n\t\t\t\t\t\tto null.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif( imageMetaDataKeys.indexOf( info ) >= 0 ){\r\n\t\t\t\t\t\tif( song.default_album_art != '' ){\r\n\t\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', song.default_album_art);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', '');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tsongInfoElements[i].innerHTML = '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets all of the visual playback speed buttons to have the right class\r\n\t * to display the background image that represents the current playback\r\n\t * speed.\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction syncPlaybackSpeed(){\r\n\t\t/*\r\n\t\t\tGets all of the playback speed classes.\r\n\t\t*/\r\n\t\tlet playbackSpeedClasses = document.getElementsByClassName(\"amplitude-playback-speed\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the playback speed classes\r\n\t\t\tapplying the right speed class for visual purposes.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < playbackSpeedClasses.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tRemoves all of the old playback speed classes.\r\n\t\t\t*/\r\n\t\t\tplaybackSpeedClasses[i].classList.remove('amplitude-playback-speed-10');\r\n\t\t\tplaybackSpeedClasses[i].classList.remove('amplitude-playback-speed-15');\r\n\t\t\tplaybackSpeedClasses[i].classList.remove('amplitude-playback-speed-20');\r\n\r\n\t\t\t/*\r\n\t\t\t\tSwitch the current playback speed and apply the appropriate\r\n\t\t\t\tspeed class.\r\n\t\t\t*/\r\n\t\t\tswitch( config.playback_speed ){\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tplaybackSpeedClasses[i].classList.add('amplitude-playback-speed-10');\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 1.5:\r\n\t\t\t\t\tplaybackSpeedClasses[i].classList.add('amplitude-playback-speed-15');\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tplaybackSpeedClasses[i].classList.add('amplitude-playback-speed-20');\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs the buffered progress bars to the current percentage in the config\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction syncBufferedProgressBars(){\r\n\t\t/*\r\n\t\t\tGets all of the song buffered progress bars.\r\n\t\t*/\r\n\t\tlet songBufferedProgressBars = document.getElementsByClassName(\"amplitude-buffered-progress\");\r\n\r\n\t\t/*\r\n\t\t\tIterate over all of the song buffered progress bar and\r\n\t\t\tset them to 0 which is like re-setting them.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < songBufferedProgressBars.length; i++ ){\r\n\t\t\tsongBufferedProgressBars[i].value = parseFloat( parseFloat( config.buffered ) / 100 );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Visually syncs the volume sliders so they are all the same if there\r\n\t * are more than one.\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction syncVolumeSliders(){\r\n\t\tlet amplitudeVolumeSliders = document.getElementsByClassName(\"amplitude-volume-slider\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the volume sliders for the song, setting the value\r\n\t\t\tto the config value.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < amplitudeVolumeSliders.length; i++ ){\r\n\t\t\tamplitudeVolumeSliders[i].value = config.active_song.volume * 100;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets all of the play pause buttons to paused.\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction setPlayPauseButtonsToPause(){\r\n\t\t/*\r\n\t\t\tGets all of the play pause elements\r\n\t\t*/\r\n\t\tlet playPauseElements = document.querySelectorAll('.amplitude-play-pause');\r\n\r\n\t\t/*\r\n\t\t\tSets all of the elements to pause\r\n\t\t*/\r\n\t\tfor( let i = 0; i < playPauseElements.length; i++ ){\r\n\t\t\tAmplitudeVisualSyncHelpers.setElementPause( playPauseElements[i] );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs the main play pause buttons to the state of the active song.\r\n\t *\r\n\t * @param {string} state The state of the player\r\n\t * @access public\r\n\t */\r\n\tfunction syncMainPlayPause( state ){\r\n\t\t/*\r\n\t\t\tEnsures we have a string for the state otherwise we grab the\r\n\t\t\tstate from the config.\r\n\t\t*/\r\n    if( typeof state != \"string\" ){\r\n      state = config.active_song.paused ? \"paused\" : \"playing\";\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tGet all play pause buttons.\r\n\t\t*/\r\n\t\tconst playPauseElements = document.querySelectorAll('.amplitude-play-pause[amplitude-main-play-pause=\"true\"]');\r\n\r\n\t\t/*\r\n\t\t\tIterate over all of the play pause elements syncing the\r\n\t\t\tdisplay visually.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < playPauseElements.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tDetermines what classes we should add and remove\r\n\t\t\t\tfrom the elements.\r\n\t\t\t*/\r\n\t\t\tswitch( state ){\r\n\t\t\t\tcase 'playing':\r\n\t\t\t\t\tAmplitudeVisualSyncHelpers.setElementPlay( playPauseElements[i] );\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'paused':\r\n\t\t\t\t\tAmplitudeVisualSyncHelpers.setElementPause( playPauseElements[i] );\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs the main playlist play pause buttons to the state of the active song.\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist \t- The playlist we are setting the play pause state for.\r\n\t * @param {string} state \t\t\t- Either playing or paused for the state of the active song.\r\n\t */\r\n\tfunction syncPlaylistPlayPause( playlist, state ){\r\n\t\t/*\r\n\t\t\tEnsures we have a string for the state otherwise we grab the\r\n\t\t\tstate from the config.\r\n\t\t*/\r\n    if( typeof state != \"string\" ){\r\n      state = config.active_song.paused ? \"paused\" : \"playing\";\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tGet all of the main playlist play pause elements\r\n\t\t*/\r\n\t\tlet playlistPlayPauseElements = document.querySelectorAll('.amplitude-play-pause[amplitude-playlist-main-play-pause=\"true\"]');\r\n\r\n\t\t/*\r\n\t\t\tIterate over the play pause elements, syncing the state accordingly.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < playlistPlayPauseElements.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tIf the element has the same playlist attribute as the playlist\r\n\t\t\t\tpassed in and the state is playing, we set the element to\r\n\t\t\t\tbe playing otherwise we set it to pause. Setting to pause\r\n\t\t\t\tmeans the element doesn't match the active playlist or the\r\n\t\t\t\tstate is paused.\r\n\t\t\t*/\r\n\t\t\tif( playlistPlayPauseElements[i].getAttribute('amplitude-playlist') == playlist\r\n\t\t\t\t&& state == 'playing' ){\r\n\r\n\t\t\t\tAmplitudeVisualSyncHelpers.setElementPlay( playlistPlayPauseElements[i] );\r\n\t\t\t}else{\r\n\t\t\t\tAmplitudeVisualSyncHelpers.setElementPause( playlistPlayPauseElements[i] );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs the song play pause buttons to the state of the active song.\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist \t- The playlist we are setting the play pause state for.\r\n\t * @param {int} song \t\t\t\t\t- The index of the song we are syncing the state for\r\n\t * @param {string} state \t\t\t- Either playing or paused for the state of the active song.\r\n\t */\r\n\tfunction syncSongPlayPause( playlist, song, state ){\r\n\t\t/*\r\n\t\t\tEnsures we have a string for the state otherwise we grab the\r\n\t\t\tstate from the config.\r\n\t\t*/\r\n    if( typeof state != \"string\" ){\r\n      state = config.active_song.paused ? \"paused\" : \"playing\";\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tIf the playlist is null or empty, we make sure that any song\r\n\t\t\tthat is a part of a playlist is set to paused.\r\n\t\t*/\r\n\t\tif( playlist == null || playlist == '' ){\r\n\t\t\t/*\r\n\t\t\t\tGet all of the individual song play pause buttons. These have an\r\n\t\t\t\tamplitude-song-index attribute. Some have amplitude-playlist which\r\n\t\t\t\tmeans they are individual songs within a playlist.\r\n\t\t\t*/\r\n\t\t\tlet songPlayPauseElements = document.querySelectorAll('.amplitude-play-pause[amplitude-song-index]');\r\n\r\n\t\t\t/*\r\n\t\t\t\tIterate over all of the song play pause elements\r\n\t\t\t*/\r\n\t\t\tfor( let i = 0; i < songPlayPauseElements.length; i++ ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the song element has an attribute for amplitude-playlist then\r\n\t\t\t\t\twe set it to paused no matter what because the state of the player\r\n\t\t\t\t\tis not in a playlist mode.\r\n\t\t\t\t*/\r\n\t\t\t\tif( songPlayPauseElements[i].hasAttribute('amplitude-playlist') ){\r\n\t\t\t\t\tAmplitudeVisualSyncHelpers.setElementPause( songPlayPauseElements[i] );\r\n\t\t\t\t}else{\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tIf the state of the song is playing and the song index matches the\r\n\t\t\t\t\t\tindex of the song we have, we set the element to playing otherwise\r\n\t\t\t\t\t\twe set the element to paused.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif( state == 'playing' && songPlayPauseElements[i].getAttribute('amplitude-song-index') == song ){\r\n\t\t\t\t\t\tAmplitudeVisualSyncHelpers.setElementPlay( songPlayPauseElements[i] );\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tAmplitudeVisualSyncHelpers.setElementPause( songPlayPauseElements[i] );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tGet all of the individual song play pause buttons. These have an\r\n\t\t\t\tamplitude-song-index attribute. Some have amplitude-playlist which\r\n\t\t\t\tmeans they are individual songs within a playlist.\r\n\t\t\t*/\r\n\t\t\tlet songPlayPauseElements = document.querySelectorAll('.amplitude-play-pause[amplitude-song-index]');\r\n\r\n\t\t\t/*\r\n\t\t\t\tIterate over all of the individual play pause elements.\r\n\t\t\t*/\r\n\t\t\tfor( let i = 0; i < songPlayPauseElements.length; i++ ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tSince we have an active playlist this time, we want any stand alone\r\n\t\t\t\t\tsongs to be set to paused since the scope is within a playlist.\r\n\r\n\t\t\t\t\tWe check to see if the element has an amplitude-playlist attribute.\r\n\t\t\t\t*/\r\n\t\t\t\tif( songPlayPauseElements[i].hasAttribute('amplitude-playlist') ){\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tCheck to see if the song index matches the index passed in and the\r\n\t\t\t\t\t\tplaylist matches the scoped playlist we are looking for and the\r\n\t\t\t\t\t\tstate of the player is playing, then we set the element to play. If those\r\n\t\t\t\t\t\tthree parameters are not met, set the element to pause.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif( songPlayPauseElements[i].getAttribute('amplitude-song-index') == song\r\n\t\t\t\t\t\t&& songPlayPauseElements[i].getAttribute('amplitude-playlist') == playlist\r\n\t\t\t\t\t\t&& state == 'playing' ){\r\n\t\t\t\t\t\t\tAmplitudeVisualSyncHelpers.setElementPlay( songPlayPauseElements[i] );\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tAmplitudeVisualSyncHelpers.setElementPause( songPlayPauseElements[i] );\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tSet any individual songs (songs outside of a playlist scope) to pause\r\n\t\t\t\t\t\tsince we are in the scope of a playlist.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tAmplitudeVisualSyncHelpers.setElementPause( songPlayPauseElements[i] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs repeat for all of the repeat buttons. Users\r\n\t * can apply styles to the 'amplitude-repeat-on' and\r\n\t * 'amplitude-repeat-off' classes. They represent the state\r\n\t * of the player.\r\n\t */\r\n\tfunction syncRepeat(){\r\n\t\t/*\r\n\t\t\tGets all of the repeat classes\r\n\t\t*/\r\n\t\tlet repeatClasses = document.getElementsByClassName(\"amplitude-repeat\");\r\n\r\n\t\t/*\r\n\t\t\tIterate over all of the repeat classes. If repeat is on,\r\n\t\t\tthen add the 'amplitude-repeat-on' class and remove the\r\n\t\t\t'amplitude-repeat-off' class. If it's off, then do the\r\n\t\t\topposite.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < repeatClasses.length; i++ ){\r\n\t\t\tif( config.repeat ){\r\n\t\t\t\trepeatClasses[i].classList.add('amplitude-repeat-on');\r\n\t\t\t\trepeatClasses[i].classList.remove('amplitude-repeat-off');\r\n\t\t\t}else{\r\n\t\t\t\trepeatClasses[i].classList.remove('amplitude-repeat-on');\r\n\t\t\t\trepeatClasses[i].classList.add('amplitude-repeat-off');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs repeat for all of the playlist repeat buttons. Users\r\n\t * can apply styles to the `amplitude-repeat-on` and `amplitude-repeat-off`\r\n\t * classes. They repreent the state of the playlist in the player.\r\n\t */\r\n\t function syncRepeatPlaylist( playlist ){\r\n\t\t /*\r\n\t\t\t Gets all of the repeat buttons.\r\n\t\t */\r\n\t\t let repeatButtons = document.getElementsByClassName(\"amplitude-repeat\");\r\n\r\n\t\t /*\r\n\t\t\t Iterate over all of the repeat buttons\r\n\t\t */\r\n\t\t for( let i = 0; i < repeatButtons.length; i++ ){\r\n\t\t\t /*\r\n\t\t\t\t Ensure that the repeat button belongs to matches the\r\n\t\t\t\t playlist we are syncing the state for.\r\n\t\t\t */\r\n\t\t\t if( repeatButtons[i].getAttribute('amplitude-playlist') == playlist ){\r\n\t\t\t\t /*\r\n\t\t\t\t\t If the state of the playlist is shuffled on, true, then\r\n\t\t\t\t\t we add the 'amplitude-repeat-on' class and remove the\r\n\t\t\t\t\t 'amplitude-repeat-off' class. If the player is not shuffled\r\n\t\t\t\t\t then we do the opposite.\r\n\t\t\t\t */\r\n\t\t\t\t if( config.repeat_statuses[playlist] ){\r\n\t\t\t\t\t repeatButtons[i].classList.add( 'amplitude-repeat-on');\r\n\t\t\t\t\t repeatButtons[i].classList.remove( 'amplitude-repeat-off');\r\n\t\t\t\t }else{\r\n\t\t\t\t\t repeatButtons[i].classList.add( 'amplitude-repeat-off');\r\n\t\t\t\t\t repeatButtons[i].classList.remove( 'amplitude-repeat-on');\r\n\t\t\t\t }\r\n\t\t\t }\r\n\t\t }\r\n\t }\r\n\r\n\t/**\r\n\t * Syncs repeat for all of the repeat song buttons. Users\r\n\t * can apply styles to the 'amplitude-repeat-song-on' and\r\n\t * 'amplitude-repeat-song-off' classes. They represent the state\r\n\t * of the player.\r\n\t */\r\n\tfunction syncRepeatSong(){\r\n\t\t/*\r\n\t\t\tGets all of the repeat song classes\r\n\t\t*/\r\n\t\tlet repeatSongClasses = document.getElementsByClassName(\"amplitude-repeat-song\");\r\n\r\n\t\t/*\r\n\t\t\tIterate over all of the repeat song classes. If repeat is on,\r\n\t\t\tthen add the 'amplitude-repeat-song-on' class and remove the\r\n\t\t\t'amplitude-repeat-song-off' class. If it's off, then do the\r\n\t\t\topposite.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < repeatSongClasses.length; i++ ){\r\n\t\t\tif( config.repeat_song ){\r\n\t\t\t\trepeatSongClasses[i].classList.add('amplitude-repeat-song-on');\r\n\t\t\t\trepeatSongClasses[i].classList.remove('amplitude-repeat-song-off');\r\n\t\t\t}else{\r\n\t\t\t\trepeatSongClasses[i].classList.remove('amplitude-repeat-song-on');\r\n\t\t\t\trepeatSongClasses[i].classList.add('amplitude-repeat-song-off');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs mute for all of the mute buttons. This represents the\r\n\t * state of the player if it's muted or not.\r\n\t *\r\n\t * @access public\r\n\t * @param {string} state \t- The muted state of the player.\r\n\t */\r\n\tfunction syncMute( state ){\r\n\t\t/*\r\n\t\t\tGet all of the mute buttons.\r\n\t\t*/\r\n\t\tlet muteClasses = document.getElementsByClassName(\"amplitude-mute\");\r\n\r\n\t\t/*\r\n\t\t\tIterate over all of the mute classes. If the state of the player\r\n\t\t\tis not-muted then we add the amplitude-not-muted classe and remove\r\n\t\t\tthe amplitude muted class otherwise we do the opposite.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < muteClasses.length; i++ ){\r\n\t\t\tif( !state ){\r\n\t\t\t\tmuteClasses[i].classList.add( 'amplitude-not-muted' );\r\n\t\t\t\tmuteClasses[i].classList.remove( 'amplitude-muted' );\r\n\t\t\t}else{\r\n\t\t\t\tmuteClasses[i].classList.remove( 'amplitude-not-muted' );\r\n\t\t\t\tmuteClasses[i].classList.add( 'amplitude-muted' );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs the global shuffle button visual state.\r\n\t *\r\n\t * @access public\r\n\t * @param {boolean} state  \t- The shuffled state of the player.\r\n\t */\r\n\tfunction syncShuffle( state ){\r\n\t\t/*\r\n\t\t\tGets the shuffle buttons.\r\n\t\t*/\r\n\t\tlet shuffleButtons = document.getElementsByClassName(\"amplitude-shuffle\");\r\n\r\n\t\t/*\r\n\t\t\tIterate over all of the shuffle buttons.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < shuffleButtons.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tEnsure the shuffle button doesn't belong to a playlist. We have\r\n\t\t\t\ta separate method for that.\r\n\t\t\t*/\r\n\t\t\tif( shuffleButtons[i].getAttribute('amplitude-playlist') == null ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the state of the player is shuffled on, true, then\r\n\t\t\t\t\twe add the 'amplitude-shuffle-on' class and remove the\r\n\t\t\t\t\t'amplitude-shuffle-off' class. If the player is not shuffled\r\n\t\t\t\t\tthen we do the opposite.\r\n\t\t\t\t*/\r\n\t\t\t\tif( state ){\r\n\t\t\t\t\tshuffleButtons[i].classList.add( 'amplitude-shuffle-on');\r\n\t\t\t\t\tshuffleButtons[i].classList.remove( 'amplitude-shuffle-off');\r\n\t\t\t\t}else{\r\n\t\t\t\t\tshuffleButtons[i].classList.add( 'amplitude-shuffle-off');\r\n\t\t\t\t\tshuffleButtons[i].classList.remove( 'amplitude-shuffle-on');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs the playlist shuffle button visual state.\r\n\t *\r\n\t * @access public\r\n\t * @param {boolean} state \t- The shuffled state of the player.\r\n\t * @param {string} playlist - The playlist string the shuffle button belongs to.\r\n\t */\r\n\tfunction syncPlaylistShuffle( state, playlist ){\r\n\t\t/*\r\n\t\t\tGets all of the shuffle buttons.\r\n\t\t*/\r\n\t\tlet shuffleButtons = document.getElementsByClassName(\"amplitude-shuffle\");\r\n\r\n\t\t/*\r\n\t\t\tIterate over all of the shuffle buttons\r\n\t\t*/\r\n\t\tfor( let i = 0; i < shuffleButtons.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tEnsure that the playlist the shuffle button belongs to matches the\r\n\t\t\t\tplaylist we are syncing the state for.\r\n\t\t\t*/\r\n\t\t\tif( shuffleButtons[i].getAttribute('amplitude-playlist') == playlist ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the state of the playlist is shuffled on, true, then\r\n\t\t\t\t\twe add the 'amplitude-shuffle-on' class and remove the\r\n\t\t\t\t\t'amplitude-shuffle-off' class. If the player is not shuffled\r\n\t\t\t\t\tthen we do the opposite.\r\n\t\t\t\t*/\r\n\t\t\t\tif( state ){\r\n\t\t\t\t\tshuffleButtons[i].classList.add( 'amplitude-shuffle-on');\r\n\t\t\t\t\tshuffleButtons[i].classList.remove( 'amplitude-shuffle-off');\r\n\t\t\t\t}else{\r\n\t\t\t\t\tshuffleButtons[i].classList.add( 'amplitude-shuffle-off');\r\n\t\t\t\t\tshuffleButtons[i].classList.remove( 'amplitude-shuffle-on');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs the main slider location\r\n\t *\r\n\t * @access public\r\n\t * @param {number} location \t- The location of the song as a percentage.\r\n\t */\r\n\tfunction syncMainSliderLocation( location ){\r\n\t\t/*\r\n\t\t\tEnsure we have a location that's a number\r\n\t\t*/\r\n\t\tlocation = !isNaN( location ) ? location : 0;\r\n\r\n\t\t/*\r\n\t\t\tGets the main song sliders\r\n\t\t*/\r\n\t\tlet mainSongSliders = document.querySelectorAll('.amplitude-song-slider[amplitude-main-song-slider=\"true\"]');\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the main sliders and sets the value to the\r\n\t\t\tpercentage of the song played.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < mainSongSliders.length; i++ ){\r\n\t\t\tmainSongSliders[i].value = location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs playlist song slider locations\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist \t- The playlist we are setting the song slider for.\r\n\t * @param {number} location \t- The location of the song as a percentage.\r\n\t */\r\n\tfunction syncPlaylistSliderLocation( playlist, location ){\r\n\t\t/*\r\n\t\t\tEnsure we have a location that's a number\r\n\t\t*/\r\n\t\tlocation = !isNaN( location ) ? location : 0;\r\n\r\n\t\t/*\r\n\t\t\tGets the playlist song sliders\r\n\t\t*/\r\n\t\tlet playlistSongSliders = document.querySelectorAll('.amplitude-song-slider[amplitude-playlist-song-slider=\"true\"][amplitude-playlist=\"'+playlist+'\"]');\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the playlist sliders and sets the value to the\r\n\t\t\tpercentage of the song played.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < playlistSongSliders.length; i++ ){\r\n\t\t\tplaylistSongSliders[i].value = location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs individual song slider locations\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist \t- The playlist we are setting the song slider for.\r\n\t * @param {number} songIndex \t- The index of the song we are adjusting the song slider for.\r\n\t * @param {number} location \t- The location of the song as a percentage.\r\n\t */\r\n\tfunction syncSongSliderLocation( playlist, songIndex, location ){\r\n\t\t/*\r\n\t\t\tEnsure we have a location that's a number\r\n\t\t*/\r\n\t\tlocation = !isNaN( location ) ? location : 0;\r\n\t\t/*\r\n\t\t\tIf the playlist is set, we get all of the individual song sliders\r\n\t\t\tthat relate to the song and the playlist.\r\n\t\t*/\r\n\t\tif( playlist != '' && playlist != null ){\r\n\t\t\t/*\r\n\t\t\t\tGets the song sliders for the individual songs and the\r\n\t\t\t\tplaylist\r\n\t\t\t*/\r\n\t\t\tlet songSliders = document.querySelectorAll('.amplitude-song-slider[amplitude-playlist=\"'+playlist+'\"][amplitude-song-index=\"'+songIndex+'\"]');\r\n\r\n\t\t\t/*\r\n\t\t\t\tIterates over all of the playlist sliders and set the value to the\r\n\t\t\t\tpercentage of the song played.\r\n\t\t\t*/\r\n\t\t\tfor( let i = 0; i < songSliders.length; i++ ){\r\n\t\t\t\tsongSliders[i].value = location;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tGet the individual song slider by index\r\n\t\t\t*/\r\n\t\t\tlet songSliders = document.querySelectorAll('.amplitude-song-slider[amplitude-song-index=\"'+songIndex+'\"]');\r\n\r\n\t\t\t/*\r\n\t\t\t\tIterats over all of the song sliders that have the index of\r\n\t\t\t\tthe song we are sliding. If the song doesn't have a playlist\r\n\t\t\t\tattribute, we set the location.\r\n\t\t\t*/\r\n\t\t\tfor( let i = 0; i < songSliders.length; i++ ){\r\n\t\t\t\tif( !songSliders[i].hasAttribute('amplitude-playlist') ){\r\n\t\t\t\t\tif( location != 0 ){\r\n\t\t\t\t\t\tsongSliders[i].value = location;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the volume slider location\r\n\t *\r\n\t * @access public\r\n\t * @param {number} volume \t- The volume from 0 - 1 for song volume.\r\n\t */\r\n\tfunction syncVolumeSliderLocation( volume ){\r\n\t\t/*\r\n\t\t\tGets all of the volume sliders\r\n\t\t*/\r\n\t\tlet volumeSliders = document.querySelectorAll('.amplitude-volume-slider');\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the sliders and sets their volume\r\n\t\t\tto the volume of the song.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < volumeSliders.length; i++ ){\r\n\t\t\tvolumeSliders[i].value = volume;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs the song's duration\r\n\t *\r\n\t * @access public\r\n\t * @param {object} currentTime \t\t- Object containing information about the current time of the song.\r\n\t * @param {object} songDuration \t- Object containing information about the duration of the song.\r\n\t */\r\n\tfunction syncSongDuration( currentTime, songDuration ){\r\n\t\t/*\r\n\t\t\tSet duration hour display.\r\n\t\t*/\r\n\t\tAmplitudeVisualSyncHelpers.syncDurationHours( songDuration != undefined && !isNaN( songDuration.hours ) ? songDuration.hours : '00' );\r\n\r\n\t\t/*\r\n\t\t\tSet duration minute display.\r\n\t\t*/\r\n\t\tAmplitudeVisualSyncHelpers.syncDurationMinutes( songDuration != undefined && !isNaN( songDuration.minutes ) ? songDuration.minutes : '00' );\r\n\r\n\t\t/*\r\n\t\t\tSet duration second display.\r\n\t\t*/\r\n\t\tAmplitudeVisualSyncHelpers.syncDurationSeconds( songDuration != undefined && !isNaN( songDuration.seconds ) ? songDuration.seconds : '00' );\r\n\r\n\t\t/*\r\n\t\t\tSet duration time display.\r\n\t\t*/\r\n\t\tAmplitudeVisualSyncHelpers.syncDurationTime( songDuration != undefined ? songDuration : {} );\r\n\r\n\t\t/*\r\n\t\t\tSet count down time display.\r\n\t\t*/\r\n\t\tAmplitudeVisualSyncHelpers.syncCountDownTime( currentTime, songDuration );\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the meta data for songs loaded in the songs array\r\n\t */\r\n\t function syncSongsMetaData(){\r\n\t\t /*\r\n \t\t\tDefine the image meta data keys. These are managed separately\r\n \t\t\tsince we aren't actually changing the inner HTML of these elements.\r\n \t\t*/\r\n \t\tlet imageMetaDataKeys \t= ['cover_art_url', 'station_art_url', 'podcast_episode_cover_art_url'];\r\n\r\n \t\t/*\r\n \t\t\tThese are the ignored keys that we won't be worrying about displaying.\r\n \t\t\tEvery other key in the song object can be displayed.\r\n \t\t*/\r\n \t\tlet ignoredKeys \t\t= ['url', 'live'];\r\n\r\n \t\t/*\r\n \t\t\tGet all of the song info elements\r\n \t\t*/\r\n \t\tlet songInfoElements = document.querySelectorAll('[amplitude-song-info]');\r\n\r\n \t\t/*\r\n \t\t\tIterate over all of the song info elements. We will either\r\n \t\t\tset these to the new values, or clear them if the active song\r\n \t\t\tdoesn't have the info set.\r\n \t\t*/\r\n \t\tfor( let i = 0; i < songInfoElements.length; i++ ){\r\n\r\n\t\t\t/*\r\n\t\t\t\tFor this method we do not want the element to have any playlist or\r\n\t\t\t\tmain song info. This way we aren't adjusting the main song information for the\r\n\t\t\t\tglobal player or the playlist player.\r\n\t\t\t*/\r\n\t\t\tif( songInfoElements[i].getAttribute('amplitude-playlist') == null\r\n\t\t\t\t\t&& songInfoElements[i].getAttribute('amplitude-main-song-info') == null\r\n\t\t\t\t  && songInfoElements[i].getAttribute('amplitude-song-index') != null ){\r\n\r\n\t\t\t\t\t/*\r\n\t\t \t\t\t\tGet the info so we can check if the active meta data has the\r\n\t\t \t\t\t\tkey.\r\n\t\t \t\t\t*/\r\n\t\t \t\t\tlet info = songInfoElements[i].getAttribute('amplitude-song-info');\r\n\t\t\t\t\tlet index = songInfoElements[i].getAttribute('amplitude-song-index');\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tMake sure that the song index they are referencing is defined.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif( config.songs[index][info] != undefined ){\r\n\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\tIf it's an image meta data key, then we set the src attribute of\r\n\t\t\t\t\t\t\tthe element. Otherwise we set the inner HTML of the element.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\tif( imageMetaDataKeys.indexOf( info ) >= 0 ){\r\n\t\t\t\t\t\t\tsongInfoElements[i].setAttribute('src', config.songs[index][info]);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tsongInfoElements[i].innerHTML = config.songs[index][info];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t \t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t\tReturns the publically available functions\r\n\t\t@TODO Re-order to order of methods in module\r\n\t*/\r\n\treturn {\r\n\t\tsyncCurrentTime: syncCurrentTime,\r\n\t\tresetTimes: resetTimes,\r\n\t\tresetSongSliders: resetSongSliders,\r\n\t\tresetSongPlayedProgressBars: resetSongPlayedProgressBars,\r\n\t\tresetSongBufferedProgressBars: resetSongBufferedProgressBars,\r\n\t\tsetActiveContainer: setActiveContainer,\r\n\t\tdisplaySongMetadata: displaySongMetadata,\r\n\t\tsyncPlaybackSpeed: syncPlaybackSpeed,\r\n\t\tsyncBufferedProgressBars: syncBufferedProgressBars,\r\n\t\tsyncVolumeSliders: syncVolumeSliders,\r\n\t\tsetPlayPauseButtonsToPause: setPlayPauseButtonsToPause,\r\n\t\tsetFirstSongInPlaylist: setFirstSongInPlaylist,\r\n\t\tsyncMainPlayPause: syncMainPlayPause,\r\n\t\tsyncPlaylistPlayPause: syncPlaylistPlayPause,\r\n\t\tsyncSongPlayPause: syncSongPlayPause,\r\n\t\tsyncRepeat: syncRepeat,\r\n\t\tsyncRepeatSong: syncRepeatSong,\r\n\t\tsyncRepeatPlaylist: syncRepeatPlaylist,\r\n\t\tsyncMute: syncMute,\r\n\t\tsyncShuffle: syncShuffle,\r\n\t\tsyncPlaylistShuffle: syncPlaylistShuffle,\r\n\t\tsyncMainSliderLocation: syncMainSliderLocation,\r\n\t\tsyncPlaylistSliderLocation: syncPlaylistSliderLocation,\r\n\t\tsyncSongSliderLocation: syncSongSliderLocation,\r\n\t\tsyncVolumeSliderLocation: syncVolumeSliderLocation,\r\n\t\tsyncSongDuration: syncSongDuration,\r\n\t\tsyncSongsMetaData: syncSongsMetaData\r\n\t}\r\n})();\r\n\r\nexport default AmplitudeVisualSync\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/visual/visual.js","/**\r\n * Imports the config module\r\n * @module config\r\n */\r\nimport config from '../config.js';\r\n\r\n/**\r\n * AmplitudeJS Core Helpers\r\n * @module core/helpers\r\n */\r\nimport AmplitudeHelpers from './helpers.js';\r\n\r\n/**\r\n * AmplitudeJS Visual Sync\r\n * @module visual/visual\r\n*/\r\nimport AmplitudeVisualSync from '../visual/visual.js';\r\n\r\n/**\r\n * Interacts directly with native functions of the Audio element. Logic\r\n * leading up to these methods are handled by click handlers which call\r\n * helpers and visual synchronizers. These are the core functions of AmplitudeJS.\r\n * Every other function that leads to these prepare the information to be\r\n * acted upon by these functions.\r\n *\r\n * @module core/AmplitudeCore\r\n */\r\nlet AmplitudeCore = (function() {\r\n\t/**\r\n\t * Plays the active song. If the current song is live, it reconnects\r\n\t * the stream before playing.\r\n\t *\r\n\t * Public Accessor: Amplitude.play()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction play(){\r\n\t\t/*\r\n\t\t\tRun the before play callback\r\n\t\t*/\r\n\t\tAmplitudeHelpers.runCallback('before_play');\r\n\r\n\t\t/*\r\n\t\t\tIf the audio is live we re-conenct the stream.\r\n\t\t*/\r\n\t\tif( config.active_metadata.live ){\r\n\t\t\treconnectStream();\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tMobile remote sources need to be reconnected on play. I think this is\r\n\t\t\tbecause mobile browsers are optimized not to load all resources\r\n\t\t\tfor speed reasons. We only do this if mobile and the paused button\r\n\t\t\tis not clicked. If the pause button was clicked then we don't reconnect\r\n\t\t\tor the user will lose their place in the stream.\r\n\t\t*/\r\n\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && !config.paused ) {\r\n\t\t\treconnectStream();\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tPlay the song and set the playback rate to the playback\r\n\t\t\tspeed.\r\n\t\t*/\r\n\t\tconfig.active_song.play();\r\n\t\tconfig.active_song.playbackRate = config.playback_speed;\r\n\r\n\t\t/*\r\n\t\t\tRun the after play callback\r\n\t\t*/\r\n\t\tAmplitudeHelpers.runCallback('after_play');\r\n\t}\r\n\r\n\t/**\r\n\t * Pauses the active song. If it's live, it disconnects the stream.\r\n\t *\r\n\t * Public Accessor: Amplitude.pause()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction pause(){\r\n\t\t/*\r\n\t\t\tRun the before pause callback.\r\n\t\t*/\r\n\t\tAmplitudeHelpers.runCallback('before_pause');\r\n\r\n\t\t/*\r\n\t\t\tPause the active song.\r\n\t\t*/\r\n\t\tconfig.active_song.pause();\r\n\r\n\t\t/*\r\n\t\t\tFlag that pause button was clicked.\r\n\t\t*/\r\n\t\tconfig.paused = true;\r\n\r\n\t\t/*\r\n\t\t\tIf the song is live, we disconnect the stream so we aren't\r\n\t\t\tsaving it to memory.\r\n\t\t*/\r\n\t\tif( config.active_metadata.live ){\r\n\t\t\tdisconnectStream();\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tRun the after pause callback.\r\n\t\t*/\r\n\t\tAmplitudeHelpers.runCallback('after_pause');\r\n\t}\r\n\r\n\t/**\r\n\t * Stops the active song by setting the current song time to 0.\r\n\t * When the user resumes, it will be from the beginning.\r\n\t * If it's a live stream it disconnects.\r\n\t *\r\n\t * Public Accessor: Amplitude.stop()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction stop(){\r\n\t\t/*\r\n\t\t\tRuns the before stop callback.\r\n\t\t*/\r\n\t\tAmplitudeHelpers.runCallback('before_stop');\r\n\r\n\t\t/*\r\n\t\t\tSet the current time of the song to 0 which will reset the song.\r\n\t\t*/\r\n\t\tif( config.active_song.currentTime != 0 ){\r\n\t\t\tconfig.active_song.currentTime = 0;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tRun pause so the song will stop\r\n\t\t*/\r\n\t\tconfig.active_song.pause();\r\n\r\n\t\t/*\r\n\t\t\tIf the song is live, disconnect the stream.\r\n\t\t*/\r\n\t\tif( config.active_metadata.live ){\r\n\t\t\tdisconnectStream();\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tRun the after stop callback\r\n\t\t*/\r\n\t\tAmplitudeHelpers.runCallback('after_stop');\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the song volume.\r\n\t *\r\n\t * Public Accessor: Amplitude.setVolume( volumeLevel )\r\n\t *\r\n\t * @access public\r\n\t * @param {number} volumeLevel - A number between 1 and 100 as a percentage of\r\n\t * min to max for a volume level.\r\n\t */\r\n\tfunction setVolume( volumeLevel ){\r\n\t\t/*\r\n\t\t\tIf the volume is set to mute somewhere else, we sync the display.\r\n\t\t*/\r\n\t\tif( volumeLevel == 0 ){\r\n\t\t\tAmplitudeVisualSync.syncMute( true );\r\n\t\t\tconfig.active_song.muted = true;\r\n\t\t}else{\r\n\t\t\tAmplitudeVisualSync.syncMute( false );\r\n\t\t\tconfig.active_song.muted = false;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tSets the volume in the config so we can reference it later on.\r\n\t\t*/\r\n\t\tconfig.volume = volumeLevel;\r\n\r\n\t\t/*\r\n\t\t\tSet the volume of the active song.\r\n\t\t*/\r\n\t\tconfig.active_song.volume = volumeLevel / 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the song percentage. If it's a live song, we ignore this because\r\n\t * we can't skip ahead. This is an issue if you have a playlist with\r\n\t * a live source.\r\n\t *\r\n\t * Public Accessor: Amplitude.setSongLocation( songPercentage )\r\n\t *\r\n\t * @access public\r\n\t * @param {number} songPercentage - A number between 1 and 100 as a percentage of song completion.\r\n\t */\r\n\tfunction setSongLocation( songPercentage ){\r\n\t\t/*\r\n\t\t\tAs long as the song is not live, we can set the current time of the\r\n\t\t\tsong to the percentage the user passed in.\r\n\t\t*/\r\n\t\tif( !config.active_metadata.live ){\r\n\t\t\tconfig.active_song.currentTime = ( config.active_song.duration ) * ( song_percentage / 100 );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Skips to a location in a song\r\n\t *\r\n\t * Public Accessor: Amplitude.skipToLocation( seconds )\r\n\t *\r\n\t * @access public\r\n\t * @param {number} seconds - An integer containing the seconds to skip to\r\n\t */\r\n\tfunction skipToLocation( seconds ){\r\n\t\t/*\r\n\t\t\tWhen the active song can be played through, we can check to\r\n\t\t\tsee if the seconds will work. We only bind the event handler\r\n\t\t\tonce and remove it once it's fired.\r\n\t\t*/\r\n\t\tconfig.active_song.addEventListener('canplaythrough', function(){\r\n\t\t\t/*\r\n\t\t\t\tIf the active song duration is greater than or equal to the\r\n\t\t\t\tamount of seconds the user wants to skip to and the seconds\r\n\t\t\t\tis greater than 0, we skip to the seconds defined.\r\n\t\t\t*/\r\n\t\t\tif( config.active_song.duration >= seconds && seconds > 0 ){\r\n\t\t\t\tconfig.active_song.currentTime = seconds;\r\n\t\t\t}else{\r\n\t\t\t\tAmplitudeHelpers.writeDebugMessage('Amplitude can\\'t skip to a location greater than the duration of the audio or less than 0');\r\n\t\t\t}\r\n\t\t}, { once: true });\r\n\t}\r\n\r\n\t/**\r\n\t * Disconnects the live stream\r\n\t *\r\n\t * Public Accessor: Amplitude.disconnectStream()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction disconnectStream(){\r\n\t\tconfig.active_song.src = '';\r\n\t\tconfig.active_song.load();\r\n\t}\r\n\r\n\t/**\r\n\t * Reconnects the live stream\r\n\t *\r\n\t * Public Accessor: Amplitude.reconnectStream()\r\n\t *\r\n\t * @access public\\\r\n\t */\r\n\tfunction reconnectStream(){\r\n\t\tconfig.active_song.src = config.active_metadata.url;\r\n\t\tconfig.active_song.load();\r\n\t}\r\n\r\n\t/**\r\n\t * When you pass a song object it plays that song right awawy.  It sets\r\n\t * the active song in the config to the song you pass in and synchronizes\r\n\t * the visuals.\r\n\t *\r\n\t * Public Accessor: Amplitude.playNow( song )\r\n\t *\r\n\t * @access public\r\n\t * @param {object} song - JSON representation of a song.\r\n\t */\r\n\tfunction playNow( song ){\r\n\t\t/*\r\n\t\t\tMakes sure the song object has a URL associated with it\r\n\t\t\tor there will be nothing to play.\r\n\t\t*/\r\n\t\tif( song.url ){\r\n\t\t\tconfig.active_song.src \t= song.url;\r\n\t\t\tconfig.active_metadata \t= song;\r\n\t\t\tconfig.active_album \t= song.album;\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tWrite error message since the song passed in doesn't\r\n\t\t\t\thave a URL.\r\n\t\t\t*/\r\n\t\t\tAmplitudeHelpers.writeDebugMessage('The song needs to have a URL!');\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tSets the main song control status visual\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.syncMainPlayPause('playing');\r\n\r\n\t\t/*\r\n\t\t\tUpdate the song meta data\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.displaySongMetadata();\r\n\r\n\r\n\t\t/*\r\n\t\t\tReset the song sliders, song progress bar info, and\r\n\t\t\treset times. This ensures everything stays in sync.\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.resetSongSliders();\r\n\r\n\t\tAmplitudeVisualSync.resetSongPlayedProgressBars();\r\n\r\n\t\tAmplitudeVisualSync.resetTimes();\r\n\r\n\t\t/*\r\n\t\t\tPlays the song.\r\n\t\t*/\r\n\t\tplay();\r\n\t}\r\n\r\n    /**\r\n     * Sets the song at a specific index in the songs array\r\n     *\r\n     * Public Accessor: Amplitude.setSongAtIndex( index )\r\n     *\r\n     * @access public\r\n     * @param {number} index - The number representing the song in the songs array\r\n     */\r\n    function setSongAtIndex( index ) {\r\n        stop();\r\n\r\n        /*\r\n               Determine if there is a new playlist, if so set the active playlist and change the song.\r\n        */\r\n        if( AmplitudeHelpers.checkNewPlaylist( null ) ){\r\n            AmplitudeHelpers.setActivePlaylist( null );\r\n\r\n            AmplitudeHelpers.changeSong( index );\r\n        }\r\n\r\n        /*\r\n               Check if the song is new. If so, change the song.\r\n        */\r\n        if( AmplitudeHelpers.checkNewSong( index ) ){\r\n            AmplitudeHelpers.changeSong( index );\r\n        }\r\n\r\n        /*\r\n            Sync all of the play pause buttons.\r\n        */\r\n        AmplitudeVisualSync.syncMainPlayPause('paused');\r\n        AmplitudeVisualSync.syncPlaylistPlayPause( config.active_playlist, 'paused' );\r\n        AmplitudeVisualSync.syncSongPlayPause( config.active_playlist, config.active_index, 'paused' );\r\n    }\r\n\r\n\t/**\r\n\t * Plays the song at a specific index in the songs array\r\n\t *\r\n\t * Public Accessor: Amplitude.playSongAtIndex( song )\r\n\t *\r\n\t * @access public\r\n\t * @param {number} index - The number representing the song in the songs array\r\n\t */\r\n\t function playSongAtIndex( index ){\r\n\t\t /*\r\n\t\t\t\tStop the current song.\r\n\t\t */\r\n\t\t stop();\r\n\r\n\t\t /*\r\n\t\t\t\tDetermine if there is a new playlist, if so set the active playlist and change the song.\r\n\t\t */\r\n\t\t if( AmplitudeHelpers.checkNewPlaylist( null ) ){\r\n\t\t\t AmplitudeHelpers.setActivePlaylist( null );\r\n\r\n\t\t\t AmplitudeHelpers.changeSong( index );\r\n\t\t }\r\n\r\n\t\t /*\r\n\t\t\t\tCheck if the song is new. If so, change the song.\r\n\t\t */\r\n\t\t if( AmplitudeHelpers.checkNewSong( index ) ){\r\n\t\t\t AmplitudeHelpers.changeSong( index );\r\n\t\t }\r\n\r\n\t\t /*\r\n\t\t\t Sync all of the play pause buttons.\r\n\t\t */\r\n\t\t AmplitudeVisualSync.syncMainPlayPause('playing');\r\n\t\t AmplitudeVisualSync.syncPlaylistPlayPause( config.active_playlist, 'playing' );\r\n\t\t AmplitudeVisualSync.syncSongPlayPause( config.active_playlist, config.active_index, 'playing' );\r\n\r\n\t\t /*\r\n\t\t\t Play the song\r\n\t\t */\r\n\t\t play();\r\n\t }\r\n\r\n    /**\r\n     * Sets a song at the index passed in for the playlist provided. The index passed\r\n     * in should be the index of the song in the playlist and not the songs array.\r\n     *\r\n     * @access public\r\n     * @param {number} index \t\t- The number representing the song in the playlist array.\r\n     * @param {string} playlist \t- The key string representing the playlist we are playing the song from.\r\n     *\r\n     */\r\n    function setPlaylistSongAtIndex( index, playlist ){\r\n        /*\r\n                Stop the current song.\r\n        */\r\n        stop();\r\n\r\n        /*\r\n                Get the index of the song in the songs array. This is the integer at the index\r\n               in the playlist.\r\n        */\r\n        let songIndex = config.playlists[ playlist ][ index ];\r\n\r\n        /*\r\n                Determine if there is a new playlist, if so set the active playlist and change the song.\r\n        */\r\n        if( AmplitudeHelpers.checkNewPlaylist( playlist ) ){\r\n            AmplitudeHelpers.setActivePlaylist( playlist );\r\n\r\n            AmplitudeHelpers.changeSong( songIndex );\r\n        }\r\n\r\n        /*\r\n                Check if the song is new. If so, change the song.\r\n        */\r\n        if( AmplitudeHelpers.checkNewSong( songIndex ) ){\r\n            AmplitudeHelpers.changeSong( songIndex );\r\n        }\r\n\r\n        /*\r\n            Sync all of the play pause buttons.\r\n        */\r\n        AmplitudeVisualSync.syncMainPlayPause('paused');\r\n        AmplitudeVisualSync.syncPlaylistPlayPause( config.active_playlist, 'paused' );\r\n        AmplitudeVisualSync.syncSongPlayPause( config.active_playlist, config.active_index, 'paused' );\r\n    }\r\n\r\n\t /**\r\n\t\t* Plays a song at the index passed in for the playlist provided. The index passed\r\n\t\t* in should be the index of the song in the playlist and not the songs array.\r\n\t\t*\r\n\t\t* @access public\r\n\t\t* @param {number} index \t\t- The number representing the song in the playlist array.\r\n\t\t* @param {string} playlist \t- The key string representing the playlist we are playing the song from.\r\n\t\t*\r\n\t\t*/\r\n\t function playPlaylistSongAtIndex( index, playlist ){\r\n\t\t\t /*\r\n\t\t\t \t\tStop the current song.\r\n\t\t\t */\r\n\t\t\t stop();\r\n\r\n\t\t\t /*\r\n\t\t\t \t\tGet the index of the song in the songs array. This is the integer at the index\r\n\t\t\t\t\tin the playlist.\r\n\t\t\t */\r\n\t\t\t let songIndex = config.playlists[ playlist ][ index ];\r\n\r\n\t\t\t /*\r\n\t\t\t \t\tDetermine if there is a new playlist, if so set the active playlist and change the song.\r\n\t\t\t */\r\n\t\t\t if( AmplitudeHelpers.checkNewPlaylist( playlist ) ){\r\n\t\t\t\t AmplitudeHelpers.setActivePlaylist( playlist );\r\n\r\n\t\t\t\t AmplitudeHelpers.changeSong( songIndex );\r\n\t\t\t }\r\n\r\n\t\t\t /*\r\n\t\t\t \t\tCheck if the song is new. If so, change the song.\r\n\t\t\t */\r\n\t\t\tif( AmplitudeHelpers.checkNewSong( songIndex ) ){\r\n\t\t\t AmplitudeHelpers.changeSong( songIndex );\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t\tSync all of the play pause buttons.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncMainPlayPause('playing');\r\n\t\t\tAmplitudeVisualSync.syncPlaylistPlayPause( config.active_playlist, 'playing' );\r\n\t\t\tAmplitudeVisualSync.syncSongPlayPause( config.active_playlist, config.active_index, 'playing' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tPlay the song\r\n\t\t\t*/\r\n\t\t\tplay();\r\n\t }\r\n\r\n\t/**\r\n\t * Sets the playback speed for the song.\r\n\t *\r\n\t * @param {number} playbackSpeed The speed we want the song to play back at.\r\n\t */\r\n\tfunction setPlaybackSpeed( playbackSpeed ){\r\n\t\t/*\r\n\t\t\tSet the config playback speed.\r\n\t\t*/\r\n\t\tconfig.playback_speed = playbackSpeed;\r\n\r\n\t\t/*\r\n\t\t\tSet the active song playback rate.\r\n\t\t*/\r\n\t\tconfig.active_song.playbackRate = config.playback_speed;\r\n\t}\r\n\r\n\t/*\r\n\t\tReturn publically facing functions\r\n\t*/\r\n\treturn {\r\n\t\tplay: play,\r\n\t\tpause: pause,\r\n\t\tstop: stop,\r\n\t\tsetVolume: setVolume,\r\n\t\tsetSongLocation: setSongLocation,\r\n\t\tskipToLocation: skipToLocation,\r\n\t\tdisconnectStream: disconnectStream,\r\n\t\treconnectStream: reconnectStream,\r\n\t\tplayNow: playNow,\r\n        setSongAtIndex: setSongAtIndex,\r\n\t\tplaySongAtIndex: playSongAtIndex,\r\n        setPlaylistSongAtIndex: setPlaylistSongAtIndex,\r\n\t\tplayPlaylistSongAtIndex: playPlaylistSongAtIndex,\r\n\t\tsetPlaybackSpeed: setPlaybackSpeed\r\n\t}\r\n})();\r\n\r\nexport default AmplitudeCore\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/core.js","/*\r\n\tImport the necessary classes and config to use\r\n\twith the events.\r\n*/\r\nimport config from '../config.js';\r\nimport AmplitudeHelpers from '../core/helpers.js';\r\nimport AmplitudeHandlers from './handlers.js';\r\n\r\n/*\r\n|----------------------------------------------------------------------------------------------------\r\n| EVENTS METHODS\r\n|----------------------------------------------------------------------------------------------------\r\n| These methods are called when we need to bind events to certain elements.\r\n|\r\n| METHODS:\r\n| \tinitializeEvents()\r\n|\tbindPlay()\r\n|\tbindPause()\r\n|\tbindPlayPause()\r\n|\tbindStop()\r\n|\tbindMute()\r\n|\tbindVolumeUp()\r\n|\tbindVolumeDown()\r\n|\tbindSongSlider()\r\n|\tbindVolumeSlider()\r\n|\tbindNext()\r\n|\tbindPrev()\r\n|\tbindShuffle()\r\n|\tbindRepeat()\r\n|\tbindPlaybackSpeed()\r\n|\tbindSkipTo()\r\n|      bindProgress()\r\n*/\r\nvar AmplitudeEvents = (function () {\r\n\t/*--------------------------------------------------------------------------\r\n\t\tInitializes the handlers for the events listened to by Amplitude\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction initializeEvents(){\r\n\t\t/*\r\n\t\t\tWrite out debug message\r\n\t\t*/\r\n\t\tAmplitudeHelpers.writeDebugMessage( 'Beginning initialization of event handlers..' );\r\n\r\n\t\t/*\r\n\t\t\tSets flag that the screen is moving and not a tap\r\n\t\t*/\r\n\t\tdocument.addEventListener('touchmove', function(){\r\n\t\t\tconfig.is_touch_moving = true;\r\n\t\t});\r\n\r\n\t\t/*\r\n\t\t\tOn touch end if it was a touch move event, set moving to\r\n\t\t\tfalse\r\n\t\t*/\r\n\t\tdocument.addEventListener('touchend', function(){\r\n\t\t\tif( config.is_touch_moving ){\r\n\t\t\t\tconfig.is_touch_moving = false;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t/*\r\n\t\t\tOn time update for the audio element, update visual displays that\r\n\t\t\trepresent the time on either a visualized element or time display.\r\n\t\t*/\r\n\t\tbindTimeUpdate();\r\n\r\n\t\t/*\r\n\t\t\tBinds key down event handlers for matching key codes to functions.\r\n\t\t*/\r\n\t\tbindKeyDownEventHandlers();\r\n\r\n\t\t/*\r\n\t\t\tWhen the audio element has ended playing, we handle the song\r\n\t\t\tending. In a single song or multiple modular song instance,\r\n\t\t\tthis just synchronizes the visuals for time and song time\r\n\t\t\tvisualization, but for a playlist it determines whether\r\n\t\t\tit should play the next song or not.\r\n\t\t*/\r\n\t\tbindSongEnded();\r\n\r\n\t\t/*\r\n\t\t\tBinds progress event so we can see how much of the song is loaded.\r\n\t\t*/\r\n\t\tbindProgress();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-play' event handlers\r\n\t\t*/\r\n\t\tbindPlay();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-pause' event handlers.\r\n\t\t*/\r\n\t\tbindPause();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-play-pause' event handlers.\r\n\t\t*/\r\n\t\tbindPlayPause();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-stop' event handlers.\r\n\t\t*/\r\n\t\tbindStop();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-mute' event handlers.\r\n\t\t*/\r\n\t\tbindMute();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-volume-up' event handlers\r\n\t\t*/\r\n\t\tbindVolumeUp();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-volume-down' event handlers\r\n\t\t*/\r\n\t\tbindVolumeDown();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-song-slider' event handlers\r\n\t\t*/\r\n\t\tbindSongSlider();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-volume-slider' event handlers.\r\n\t\t*/\r\n\t\tbindVolumeSlider();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-next' event handlers.\r\n\t\t*/\r\n\t\tbindNext();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-prev' event handlers.\r\n\t\t*/\r\n\t\tbindPrev();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-shuffle' event handlers.\r\n\t\t*/\r\n\t\tbindShuffle();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-repeat' event handlers.\r\n\t\t*/\r\n\t\tbindRepeat();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-playback-speed' event handlers.\r\n\t\t*/\r\n\t\tbindPlaybackSpeed();\r\n\r\n\t\t/*\r\n\t\t\tBinds 'amplitude-skip-to' event handlers.\r\n\t\t*/\r\n\t\tbindSkipTo();\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tOn time update for the audio element, update visual displays that\r\n\t\t\trepresent the time on either a visualized element or time display.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindTimeUpdate(){\r\n\t\tconfig.active_song.removeEventListener( 'timeupdate', AmplitudeHandlers.updateTime );\r\n\t\tconfig.active_song.addEventListener( 'timeupdate', AmplitudeHandlers.updateTime );\r\n\r\n    // also bind change of duratuion\r\n\t\tconfig.active_song.removeEventListener( 'durationchange', AmplitudeHandlers.updateTime );\r\n\t\tconfig.active_song.addEventListener( 'durationchange', AmplitudeHandlers.updateTime );\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tOn keydown, we listen to what key got pressed so we can map the key to\r\n\t\ta function. This allows the user to map pause and play, next, etc. to key\r\n\t\tpresses.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindKeyDownEventHandlers(){\r\n\t\tdocument.removeEventListener(\"keydown\", AmplitudeHelpers.keydown );\r\n\t\tdocument.addEventListener(\"keydown\", AmplitudeHandlers.keydown );\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tWhen the audio element has ended playing, we handle the song\r\n\t\tending. In a single song or multiple modular song instance,\r\n\t\tthis just synchronizes the visuals for time and song time\r\n\t\tvisualization, but for a playlist it determines whether\r\n\t\tit should play the next song or not.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindSongEnded(){\r\n\t\tconfig.active_song.removeEventListener( 'ended', AmplitudeHandlers.songEnded );\r\n\t\tconfig.active_song.addEventListener( 'ended', AmplitudeHandlers.songEnded );\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tAs the audio is loaded, the progress event gets fired. We bind into this\r\n\t\tto grab the buffered percentage of the song. We can then add more elements\r\n\t\tto show the buffered amount.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindProgress(){\r\n\t\tconfig.active_song.removeEventListener( 'progress', AmplitudeHandlers.progess );\r\n\t\tconfig.active_song.addEventListener( 'progress', AmplitudeHandlers.progress );\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-play\"\r\n\r\n\t\tBinds click and touchend events for amplitude play buttons.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindPlay(){\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitude-play\r\n\t\t*/\r\n\t\tvar play_classes = document.getElementsByClassName(\"amplitude-play\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the play classes and binds the event interaction\r\n\t\t\tmethod to the element. If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it is click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < play_classes.length; i++ ){\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test( navigator.userAgent ) ) {\r\n\t\t\t\tplay_classes[i].removeEventListener('touchend', AmplitudeHandlers.play );\r\n\t\t\t\tplay_classes[i].addEventListener('touchend', AmplitudeHandlers.play );\r\n\t\t\t}else{\r\n\t\t\t\tplay_classes[i].removeEventListener('click', AmplitudeHandlers.play );\r\n\t\t\t\tplay_classes[i].addEventListener('click', AmplitudeHandlers.play );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-pause\"\r\n\r\n\t\tBinds click and touchend events for amplitude pause buttons.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindPause(){\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitude-pause\r\n\t\t*/\r\n\t\tvar pause_classes = document.getElementsByClassName(\"amplitude-pause\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the pause classes and binds the event interaction\r\n\t\t\tmethod to the element. If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it is click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < pause_classes.length; i++ ){\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\tpause_classes[i].removeEventListener('touchend', AmplitudeHandlers.pause );\r\n\t\t\t\tpause_classes[i].addEventListener('touchend', AmplitudeHandlers.pause );\r\n\t\t\t}else{\r\n\t\t\t\tpause_classes[i].removeEventListener('click', AmplitudeHandlers.pause );\r\n\t\t\t\tpause_classes[i].addEventListener('click', AmplitudeHandlers.pause );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-play-pause\"\r\n\r\n\t\tBinds click and touchend events for amplitude play pause buttons.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindPlayPause(){\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitude-play-pause\r\n\t\t*/\r\n\t\tvar play_pause_classes = document.getElementsByClassName(\"amplitude-play-pause\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the play/pause classes and binds the event interaction\r\n\t\t\tmethod to the element. If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it is click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < play_pause_classes.length; i++ ){\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\tplay_pause_classes[i].removeEventListener('touchend', AmplitudeHandlers.playPause );\r\n\t\t\t\tplay_pause_classes[i].addEventListener('touchend', AmplitudeHandlers.playPause );\r\n\t\t\t}else{\r\n\t\t\t\tplay_pause_classes[i].removeEventListener('click', AmplitudeHandlers.playPause );\r\n\t\t\t\tplay_pause_classes[i].addEventListener('click', AmplitudeHandlers.playPause );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-stop\"\r\n\r\n\t\tBinds click and touchend events for amplitude stop buttons\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindStop(){\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitude-stop\r\n\t\t*/\r\n\t\tvar stop_classes = document.getElementsByClassName(\"amplitude-stop\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the stop classes and binds the event interaction\r\n\t\t\tmethod to the element.  If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it is click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < stop_classes.length; i++ ){\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\tstop_classes[i].removeEventListener('touchend', AmplitudeHandlers.stop );\r\n\t\t\t\tstop_classes[i].addEventListener('touchend', AmplitudeHandlers.stop );\r\n\t\t\t}else{\r\n\t\t\t\tstop_classes[i].removeEventListener('click', AmplitudeHandlers.stop );\r\n\t\t\t\tstop_classes[i].addEventListener('click', AmplitudeHandlers.stop );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-mute\"\r\n\r\n\t\tBinds click and touchend events for amplitude mute buttons\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindMute(){\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitue-mute\r\n\t\t*/\r\n\t\tvar mute_classes = document.getElementsByClassName(\"amplitude-mute\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the mute classes and binds the event interaction\r\n\t\t\tmethod to the element. If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it is click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < mute_classes.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tWARNING: If iOS, we don't do anything because iOS does not allow the\r\n\t\t\t\tvolume to be adjusted through anything except the buttons on the side of\r\n\t\t\t\tthe device.\r\n\t\t\t*/\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\t/*\r\n\t\t\t\t\tChecks for an iOS device and displays an error message if debugging\r\n\t\t\t\t\tis turned on.\r\n\t\t\t\t*/\r\n\t\t\t\tif( /iPhone|iPad|iPod/i.test(navigator.userAgent) ) {\r\n\t\t\t\t\tAmplitudeHelpers.writeDebugMessage( 'iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4' );\r\n\t\t\t\t}else{\r\n\t\t\t\t\tmute_classes[i].removeEventListener('touchend', AmplitudeHandlers.mute );\r\n\t\t\t\t\tmute_classes[i].addEventListener('touchend', AmplitudeHandlers.mute );\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tmute_classes[i].removeEventListener('click', AmplitudeHandlers.mute );\r\n\t\t\t\tmute_classes[i].addEventListener('click', AmplitudeHandlers.mute );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-volume-up\"\r\n\r\n\t\tBinds click and touchend events for amplitude volume up buttons\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindVolumeUp(){\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitude-volume-up\r\n\t\t*/\r\n\t\tvar volume_up_classes = document.getElementsByClassName(\"amplitude-volume-up\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the volume up classes and binds the event interaction\r\n\t\t\tmethods to the element. If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it is click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < volume_up_classes.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tWARNING: If iOS, we don't do anything because iOS does not allow the\r\n\t\t\t\tvolume to be adjusted through anything except the buttons on the side of\r\n\t\t\t\tthe device.\r\n\t\t\t*/\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\t/*\r\n\t\t\t\t\tChecks for an iOS device and displays an error message if debugging\r\n\t\t\t\t\tis turned on.\r\n\t\t\t\t*/\r\n\t\t\t\tif( /iPhone|iPad|iPod/i.test(navigator.userAgent) ) {\r\n\t\t\t\t\tAmplitudeHelpers.writeDebugMessage( 'iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4' );\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvolume_up_classes[i].removeEventListener('touchend', AmplitudeHandlers.volumeUp );\r\n\t\t\t\t\tvolume_up_classes[i].addEventListener('touchend', AmplitudeHandlers.volumeUp );\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tvolume_up_classes[i].removeEventListener('click', AmplitudeHandlers.volumeUp );\r\n\t\t\t\tvolume_up_classes[i].addEventListener('click', AmplitudeHandlers.volumeUp );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-volume-down\"\r\n\r\n\t\tBinds click and touchend events for amplitude volume down buttons\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindVolumeDown(){\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitude-volume-down\r\n\t\t*/\r\n\t\tvar volume_down_classes = document.getElementsByClassName(\"amplitude-volume-down\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the volume down classes and binds the event interaction\r\n\t\t\tmethods to the element. If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it is click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < volume_down_classes.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tWARNING: If iOS, we don't do anything because iOS does not allow the\r\n\t\t\t\tvolume to be adjusted through anything except the buttons on the side of\r\n\t\t\t\tthe device.\r\n\t\t\t*/\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\t/*\r\n\t\t\t\t\tChecks for an iOS device and displays an error message if debugging\r\n\t\t\t\t\tis turned on.\r\n\t\t\t\t*/\r\n\t\t\t\tif( /iPhone|iPad|iPod/i.test(navigator.userAgent) ) {\r\n\t\t\t\t\tAmplitudeHelpers.writeDebugMessage( 'iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4' );\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvolume_down_classes[i].removeEventListener('touchend', AmplitudeHandlers.volumeDown );\r\n\t\t\t\t\tvolume_down_classes[i].addEventListener('touchend', AmplitudeHandlers.volumeDown );\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tvolume_down_classes[i].removeEventListener('click', AmplitudeHandlers.volumeDown );\r\n\t\t\t\tvolume_down_classes[i].addEventListener('click', AmplitudeHandlers.volumeDown );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-song-slider\"\r\n\r\n\t\tBinds change and input events for amplitude song slider inputs\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindSongSlider(){\r\n\t\t/*\r\n\t\t\tGets browser so if we need to apply overrides, like we usually\r\n\t\t\thave to do for anything cool in IE, we can do that.\r\n\t\t*/\r\n\t\tvar ua \t\t= window.navigator.userAgent;\r\n    var msie \t= ua.indexOf(\"MSIE \");\r\n\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitude-song-slider\r\n\t\t*/\r\n\t\tvar song_sliders = document.getElementsByClassName(\"amplitude-song-slider\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the song slider classes and binds the event interaction\r\n\t\t\tmethods to the element. If the browser is IE we listen to the change event\r\n\t\t\twhere if it is anything else, it's the input method.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < song_sliders.length; i++ ){\r\n\r\n\t\t\t/*\r\n\t\t\t\tDefines if the song slider is sliding\r\n\t\t\t*/\r\n            song_sliders[i].removeEventListener('mousedown', function () {\r\n                config.is_sliding = true;\r\n            });\r\n            song_sliders[i].addEventListener('mousedown', function () {\r\n                config.is_sliding = true;\r\n            });\r\n            song_sliders[i].removeEventListener('mouseup', function () {\r\n                config.is_sliding = false;\r\n            });\r\n            song_sliders[i].addEventListener('mouseup', function () {\r\n                config.is_sliding = false;\r\n            });\r\n\r\n\t\t\tif ( msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./) ){\r\n\t\t\t\tsong_sliders[i].removeEventListener('change', AmplitudeHandlers.songSlider );\r\n\t\t\t\tsong_sliders[i].addEventListener('change', AmplitudeHandlers.songSlider );\r\n\t\t\t}else{\r\n\t\t\t\tsong_sliders[i].removeEventListener('input', AmplitudeHandlers.songSlider );\r\n\t\t\t\tsong_sliders[i].addEventListener('input', AmplitudeHandlers.songSlider );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-volume-slider\"\r\n\r\n\t\tBinds change and input events for amplitude volume slider inputs\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindVolumeSlider(){\r\n\t\t/*\r\n\t\t\tGets browser so if we need to apply overrides, like we usually\r\n\t\t\thave to do for anything cool in IE, we can do that.\r\n\t\t*/\r\n\t\tvar ua \t\t= window.navigator.userAgent;\r\n        var msie \t= ua.indexOf(\"MSIE \");\r\n\r\n        /*\r\n\t\t\tGets all of the elements with the class amplitude-volume-slider\r\n        */\r\n\t\tvar volume_sliders = document.getElementsByClassName(\"amplitude-volume-slider\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the volume slider classes and binds the event interaction\r\n\t\t\tmethods to the element. If the browser is IE we listen to the change event\r\n\t\t\twhere if it is anything else, it's the input method.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < volume_sliders.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tWARNING: If iOS, we don't do anything because iOS does not allow the\r\n\t\t\t\tvolume to be adjusted through anything except the buttons on the side of\r\n\t\t\t\tthe device.\r\n\t\t\t*/\r\n\t\t\tif( /iPhone|iPad|iPod/i.test(navigator.userAgent) ) {\r\n\t\t\t\tAmplitudeHelpers.writeDebugMessage( 'iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4' );\r\n\t\t\t}else{\r\n\t\t\t\tif ( msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./) ){\r\n\t\t\t\t\tvolume_sliders[i].removeEventListener('change', AmplitudeHandlers.volumeSlider );\r\n\t\t\t\t\tvolume_sliders[i].addEventListener('change', AmplitudeHandlers.volumeSlider );\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvolume_sliders[i].removeEventListener('input', AmplitudeHandlers.volumeSlider );\r\n\t\t\t\t\tvolume_sliders[i].addEventListener('input', AmplitudeHandlers.volumeSlider );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-next\"\r\n\r\n\t\tBinds click and touchend events for amplitude next buttons.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindNext(){\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitude-next\r\n        */\r\n\t\tvar next_classes = document.getElementsByClassName(\"amplitude-next\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the next classes and binds the event interaction\r\n\t\t\tmethods to the element. If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it is click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < next_classes.length; i++ ){\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\tnext_classes[i].removeEventListener('touchend', AmplitudeHandlers.next );\r\n\t\t\t\tnext_classes[i].addEventListener('touchend', AmplitudeHandlers.next );\r\n\t\t\t}else{\r\n\t\t\t\tnext_classes[i].removeEventListener('click', AmplitudeHandlers.next );\r\n\t\t\t\tnext_classes[i].addEventListener('click', AmplitudeHandlers.next );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-prev\"\r\n\r\n\t\tBinds click and touchend events for amplitude prev buttons.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindPrev(){\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitude-prev\r\n\t\t*/\r\n\t\tvar prev_classes = document.getElementsByClassName(\"amplitude-prev\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the prev classes and binds the event interaction\r\n\t\t\tmethods to the element. If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it is click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < prev_classes.length; i++ ){\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\tprev_classes[i].removeEventListener('touchend', AmplitudeHandlers.prev );\r\n\t\t\t\tprev_classes[i].addEventListener('touchend', AmplitudeHandlers.prev );\r\n\t\t\t}else{\r\n\t\t\t\tprev_classes[i].removeEventListener('click', AmplitudeHandlers.prev );\r\n\t\t\t\tprev_classes[i].addEventListener('click', AmplitudeHandlers.prev );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-shuffle\"\r\n\r\n\t\tBinds click and touchend events for amplitude shuffle buttons.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindShuffle(){\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitude-shuffle\r\n\t\t*/\r\n\t\tvar shuffle_classes = document.getElementsByClassName(\"amplitude-shuffle\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the shuffle classes and binds the event interaction\r\n\t\t\tmethods to the element. If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it is click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < shuffle_classes.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tSince we are re-binding everything we remove any classes that signify\r\n\t\t\t\ta state of the shuffle control.\r\n\t\t\t*/\r\n\t\t\tshuffle_classes[i].classList.remove('amplitude-shuffle-on');\r\n\t\t\tshuffle_classes[i].classList.add('amplitude-shuffle-off');\r\n\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\tshuffle_classes[i].removeEventListener('touchend', AmplitudeHandlers.shuffle );\r\n\t\t\t\tshuffle_classes[i].addEventListener('touchend', AmplitudeHandlers.shuffle );\r\n\t\t\t}else{\r\n\t\t\t\tshuffle_classes[i].removeEventListener('click', AmplitudeHandlers.shuffle );\r\n\t\t\t\tshuffle_classes[i].addEventListener('click', AmplitudeHandlers.shuffle );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-repeat\"\r\n\r\n\t\tBinds click and touchend events for amplitude repeat buttons.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindRepeat(){\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitude-repeat\r\n\t\t*/\r\n\t\tvar repeat_classes = document.getElementsByClassName(\"amplitude-repeat\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the repeat classes and binds the event interaction\r\n\t\t\tmethods to the element. If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it is click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < repeat_classes.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tSince we are re-binding everything we remove any classes that signify\r\n\t\t\t\ta state of the repeat control.\r\n\t\t\t*/\r\n\t\t\trepeat_classes[i].classList.remove('amplitude-repeat-on');\r\n\t\t\trepeat_classes[i].classList.add('amplitude-repeat-off');\r\n\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\trepeat_classes[i].removeEventListener('touchend', AmplitudeHandlers.repeat );\r\n\t\t\t\trepeat_classes[i].addEventListener('touchend', AmplitudeHandlers.repeat );\r\n\t\t\t}else{\r\n\t\t\t\trepeat_classes[i].removeEventListener('click', AmplitudeHandlers.repeat );\r\n\t\t\t\trepeat_classes[i].addEventListener('click', AmplitudeHandlers.repeat );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-playback-speed\"\r\n\r\n\t\tBinds click and touchend events for amplitude playback speed buttons.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindPlaybackSpeed(){\r\n\t\t/*\r\n\t\t\tGets all of the elements with the class amplitude-playback-speed\r\n\t\t*/\r\n\t\tvar playback_speed_classes = document.getElementsByClassName(\"amplitude-playback-speed\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the playback speed classes and binds the event interaction\r\n\t\t\tmethods to the element. If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it is click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < playback_speed_classes.length; i++ ){\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\tplayback_speed_classes[i].removeEventListener('touchend', AmplitudeHandlers.playbackSpeed );\r\n\t\t\t\tplayback_speed_classes[i].addEventListener('touchend', AmplitudeHandlers.playbackSpeed );\r\n\t\t\t}else{\r\n\t\t\t\tplayback_speed_classes[i].removeEventListener('click', AmplitudeHandlers.playbackSpeed );\r\n\t\t\t\tplayback_speed_classes[i].addEventListener('click', AmplitudeHandlers.playbackSpeed );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tBINDS: class=\"amplitude-skip-to\"\r\n\r\n\t\tBinds click and touchend events for amplitude skip to buttons.\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction bindSkipTo(){\r\n\t\t/*\r\n\t\t\tGets all of the skip to elements with the class 'amplitude-skip-to'\r\n\t\t*/\r\n\t\tvar skipToClasses = document.getElementsByClassName(\"amplitude-skip-to\");\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the skip to classes and binds the event interaction\r\n\t\t\tmethods to the element. If the browser is mobile, then the event is touchend\r\n\t\t\totherwise it's a click.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < skipToClasses.length; i++ ){\r\n\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\tskipToClasses[i].removeEventListener('touchend', AmplitudeHandlers.skipTo );\r\n\t\t\t\tskipToClasses[i].addEventListener('touchend', AmplitudeHandlers.skipTo );\r\n\t\t\t}else{\r\n\t\t\t\tskipToClasses[i].removeEventListener('click', AmplitudeHandlers.skipTo );\r\n\t\t\t\tskipToClasses[i].addEventListener('click', AmplitudeHandlers.skipTo );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tinitializeEvents: initializeEvents\r\n\t}\r\n})();\r\n\r\nexport default AmplitudeEvents\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/events/events.js","/**\r\n * Imports the config module\r\n * @module config\r\n */\r\nimport config from '../config.js';\r\n\r\n/**\r\n * Imports the Amplitude Visual Sync module\r\n * @module visual/AmplitudeVisualSync\r\n */\r\nimport AmplitudeVisualSync from '../visual/visual.js';\r\n\r\n/**\r\n * Imports the Amplitude Core module\r\n * @module core/AmplitudeCore\r\n */\r\nimport AmplitudeCore from '../core/core.js';\r\n\r\n/**\r\n * Imports the Amplitude Core Helpers module\r\n * @module core/AmplitudeCoreHelpers\r\n */\r\nimport AmplitudeCoreHelpers from '../core/helpers.js';\r\n\r\n/**\r\n * These methods help handle interactions whether it's computation or shuffling\r\n * songs.\r\n *\r\n * @module events/AmplitudeEventsHelpers\r\n */\r\nlet AmplitudeEventsHelpers = (function() {\r\n\t/**\r\n\t * Computes the current song time. Breaks down where the song is into\r\n\t * hours, minutes, seconds and formats it to be displayed to the user.\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction computeCurrentTimes(){\r\n\t\t/*\r\n\t\t\tInitialize the current time object that will be returned.\r\n\t\t*/\r\n\t\tlet currentTime = {};\r\n\r\n\t\t/*\r\n\t\t\tComputes the current seconds for the song.\r\n\t\t*/\r\n\t\tlet currentSeconds = ( Math.floor( config.active_song.currentTime % 60 ) < 10 ? '0' : '' ) +\r\n\t\t\t\t\t\t\t    Math.floor( config.active_song.currentTime % 60 );\r\n\r\n\t\t/*\r\n\t\t\tComputes the current minutes for the song.\r\n\t\t*/\r\n\t\tlet currentMinutes = Math.floor( config.active_song.currentTime / 60 );\r\n\r\n\t\t/*\r\n\t\t\tInitialize the current hours variable.\r\n\t\t*/\r\n\t\tlet currentHours = '00';\r\n\r\n\t\t/*\r\n\t\t\tIf the current minutes is less than 10, we add a leading 0.\r\n\t\t*/\r\n\t\tif( currentMinutes < 10 ){\r\n\t\t\tcurrentMinutes = '0'+currentMinutes;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tIf the user is more than 60 minutes into the song, then\r\n\t\t\twe extract the hours.\r\n\t\t*/\r\n\t\tif( currentMinutes >= 60 ){\r\n\t\t\tcurrentHours \t\t= Math.floor( currentMinutes / 60 );\r\n\t\t\tcurrentMinutes \t\t= currentMinutes % 60;\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf the user is less than 10 minutes in, we append the\r\n\t\t\t\tadditional 0 to the minutes.\r\n\t\t\t*/\r\n\t\t\tif( currentMinutes < 10 ){\r\n\t\t\t\tcurrentMinutes = '0'+currentMinutes;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tBuild a clean current time object and send back the appropriate information.\r\n\t\t*/\r\n\t\tcurrentTime.seconds = currentSeconds;\r\n\t\tcurrentTime.minutes = currentMinutes;\r\n\t\tcurrentTime.hours \t= currentHours;\r\n\r\n\t\treturn currentTime;\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the current song duration. Breaks down where the song is into\r\n\t * hours, minutes, seconds and formats it to be displayed to the user.\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction computeSongDuration(){\r\n\t\t/*\r\n\t\t\tInitialize the song duration object that will be returned.\r\n\t\t*/\r\n\t\tlet songDuration = {};\r\n\r\n\t\t/*\r\n\t\t\tComputes the duration of the song's seconds.\r\n\t\t*/\r\n\t\tlet songDurationSeconds = ( Math.floor( config.active_song.duration % 60 ) < 10 ? '0' : '' ) +\r\n\t\t\t\t\t\t\t\t\t  \t\tMath.floor( config.active_song.duration % 60 );\r\n\r\n\t\t/*\r\n\t\t\tComputes the duration of the song's minutes.\r\n\t\t*/\r\n\t\tlet songDurationMinutes = Math.floor( config.active_song.duration / 60 );\r\n\r\n\t\t/*\r\n\t\t\tInitialize the hours duration variable.\r\n\t\t*/\r\n\t\tvar songDurationHours = '0';\r\n\r\n\t\t/*\r\n\t\t\tIf the song duration minutes is less than 10, we add a leading 0.\r\n\t\t*/\r\n\t\tif( songDurationMinutes < 10 ){\r\n\t\t\tsongDurationMinutes = '0'+songDurationMinutes;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tIf there is more than 60 minutes in the song, then we\r\n\t\t\textract the hours.\r\n\t\t*/\r\n\t\tif( songDurationMinutes >= 60 ){\r\n\t\t\tsongDurationHours \t\t= Math.floor( songDurationMinutes / 60 );\r\n\t\t\tsongDurationMinutes \t= songDurationMinutes % 60;\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf the song duration minutes is less than 10 we append\r\n\t\t\t\tthe additional 0.\r\n\t\t\t*/\r\n\t\t\tif( songDurationMinutes < 10 ){\r\n\t\t\t\tsongDurationMinutes = '0'+songDurationMinutes;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tBuild a clean song duration object and send back the appropriate information.\r\n\t\t*/\r\n\t\tsongDuration.seconds \t= songDurationSeconds;\r\n\t\tsongDuration.minutes \t= songDurationMinutes;\r\n\t\tsongDuration.hours \t\t= songDurationHours;\r\n\r\n\t\treturn songDuration;\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the song completion percentage.\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction computeSongCompletionPercentage(){\r\n\t\treturn ( config.active_song.currentTime / config.active_song.duration ) * 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the current song's playback speed\r\n\t *\r\n\t * @access public\r\n\t * @param {number} speed \t- The float with a base of 1 representing the speed\r\n\t *\r\n\t */\r\n\tfunction setPlaybackSpeed( speed ){\r\n\t\tAmplitudeCore.setPlaybackSpeed( speed );\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the state of the repeat for the current song.\r\n\t *\r\n\t * @access public\r\n\t * @param {boolean} repeat - A boolean representing whether the repeat should be on or off\r\n\t * @param {string} playlist - The key of the playlist for repeating\r\n\t */\r\n\tfunction setRepeat( repeat, playlist ){\r\n\t\t/*\r\n\t\t  If the playlist is null, then we are dealing with the global\r\n\t\t  repeat status.\r\n\t\t*/\r\n\t\tif( playlist == null ){\r\n\t\t\t/*\r\n\t\t\t\tSet the global repeat to be toggled\r\n\t\t\t*/\r\n\t\t\tconfig.repeat = repeat;\r\n\r\n\t\t\t/*\r\n\t\t\t\tVisually sync repeat\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncRepeat();\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tSet the playlist repeat to be toggled.\r\n\t\t\t*/\r\n\t\t\tconfig.repeat_statuses[playlist] = repeat;\r\n\r\n\t\t\t/*\r\n\t\t\t\tVisually sync playlist repeat\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncRepeatPlaylist( playlist );\r\n\t\t}\r\n\r\n\r\n/** When song ends and in playlis mode and done with playlist check repeat  **/\r\n\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets the state of the repeat song\r\n\t *\r\n\t * @access public\r\n\t * @param {boolean} repeat - A boolean representing whether the repeat shoudl be on or off for the song.\r\n\t */\r\n\t function setRepeatSong( repeat ){\r\n\t\t config.repeat_song = repeat;\r\n\t }\r\n\r\n\t/**\r\n\t * Sets the main play pause buttons to the current state of the song.\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction setMainPlayPause(){\r\n\t\t/*\r\n\t\t\tDetermines what action we should take based on the\r\n\t\t\tstate of the song.\r\n\t\t*/\r\n\t\tif( config.active_song.paused ){\r\n\t\t\t/*\r\n\t\t\t\tThe song was paused so we sync visually for the song\r\n\t\t\t\tthat is playing and we play the song.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncMainPlayPause( 'playing' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf there is an active playlist, then\r\n\t\t\t\twe need to sync that playlist's play pause\r\n\t\t\t\tbutton to the state of playing.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncPlaylistPlayPause( config.active_playlist, 'playing' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tSync the song play pause buttons\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncSongPlayPause( config.active_playlist, config.active_index, 'playing' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tPlay the song\r\n\t\t\t*/\r\n\t\t\tAmplitudeCore.play();\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tThe song was playing so we sync visually for the song\r\n\t\t\t\tto be paused and we pause the song.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncMainPlayPause( 'paused' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf there is an active playlist, then\r\n\t\t\t\twe need to sync that playlist's play pause\r\n\t\t\t\tbutton to the state of paused.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncPlaylistPlayPause( config.active_playlist, 'paused' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tSync the song play pause buttons\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncSongPlayPause( config.active_playlist, config.active_index, 'paused' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tPause the song\r\n\t\t\t*/\r\n\t\t\tAmplitudeCore.pause();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the playlist main play pause buttons to the current state of the song.\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist The playlist the main play pause button controls\r\n\t */\r\n\tfunction setPlaylistPlayPause( playlist ){\r\n\t\t/*\r\n\t\t\tThe only thing that can change when you click a playlist\r\n\t\t\tplay pause is the playlist. Main play pauses have no change\r\n\t\t\tin song, song play pauses can change playlist and song.\r\n\t\t*/\r\n\t\tif( AmplitudeCoreHelpers.checkNewPlaylist( playlist ) ){\r\n\t\t\tAmplitudeCoreHelpers.setActivePlaylist( playlist );\r\n\r\n\t\t\t/*\r\n\t\t\t\tPlay first song in the playlist since we just\r\n\t\t\t\tswitched playlists, we start from the first song.\r\n\r\n\t\t\t\tIf the user has shuffle on for the playlist, then\r\n\t\t\t\twe go from the first song in the shuffle playlist array.\r\n\t\t\t*/\r\n\t\t\tif( config.shuffled_statuses[playlist] ){\r\n\t\t\t\tAmplitudeCoreHelpers.changeSong( config.shuffled_playlists[playlist][0].original_index );\r\n\t\t\t}else{\r\n\t\t\t\tAmplitudeCoreHelpers.changeSong( config.playlists[playlist][0] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tDetermines what action we should take based on the\r\n\t\t\tstate of the song.\r\n\t\t*/\r\n\t\tif( config.active_song.paused ){\r\n\t\t\t/*\r\n\t\t\t\tThe song was paused so we sync visually for the song\r\n\t\t\t\tthat is playing and we play the song.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncMainPlayPause( 'playing' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf there is an active playlist, then\r\n\t\t\t\twe need to sync that playlist's play pause\r\n\t\t\t\tbutton to the state of playing.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncPlaylistPlayPause( config.active_playlist, 'playing' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tSync the song play pause buttons\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncSongPlayPause( config.active_playlist, config.active_index, 'playing' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tPlay the song\r\n\t\t\t*/\r\n\t\t\tAmplitudeCore.play();\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tThe song was playing so we sync visually for the song\r\n\t\t\t\tto be paused and we pause the song.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncMainPlayPause( 'paused' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf there is an active playlist, then\r\n\t\t\t\twe need to sync that playlist's play pause\r\n\t\t\t\tbutton to the state of paused.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncPlaylistPlayPause( config.active_playlist, 'paused' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tSync the song play pause buttons\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncSongPlayPause( config.active_playlist, config.active_index, 'paused' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tPause the song\r\n\t\t\t*/\r\n\t\t\tAmplitudeCore.pause();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the song play pause buttons to the current state of the song.\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist The playlist the song is a part of\r\n\t * @param {number} songIndex The index of the song being played/paused\r\n\t *\r\n\t */\r\n\tfunction setSongPlayPause( playlist, songIndex ){\r\n\t\t/*\r\n\t\t\tThere can be multiple playlists on the page and there can be\r\n\t\t\tmultiple songs on the page AND there can be songs in multiple\r\n\t\t\tplaylists, so we have some checking to do.\r\n\t\t*/\r\n\r\n\t\t/*\r\n\t\t\tCheck to see if the playlist has changed. If it has,\r\n\t\t\tset the active playlist.\r\n\t\t*/\r\n\t\tif( AmplitudeCoreHelpers.checkNewPlaylist( playlist ) ){\r\n\t\t\tAmplitudeCoreHelpers.setActivePlaylist( playlist );\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf there's a new playlist then we reset the\r\n\t\t\t\tsong since the song could be in 2 playlists,\r\n\t\t\t\tbut the user selects another playlist.\r\n\t\t\t*/\r\n\t\t\tAmplitudeCoreHelpers.changeSong( songIndex );\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tCheck to see if the song has changed. If it has,\r\n\t\t\tset the active song. If it was in a playlist, the\r\n\t\t\tsong wouldn't change here, since we already set the\r\n\t\t\tsong when we checked for a playlist.\r\n\t\t*/\r\n\t\tif( AmplitudeCoreHelpers.checkNewSong( songIndex ) ){\r\n\t\t\t/*\r\n\t\t\t\tThe song selected is different, so we change the\r\n\t\t\t\tsong.\r\n\t\t\t*/\r\n\t\t\tAmplitudeCoreHelpers.changeSong( songIndex );\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tDetermines what action we should take based on the\r\n\t\t\tstate of the song.\r\n\t\t*/\r\n\t\tif( config.active_song.paused ){\r\n\t\t\t/*\r\n\t\t\t\tThe song was paused so we sync visually for the song\r\n\t\t\t\tthat is playing and we play the song.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncMainPlayPause( 'playing' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf there is an active playlist, then\r\n\t\t\t\twe need to sync that playlist's play pause\r\n\t\t\t\tbutton to the state of playing.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncPlaylistPlayPause( config.active_playlist, 'playing' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tSync the song play pause buttons\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncSongPlayPause( config.active_playlist, config.active_index, 'playing' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tPlay the song\r\n\t\t\t*/\r\n\t\t\tAmplitudeCore.play();\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tThe song was playing so we sync visually for the song\r\n\t\t\t\tto be paused and we pause the song.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncMainPlayPause( 'paused' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf there is an active playlist, then\r\n\t\t\t\twe need to sync that playlist's play pause\r\n\t\t\t\tbutton to the state of paused.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncPlaylistPlayPause( config.active_playlist, 'paused' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tSync the song play pause buttons\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncSongPlayPause( config.active_playlist, config.active_index, 'paused' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tPause the song\r\n\t\t\t*/\r\n\t\t\tAmplitudeCore.pause();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the shuffle state for a playlist\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist - The playlist being shuffled\r\n\t */\r\n\tfunction setShuffle( playlist ){\r\n\t\t/*\r\n\t\t\tIf the playlist is null, then we are dealing with the global\r\n\t\t\tshuffle status.\r\n\t\t*/\r\n\t\tif( playlist == null ){\r\n\t\t\t/*\r\n\t\t\t\tIf shuffle is on, we toggle it off. If shuffle is off, we\r\n\t\t\t\ttoggle on.\r\n\t\t\t*/\r\n\t\t\tif( config.shuffle_on ){\r\n\t\t\t\tconfig.shuffle_on \t= false;\r\n\t\t\t\tconfig.shuffle_list = {};\r\n\t\t\t}else{\r\n\t\t\t\tconfig.shuffle_on = true;\r\n\t\t\t\tAmplitudeCoreHelpers.shuffleSongs();\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t\tVisually sync the shuffle statuses\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncShuffle( config.shuffle_on );\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tIf the playlist shuffled is on, we toggle it off. If the\r\n\t\t\t\tplaylist shuffled is off, we toggle it on.\r\n\t\t\t*/\r\n\t\t\tif( config.shuffled_statuses[playlist] ){\r\n\t\t\t\tconfig.shuffled_statuses[playlist] = false;\r\n\t\t\t\tconfig.shuffled_playlists[playlist] = [];\r\n\t\t\t}else{\r\n\t\t\t\tconfig.shuffled_statuses[playlist] = true;\r\n\t\t\t\tAmplitudeCoreHelpers.shufflePlaylistSongs( playlist );\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t\tVisually sync the playlist shuffle statuses.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncPlaylistShuffle( config.shuffled_statuses[playlist], playlist );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the next song when next is clicked\r\n\t *\r\n\t * @access public\r\n\t * @param {boolean} [songEnded=false] If the song ended, this is set to true\r\n\t * so we take into effect the repeat setting.\r\n\t*/\r\n\tfunction setNext( songEnded = false ){\r\n\t\t/*\r\n\t\t\tInitializes the next index variable. This will be the\r\n\t\t\tindex of the song that is next.\r\n\t\t*/\r\n\t\tlet nextIndex = 0;\r\n        /*\r\n          Ensure we don't loop in the playlist if config.repeat is not true\r\n        */\r\n\t\tlet endOfList = false;\r\n\r\n\t\tif( config.repeat_song ){\r\n\t\t\t/*\r\n\t\t\t\tIf the playlist is shuffled, get the now playing index.\r\n\t\t\t*/\r\n\t\t\tif( config.shuffle_on ){\r\n\t\t\t\tnextIndex = config.shuffle_active_index;\r\n\t\t\t}else{\r\n\t\t\t\tnextIndex = config.active_index;\r\n\t\t\t}\r\n\t\t}else{\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf the shuffle is on, we use the shuffled list of\r\n\t\t\t\tsongs to determine our next song.\r\n\t\t\t*/\r\n\t\t\tif( config.shuffle_on ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the active shuffle index + 1 is less than the length, then\r\n\t\t\t\t\twe use the next shuffle otherwise we go to the beginning\r\n\t\t\t\t\tof the shuffle list.\r\n\t\t\t\t*/\r\n\t\t\t\tif( ( parseInt( config.shuffle_active_index ) + 1 ) < config.shuffle_list.length ){\r\n\t\t\t\t\tconfig.shuffle_active_index = parseInt( config.shuffle_active_index ) + 1;\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tSet the next index to be the index of the song in the shuffle list.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tnextIndex = config.shuffle_list[ parseInt( config.shuffle_active_index ) ].original_index;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconfig.shuffle_active_index = 0;\r\n\t\t\t\t\tnextIndex = 0;\r\n\t\t\t\t\tendOfList = true;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the active index + 1 is less than the length of the songs, then\r\n\t\t\t\t\twe use the next song otherwise we go to the beginning of the\r\n\t\t\t\t\tsong list.\r\n\t\t\t\t*/\r\n\t\t\t\tif( ( parseInt( config.active_index ) + 1 ) < config.songs.length ){\r\n\t\t\t\t\tconfig.active_index = parseInt( config.active_index ) + 1;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconfig.active_index = 0;\r\n\t\t\t\t\tendOfList = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tSets the next index.\r\n\t\t\t\t*/\r\n\t\t\t\tnextIndex = config.active_index;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tStops the active song.\r\n\t\t*/\r\n\t\tAmplitudeCore.stop();\r\n\r\n\t\t/*\r\n\t\t\tChange the song to the index we need.\r\n\t\t*/\r\n\t\tAmplitudeCoreHelpers.changeSong( nextIndex );\r\n\r\n\r\n\t\t/*\r\n\t\t\tIf it's the end of the list and repeat is not on, do nothing.\r\n\t\t*/\r\n\t\tif( endOfList && !config.repeat ){\r\n\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tIf the song has ended and repeat is on, play the song.\r\n\t\t\t*/\r\n\t    if( !( songEnded && !config.repeat && endOfList ) ){\r\n\t    \tAmplitudeCore.play();\r\n\t    }\r\n\t\t}\r\n\r\n    /*\r\n    \tSyncs the main play pause button, playlist play pause button and\r\n    \tsong play pause.\r\n    */\r\n\t\tAmplitudeVisualSync.syncMainPlayPause( );\r\n\t\tAmplitudeVisualSync.syncSongPlayPause( null, nextIndex);\r\n\r\n    /*\r\n    \tCall after next callback\r\n    */\r\n    AmplitudeCoreHelpers.runCallback('after_next');\r\n\r\n\t\t/*\r\n\t\t\tIf we are repeating the song, call the song repeated callback\r\n\t\t*/\r\n\t\tif( config.repeat_song ){\r\n\t\t\tAmplitudeCoreHelpers.runCallback('song_repeated');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the next song in a playlist\r\n\t *\r\n\t * @param {string} playlist - The playlist being shuffled\r\n\t * @param {boolean} [songEnded=false] - If the song ended, this is set to true\r\n\t * so we take into effect the repeat setting.\r\n\t */\r\n\tfunction setNextPlaylist( playlist, songEnded = false ){\r\n\t\t/*\r\n\t\t\tInitializes the next index\r\n\t\t*/\r\n\t\tlet nextIndex = 0;\r\n\r\n    /*\r\n      Used to determine whether the playlist looped over\r\n      If it did, only play if repeat is allowed, end otherwise\r\n      @TODO: Different settings for song loop, in-playlist loop and global loop\r\n    */\r\n\t\tlet endOfList = false;\r\n\r\n\t\t/*\r\n\t\t\tIf we are repeating the song, then we just start the song over.\r\n\t\t*/\r\n\r\n\t\tif( config.repeat_song ){\r\n\t\t\t/*\r\n\t\t\t\tIf the playlist is shuffled, get the now playing index.\r\n\t\t\t*/\r\n\t\t\tif( config.shuffled_statuses[ playlist ] ){\r\n\t\t\t\tnextIndex = config.shuffled_playlists[ playlist ][ config.shuffled_active_indexes[ playlist ] ].original_index;\r\n\t\t\t}else{\r\n\t\t\t\tnextIndex = config.active_index;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tIf the playlist is shuffled we get the next index of the playlist.\r\n\t\t\t*/\r\n\t\t\tif( config.shuffled_statuses[ playlist ] ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tGets the shuffled playlist's active song index.\r\n\t\t\t\t*/\r\n\t\t\t\tlet shuffledPlaylistActiveSongIndex = parseInt( config.shuffled_active_indexes[ playlist ] );\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the index + 1 is less than the length of the playlist, we increment\r\n\t\t\t\t\tthe next index otherwise we take the first index of 0.\r\n\t\t\t\t*/\r\n\t\t\t\tif( shuffledPlaylistActiveSongIndex + 1 < config.shuffled_playlists[ playlist ].length ){\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tSet the shuffled playlist active song index.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tconfig.shuffled_active_indexes[ playlist ] = shuffledPlaylistActiveSongIndex + 1;\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tGet the index of the song that we will be switching to.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tnextIndex = config.shuffled_playlists[ playlist ][ config.shuffled_active_indexes[ playlist ] ].original_index;\r\n\t\t\t\t}else{\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tSets the active shuffled playlist active index to 0 and gets the original index of\r\n\t\t\t\t\t\tthe song at the shuffled index of 0.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tconfig.shuffled_active_indexes[ playlist ] = 0;\r\n\t\t\t\t\tnextIndex = config.shuffled_playlists[ playlist ][0].original_index;\r\n\t\t\t\t\tendOfList = true;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\t/*\r\n\t\t\t\t\tGets the index of the active song within the scope\r\n\t\t\t\t\tof the playlist.\r\n\t\t\t\t*/\r\n\t\t\t\tlet playlistActiveSongIndex = config.playlists[ playlist ].indexOf( parseInt( config.active_index ) );\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tChecks to see if the next index is still less than the length of the playlist.\r\n\t\t\t\t\tIf it is, use the next index othwerwise get the first song in the playlist.\r\n\t\t\t\t*/\r\n\t\t\t\tif( playlistActiveSongIndex + 1 < config.playlists[ playlist ].length ){\r\n\t\t\t\t\tconfig.active_index = parseInt( config.playlists[ playlist ][ playlistActiveSongIndex + 1 ] );\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconfig.active_index = parseInt( config.playlists[ playlist ][0] );\r\n\t\t\t\t\tendOfList = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tSets the next inex to the active index in the config.\r\n\t\t\t\t*/\r\n\t\t\t\tnextIndex = config.active_index;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tStops the active song playing.\r\n\t\t*/\r\n\r\n\t\tAmplitudeCore.stop();\r\n\r\n\t\t/*\r\n\t\t\tChanges the song to the next song in the playlist.\r\n\t\t*/\r\n\t\tAmplitudeCoreHelpers.changeSong( nextIndex );\r\n\r\n\t\t/*\r\n\t\t\tIf it's the end of the song in the playlist, and repeat for\r\n\t\t\tthe playlist is not on, do nothing.\r\n\t\t*/\r\n\t\tif( endOfList && !config.repeat_statuses[playlist] ){\r\n\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tIf the song has ended and repeat is on, play the song.\r\n\t\t\t*/\r\n\t    if( !( songEnded && !config.repeat_statuses[playlist] && endOfList ) ){\r\n\t\t\t\tAmplitudeCore.play();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tAmplitudeCoreHelpers.setActivePlaylist( playlist );\r\n\r\n\r\n\r\n    /*\r\n    \tSyncs the main play pause button, playlist play pause button and\r\n    \tsong play pause.\r\n    */\r\n\t\tAmplitudeVisualSync.syncMainPlayPause( );\r\n\t\tAmplitudeVisualSync.syncPlaylistPlayPause(playlist);\r\n\t\tAmplitudeVisualSync.syncSongPlayPause( playlist, nextIndex);\r\n\r\n    /*\r\n    \tCall after next callback\r\n    */\r\n    AmplitudeCoreHelpers.runCallback('after_next');\r\n\r\n\t\t/*\r\n\t\t\tIf we are repeating the song, call the song repeated callback\r\n\t\t*/\r\n\t\tif( config.repeat_song ){\r\n\t\t\tAmplitudeCoreHelpers.runCallback('song_repeated');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the previous song\r\n\t * @access public\r\n\t *\r\n\t/*--------------------------------------------------------------------------\r\n\t\tSets the previous song\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction setPrev(){\r\n\t\t/*\r\n\t\t\tInitializes the prev index variable. This will be the\r\n\t\t\tindex of the song that is next.\r\n\t\t*/\r\n\t\tlet prevIndex = 0;\r\n\r\n\t\t/*\r\n\t\t\tIf the shuffle is on for the individual songs, we get the previous\r\n\t\t\tsong.\r\n\t\t*/\r\n\t\tif( config.shuffle_on ){\r\n\t\t\t/*\r\n\t\t\t\tIf the previous index is greater than or equal to 0, we use the active\r\n\t\t\t\tindex - 1.\r\n\t\t\t*/\r\n\t\t\tif( parseInt( config.shuffle_active_index ) - 1 >= 0 ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tSets the new active to be 1 less than the current active index.\r\n\t\t\t\t*/\r\n\t\t\t\tconfig.shuffle_active_index = parseInt( config.shuffle_active_index ) - 1;\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tGets the index of the song in the song array for the new index.\r\n\t\t\t\t*/\r\n\t\t\t\tprevIndex = config.shuffle_list[ parseInt( config.shuffle_active_index ) ].original_index;\r\n\t\t\t}else{\r\n\t\t\t\t/*\r\n\t\t\t\t\tSet the active index and previous index.\r\n\t\t\t\t*/\r\n\t\t\t\tconfig.shuffle_active_index = config.shuffle_list.length - 1;\r\n\t\t\t\tprevIndex = config.shuffle_list[ parseInt( config.shuffle_list.length ) - 1 ].original_index;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tIf the active index - 1 is greater than or equal to 0, we subtract 1 from the\r\n\t\t\t\tactive index otherwise we set the active index to the end of the songs array index.\r\n\t\t\t*/\r\n\t\t\tif( parseInt( config.active_index ) - 1 >= 0 ){\r\n\t\t\t\tconfig.active_index = parseInt( config.active_index ) - 1;\r\n\t\t\t}else{\r\n\t\t\t\tconfig.active_index = config.songs.length - 1;\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t\tSet the previous index.\r\n\t\t\t*/\r\n\t\t\tprevIndex = config.active_index;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tStops the active song.\r\n\t\t*/\r\n\t\tAmplitudeCore.stop();\r\n\r\n\t\t/*\r\n\t\t\tChange the song to the index we need.\r\n\t\t*/\r\n\t\tAmplitudeCoreHelpers.changeSong( prevIndex );\r\n\r\n\t\t/*\r\n\t\t\tPlay the next song.\r\n\t\t*/\r\n\t\tAmplitudeCore.play();\r\n\r\n\t\t/*\r\n\t\t\tSync the play/pause buttons to the current state of the player.\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.syncMainPlayPause( 'playing' );\r\n\t\tAmplitudeVisualSync.syncSongPlayPause( null, prevIndex, 'playing' );\r\n\r\n\t\t/*\r\n\t\t\tCall after prev callback\r\n\t\t*/\r\n\t\tAmplitudeCoreHelpers.runCallback('after_prev');\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the previous song in a playlist\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist \t- The playlist we are setting the previous for.\r\n\t */\r\n\tfunction setPrevPlaylist( playlist ){\r\n\t\t/*\r\n\t\t\tInitializes the prev index variable. This will be the\r\n\t\t\tindex of the song that is next.\r\n\t\t*/\r\n\t\tlet prevIndex = 0;\r\n\r\n\t\t/*\r\n\t\t\tIf the shuffle is on for the playlist, we get the previous\r\n\t\t\tsong.\r\n\t\t*/\r\n\t\tif( config.shuffled_statuses[ playlist ] ){\r\n\t\t\t/*\r\n\t\t\t\tGets the active song index for the shuffled playlist\r\n\t\t\t*/\r\n\t\t\tlet shuffledPlaylistActiveSongIndex = parseInt( config.shuffled_active_indexes[ playlist ] );\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf the shuffled song active index is greater than or equal to 0,\r\n\t\t\t\twe use the active index - 1.\r\n\t\t\t*/\r\n\t\t\tif( shuffledPlaylistActiveSongIndex - 1 >= 0 ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tSets the active index to the active song index - 1\r\n\t\t\t\t*/\r\n\t\t\t\tconfig.shuffled_active_indexes[ playlist ] = shuffledPlaylistActiveSongIndex - 1;\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tGets the index of the song in the song array for the new index.\r\n\t\t\t\t*/\r\n\t\t\t\tprevIndex = config.shuffled_playlists[ playlist ][ config.shuffled_active_indexes[ playlist ] ].original_index;\r\n\t\t\t}else{\r\n\t\t\t\t/*\r\n\t\t\t\t\tSet the active index and previous index.\r\n\t\t\t\t*/\r\n\t\t\t\tconfig.shuffled_active_indexes[ playlist ] = config.shuffled_playlists[ playlist ].length - 1;\r\n\t\t\t\tprevIndex = config.shuffled_playlists[ playlist ][ config.shuffled_playlists[ playlist ].length - 1 ].original_index;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tGets the active song index for the playlist\r\n\t\t\t*/\r\n\t\t\tlet playlistActiveSongIndex = config.playlists[ playlist ].indexOf( parseInt( config.active_index ) );\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf the active song index in the playlist - 1 is greater than\r\n\t\t\t\tor equal to 0, then we use the active song index - 1.\r\n\t\t\t*/\r\n\t\t\tif( playlistActiveSongIndex - 1 >= 0 ){\r\n\t\t\t\tconfig.active_index = parseInt( config.playlists[ playlist ][ playlistActiveSongIndex - 1 ] );\r\n\t\t\t}else{\r\n\t\t\t\tconfig.active_index = parseInt( config.playlists[ playlist ][ config.playlists[ playlist ].length - 1 ] );\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t\tSet the previous index to the active index for use later.\r\n\t\t\t*/\r\n\t\t\tprevIndex = config.active_index;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tStops the active song.\r\n\t\t*/\r\n\t\tAmplitudeCore.stop();\r\n\r\n\t\t/*\r\n\t\t\tChanges the song to the prev song in the playlist.\r\n\t\t*/\r\n\t\tAmplitudeCoreHelpers.changeSong( prevIndex );\r\n\t\tAmplitudeCoreHelpers.setActivePlaylist( playlist );\r\n\r\n\t\t/*\r\n\t\t\tPlays the song\r\n\t\t*/\r\n\t\tAmplitudeCore.play();\r\n\r\n\t\t/*\r\n\t\t\tSyncs the main play pause button, playlist play pause button and\r\n\t\t\tsong play pause.\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.syncMainPlayPause( 'playing' );\r\n\t\tAmplitudeVisualSync.syncPlaylistPlayPause( playlist, 'playing' );\r\n\t\tAmplitudeVisualSync.syncSongPlayPause( playlist, prevIndex, 'playing' );\r\n\r\n\t\t/*\r\n\t\t\tCall after prev callback\r\n\t\t*/\r\n\t\tAmplitudeCoreHelpers.runCallback('after_prev');\r\n\t}\r\n\r\n\t/**\r\n\t * Runs an event on key down\r\n\t *\r\n\t * @access public\r\n\t * @param {number} key \t- The key code the event is bound to.\r\n\t */\r\n\tfunction runKeyEvent( key ){\r\n\t\t/*\r\n\t\t\tChecks to see if the user bound an event to the code pressed.\r\n\t\t*/\r\n\t\tif( config.bindings[key] != undefined ){\r\n\t\t\t/*\r\n\t\t\t\tDetermine which event should be run if bound.\r\n\t\t\t*/\r\n\t\t\tswitch( config.bindings[key] ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tFires a play pause event.\r\n\t\t\t\t*/\r\n\t\t\t\tcase 'play_pause':\r\n\t\t\t\t\tsetSongPlayPause( config.active_playlist, config.active_index );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tFires a next event.\r\n\t\t\t\t*/\r\n\t\t\t\tcase 'next':\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tCheck to see if the current state of the player\r\n\t\t\t\t\t\tis in playlist mode or not playlist mode.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif( config.active_playlist == ''\r\n\t\t\t\t\t\t|| config.active_playlist == null ){\r\n\t\t\t\t\t\t\tsetNext();\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tsetNextPlaylist( config.active_playlist );\r\n\t\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tFires a previous event.\r\n\t\t\t\t*/\r\n\t\t\t\tcase 'prev':\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tCheck to see if the current playlist has been set\r\n\t\t\t\t\t\tor null and set the previous song.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif( config.active_playlist == ''\r\n\t\t\t\t\t\t|| config.active_playlist == null ){\r\n\t\t\t\t\t\t\tAmplitudeEventsHelpers.setPrev();\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tAmplitudeEventsHelpers.setPrevPlaylist( config.active_playlist );\r\n\t\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tFires a stop event.\r\n\t\t\t\t*/\r\n\t\t\t\tcase 'stop':\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tSets all of the play/pause buttons to pause\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tAmplitudeVisualSync.setPlayPauseButtonsToPause();\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tStops the active song.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tAmplitudeCore.stop();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tFires a shuffle event.\r\n\t\t\t\t*/\r\n\t\t\t\tcase 'shuffle':\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tCheck to see if the current playlist has been set\r\n\t\t\t\t\t\tor null and set the previous song.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif( config.active_playlist == ''\r\n\t\t\t\t\t\t|| config.active_playlist == null ){\r\n\t\t\t\t\t\t\tAmplitudesEventHelpers.setShuffle( null );\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tAmplitudeEvenstHelpers.setShuffle( config.active_playlist );\r\n\t\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tFires a repeat event.\r\n\t\t\t\t*/\r\n\t\t\t\tcase 'repeat':\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tSets repeat to the opposite of what it was set to\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tAmplitudeEventsHelpers.setRepeat( !config.repeat );\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tVisually sync repeat\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tAmplitudeVisualSync.syncRepeat();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t\tReturn the publically scoped functions\r\n\t*/\r\n\treturn {\r\n\t\tcomputeCurrentTimes: computeCurrentTimes,\r\n\t\tcomputeSongDuration: computeSongDuration,\r\n\t\tcomputeSongCompletionPercentage: computeSongCompletionPercentage,\r\n\t\tsetPlaybackSpeed: setPlaybackSpeed,\r\n\t\tsetRepeat: setRepeat,\r\n\t\tsetRepeatSong: setRepeatSong,\r\n\t\tsetMainPlayPause: setMainPlayPause,\r\n\t\tsetPlaylistPlayPause: setPlaylistPlayPause,\r\n\t\tsetSongPlayPause: setSongPlayPause,\r\n\t\tsetShuffle: setShuffle,\r\n\t\tsetNext: setNext,\r\n\t\tsetNextPlaylist: setNextPlaylist,\r\n\t\tsetPrev: setPrev,\r\n\t\tsetPrevPlaylist: setPrevPlaylist,\r\n\t\trunKeyEvent: runKeyEvent\r\n\t}\r\n})();\r\n\r\nexport default AmplitudeEventsHelpers\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/events/helpers.js","/**\r\n * Imports the config module\r\n * @module config\r\n */\r\nimport config from '../config.js';\r\n\r\n/**\r\n * AmplitudeJS Core Module\r\n * @module core/AmplitudeCore\r\n */\r\nimport AmplitudeCore from '../core/core.js';\r\n\r\n/**\r\n * AmplitudeJS Core Helpers\r\n * @module core/AmplitudeHelpers\r\n */\r\nimport AmplitudeHelpers from '../core/helpers.js';\r\n\r\n/**\r\n * AmplitudeJS Events\r\n * @module events/AmplitudeEvents\r\n */\r\nimport AmplitudeEvents from '../events/events.js';\r\n\r\n/**\r\n * AmplitudeJS Soundcloud\r\n * @module soundcloud/AmplitudeSoundcloud\r\n */\r\nimport AmplitudeSoundcloud from '../soundcloud/soundcloud.js';\r\n\r\n/**\r\n * AmplitudeJS Visual Sync\r\n * @module visual/AmplitudeVisualSync\r\n*/\r\nimport AmplitudeVisualSync from '../visual/visual.js';\r\n\r\n/**\r\n * AmplitudeJS Initializer Module. Helps with the handling of all of the\r\n * initialization for AmplitudeJS.\r\n *\r\n * @module init/AmplitudeInitializer\r\n */\r\nlet AmplitudeInitializer = (function () {\r\n\r\n\t/**\r\n   * The main init function.  The user will call this through\r\n\t * Amplitude.init({}) and pass in their settings.\r\n\t *\r\n\t * Public Accessor: Amplitude.init( user_config_json )\r\n\t * @access public\r\n   * @param {object} userConfig - A JSON object of user defined values that help configure and initialize AmplitudeJS.\r\n   */\r\n\tfunction initialize( userConfig ){\r\n\t\tlet ready = false;\r\n\r\n\t\t/*\r\n\t\t\tReset the config on init so we have a clean slate. This is if the\r\n\t\t\tuser has to re-init.\r\n\t\t*/\r\n\t\tAmplitudeHelpers.resetConfig();\r\n\r\n\t\t/*\r\n\t\t\tInitialize event handlers on init. This will clear any old\r\n\t\t\tevent handlers on the amplitude element and re-bind what is\r\n\t\t\tnecessary.\r\n\t\t*/\r\n\t\tAmplitudeEvents.initializeEvents();\r\n\r\n\t\t/*\r\n\t\t\tInitializes debugging right away so we can use it for the rest\r\n\t\t\tof the configuration.\r\n\t\t*/\r\n\t\tconfig.debug = ( userConfig.debug != undefined ? userConfig.debug : false );\r\n\r\n\t\t/*\r\n\t\t\tChecks to see if the user has songs defined.\r\n\t\t*/\r\n\t\tif( userConfig.songs ){\r\n\t\t\t/*\r\n\t\t\t\tChecks to see if the user has some songs in the songs array.\r\n\t\t\t*/\r\n\t\t\tif( userConfig.songs.length != 0 ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tCopies over the user defined songs. and prepares\r\n\t\t\t\t\tAmplitude for the rest of the configuration.\r\n\t\t\t\t*/\r\n\t\t\t\tconfig.songs = userConfig.songs;\r\n\t\t\t\t/*\r\n\t\t\t\t\tFlag amplitude as ready.\r\n\t\t\t\t*/\r\n\t\t\t\tready = true;\r\n\t\t\t}else{\r\n\t\t\t\tAmplitudeHelpers.writeDebugMessage( 'Please add some songs, to your songs object!' );\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tAmplitudeHelpers.writeDebugMessage( 'Please provide a songs object for AmplitudeJS to run!' );\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Initializes the audio context. In this method it checks to see if the\r\n\t\t * user wants to use visualizations or not before proceeding.\r\n\t\t * @todo MAKE HANDLED BY AMPLITUDE FX.\r\n\t\t */\r\n\t\t//privateHelpInitializeAudioContext();\r\n\r\n\t\t/*\r\n\t\t\tChecks if the user has any playlists defined. If they do\r\n\t\t\twe have to initialize the functionality for the playlists.\r\n\t\t*/\r\n\t\tif( userConfig.playlists && countPlaylists( userConfig.playlists ) > 0 ){\r\n\t\t\t/*\r\n\t\t\t\tCopy the playlists over to Amplitude\r\n\t\t\t*/\r\n\t\t\tconfig.playlists = userConfig.playlists;\r\n\r\n\t\t\t/*\r\n\t\t\t\tInitialize default live settings\r\n\t\t\t*/\r\n\t\t\tinitializeDefaultLiveSettings();\r\n\r\n\t\t\t/*\r\n\t\t\t\tCheck to see if the user has valid song indexes in their playlist.\r\n\t\t\t*/\r\n\t\t\tcheckValidSongsInPlaylists();\r\n\r\n\t\t\t/*\r\n\t\t\t\tInitialize the shuffle status of the playlists.\r\n\t\t\t*/\r\n\t\t\tinitializePlaylistShuffleStatuses();\r\n\r\n\t\t\t/*\r\n\t\t\t\tInitialize the repeat status for the playlits.\r\n\t\t\t*/\r\n\t\t\tinitializePlaylistsRepeatStatuses();\r\n\r\n\t\t\t/*\r\n\t\t\t\tInitialize temporary place holders for shuffle lists.\r\n\t\t\t*/\r\n\t\t\tinitializePlaylistShuffleLists();\r\n\r\n\t\t\t/*\r\n\t\t\t\tInitializes the active shuffled indexes for shuffled playlists.\r\n\t\t\t*/\r\n\t\t\tinitializePlaylistShuffleIndexes();\r\n\r\n\t\t\t/*\r\n\t\t\t\tInitializes the first song in the playlist\r\n\t\t\t*/\r\n\t\t\tinitializeFirstSongInPlaylistMetaData();\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tWhen the preliminary config is ready, we are ready to proceed.\r\n\t\t*/\r\n\t\tif( ready ){\r\n\t\t\t/*\r\n\t\t\t\tCopies over the soundcloud information to the global config\r\n\t\t\t\twhich will determine where we go from there.\r\n\t\t\t*/\r\n\t\t\tconfig.soundcloud_client = ( userConfig.soundcloud_client != undefined ? userConfig.soundcloud_client : '' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tChecks if we want to use the art loaded from soundcloud.\r\n\t\t\t*/\r\n\t\t\tconfig.soundcloud_use_art = ( userConfig.soundcloud_use_art != undefined ? userConfig.soundcloud_use_art : '' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf the user provides a soundcloud client then we assume that\r\n\t\t\t\tthere are URLs in their songs that will reference SoundcCloud.\r\n\t\t\t\tWe then copy over the user config they provided to the\r\n\t\t\t\ttemp_user_config so we don't mess up the global or their configs\r\n\t\t\t\tand load the soundcloud information.\r\n\t\t\t*/\r\n\t\t\tlet tempUserConfig = {};\r\n\r\n\t\t\tif( config.soundcloud_client != '' ){\r\n\t\t\t\ttempUserConfig = userConfig;\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tLoad up SoundCloud for use with AmplitudeJS.\r\n\t\t\t\t*/\r\n\t\t\t\tAmplitudeSoundcloud.loadSoundCloud( tempUserConfig );\r\n\t\t\t}else{\r\n\t\t\t\t/*\r\n\t\t\t\t\tThe user is not using Soundcloud with Amplitude at this point\r\n\t\t\t\t\tso we just finish the configuration with the users's preferences.\r\n\t\t\t\t*/\r\n\t\t\t\tsetConfig( userConfig );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tDebug out what was initialized with AmplitudeJS.\r\n\t\t*/\r\n\t\tAmplitudeHelpers.writeDebugMessage( 'Initialized With: ');\r\n\t\tAmplitudeHelpers.writeDebugMessage( config );\r\n\t}\r\n\r\n\t/**\r\n\t * Rebinds all of the elements in the display.\r\n\t *\r\n\t * Public Accessor: Amplitude.rebindDisplay()\r\n\t * @access public\r\n\t */\r\n\tfunction rebindDisplay(){\r\n\t\tAmplitudeEvents.initializeEvents();\r\n\t\tAmplitudeVisualSync.displaySongMetadata();\r\n\t}\r\n\r\n\t/**\r\n\t * Finishes the initalization of the config. Takes all of the user defined\r\n\t * parameters and makes sure they override the defaults. The important\r\n\t * config information is assigned in the publicInit() function.\r\n\t *\r\n\t * This function can be called from 2 different locations:\r\n\t * \t1. Right away on init after the important settings are defined.\r\n\t *\r\n\t * \t2. After all of the Soundcloud URLs are resolved properly and\r\n\t *\t \tsoundcloud is configured.  We will need the proper URLs from Soundcloud\r\n\t * \t\tto stream through Amplitude so we get those right away before we\r\n\t * \t\tset the information and the active song\r\n\t *\r\n\t * @access public\r\n\t * @param {object} userConfig - A JSON object of user defined values that help configure and initialize AmplitudeJS.\r\n\t */\r\n\tfunction setConfig( userConfig ){\r\n\t\t/*\r\n\t\t\tCheck to see if the user entered a start song\r\n\t\t*/\r\n\t\tif( userConfig.start_song != undefined ){\r\n\t\t\t/*\r\n\t\t\t\tEnsure what has been entered is an integer.\r\n\t\t\t*/\r\n\t\t\tif( AmplitudeHelpers.isInt( userConfig.start_song ) ){\r\n\t\t\t\tAmplitudeHelpers.changeSong( userConfig.start_song );\r\n\t\t\t}else{\r\n\t\t\t\tAmplitudeHelpers.writeDebugMessage(\"You must enter an integer index for the start song.\");\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tAmplitudeHelpers.changeSong( 0 );\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tInitialize a sh\r\n\t\t*/\r\n\t\tif( userConfig.shuffle_on != undefined && userConfig.shuffle_on ){\r\n\t\t\tconfig.shuffle_on = true;\r\n\t\t\tAmplitudeHelpers.shuffleSongs();\r\n\r\n\t\t\t/*\r\n\t\t\t\tVisually sync the shuffle statuses\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncShuffle( config.shuffle_on );\r\n\r\n\t\t\tAmplitudeHelpers.changeSong( config.shuffle_list[0].original_index );\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tAllows the user to set whether they want to continue to the next song\r\n\t\t\twhen the current song finishes or not. In any scenario that's not a playlist,\r\n\t\t\tcontining to the next song may not be desired.\r\n\t\t*/\r\n\t\tconfig.continue_next = ( userConfig.continue_next != undefined ?\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t userConfig.continue_next :\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t true );\r\n\r\n\t\t/*\r\n\t\t\tIf the user defined a playback speed, we copy over their\r\n\t\t\tpreference here, otherwise we default to normal playback\r\n\t\t\tspeed of 1.0.\r\n\t\t*/\r\n\t\tconfig.playback_speed = ( userConfig.playback_speed != undefined ?\r\n\t\t\t\t\t\t\t\t  \t\t\t\t\t\tuserConfig.playback_speed :\r\n\t\t\t\t\t\t\t\t  \t\t\t\t\t\t1.0 );\r\n\r\n\t\t/*\r\n\t\t\tSets the audio playback speed.\r\n\t\t*/\r\n\t\tAmplitudeCore.setPlaybackSpeed( config.playback_speed );\r\n\r\n\t\t/*\r\n\t\t\tIf the user wants the song to be pre-loaded for instant\r\n\t\t\tplayback, they set it to true. By default it's set to just\r\n\t\t\tload the metadata.\r\n\t\t*/\r\n\t\tconfig.active_song.preload = ( userConfig.preload != undefined ?\r\n\t\t\t\t\t\t\t\t\t   \t\t\t\t\t\t\t userConfig.preload :\r\n\t\t\t\t\t\t\t\t\t   \t\t\t\t\t \t\t \"auto\" );\r\n\r\n\t\t/*\r\n\t\t\tInitializes the user defined callbacks. This should be a JSON\r\n\t\t\tobject that contains a key->value store of the callback name\r\n\t\t\tand the name of the function the user needs to call.\r\n\t\t*/\r\n\t\tconfig.callbacks = ( userConfig.callbacks != undefined ?\r\n\t\t\t\t\t\t\t \t\t\t\t\t userConfig.callbacks :\r\n\t\t\t\t\t\t\t \t\t\t\t \t {} );\r\n\r\n\t\t/*\r\n\t\t\tInitializes the user defined key bindings. This should be a JSON\r\n\t\t\tobject that contains a key->value store of the key event number\r\n\t\t\tpressed and the method to be run.\r\n\t\t*/\r\n\t\tconfig.bindings = ( userConfig.bindings != undefined ?\r\n\t\t\t\t\t\t\t\t\t\t\t\tuserConfig.bindings :\r\n\t\t\t\t\t\t\t\t\t\t\t\t{} );\r\n\r\n\t\t/*\r\n\t\t\tThe user can define a starting volume in a range of 0-100 with\r\n\t\t\t0 being muted and 100 being the loudest. After the config is set\r\n\t\t\tAmplitude sets the active song's volume to the volume defined\r\n\t\t\tby the user.\r\n\t\t*/\r\n\t\tconfig.volume = ( userConfig.volume != undefined ?\r\n\t\t\t \t\t\t  \t\t\t\tuserConfig.volume :\r\n\t\t\t \t\t\t  \t\t\t\t50 );\r\n\r\n\t\t/*\r\n\t\t\tSets the delay between songs if the user has it set. This should be in MS.\r\n\t\t*/\r\n\t\tconfig.delay = ( userConfig.delay != undefined ? userConfig.delay : 0 );\r\n\r\n\t\t/*\r\n\t\t\tThe user can set the volume increment and decrement values between 1 and 100\r\n\t\t\tfor when the volume up or down button is pressed.  The default is an increase\r\n\t\t\tor decrease of 5.\r\n\t\t*/\r\n\t\tconfig.volume_increment = ( userConfig.volume_increment != undefined ?\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuserConfig.volume_increment :\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t5 );\r\n\r\n\t\tconfig.volume_decrement = ( userConfig.volume_decrement != undefined ?\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuserConfig.volume_decrement :\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t5 );\r\n\r\n\t\t/*\r\n\t\t\tSet the volume to what is defined in the config. The user can define this,\r\n\t\t\tso we should set it up that way.\r\n\t\t*/\r\n\t\tAmplitudeCore.setVolume( config.volume );\r\n\r\n\t\t/*\r\n\t\t\tSince the user can define a start volume, we want our volume\r\n\t\t\tsliders to sync with the user defined start value.\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.syncVolumeSliders();\r\n\r\n\t\t/*\r\n\t\t\tIf the user defines default album art, this image will display if the active\r\n\t\t\tsong doesn't have album art defined.\r\n\t\t*/\r\n\t\tif( userConfig.default_album_art != undefined ){\r\n\t\t\tconfig.default_album_art = userConfig.default_album_art;\r\n\t\t}else{\r\n\t\t\tconfig.default_album_art = '';\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tSyncs all of the visual time elements to 00.\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.resetTimes();\r\n\r\n\t\t/*\r\n\t\t\tSets all of the play pause buttons to pause.\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.setPlayPauseButtonsToPause();\r\n\r\n\t\t/*\r\n\t\t\tSets the meta data for the songs automatically.\r\n\t\t*/\r\n\t\tAmplitudeVisualSync.syncSongsMetaData();\r\n\r\n\t\t/*\r\n\t\t\tIf the user has autoplay enabled, then begin playing the song. Everything should\r\n\t\t\tbe configured for this to be ready to play.\r\n\t\t*/\r\n\t\tif( userConfig.autoplay ){\r\n\t\t\t/*\r\n\t\t\t\tIf the user hasn't set a starting playlist, set it to null otherwise initialize to the\r\n\t\t\t\tstarting playlist selected by the user.\r\n\t\t\t*/\r\n\t\t\tif( userConfig.starting_playlist == '' ){\r\n\t\t\t\tconfig.active_playlist = null;\r\n\t\t\t}else{\r\n\t\t\t\tconfig.active_playlist = userConfig.starting_playlist;\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t\tSync the main and song play pause buttons.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncMainPlayPause( 'playing' );\r\n\t\t\tAmplitudeVisualSync.syncSongPlayPause( config.active_playlist, 0, 'playing' );\r\n\r\n\t\t\t/*\r\n\t\t\t\tStart playing the song\r\n\t\t\t*/\r\n\t\t\tAmplitudeCore.play();\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tIf the user has selected a starting playlist, we need to set the starting playlist\r\n\t\t\tand sync the visuals\r\n\t\t*/\r\n\t\tif( userConfig.starting_playlist != undefined && userConfig.starting_playlist != '' ){\r\n\t\t\t/*\r\n\t\t\t\tSet the active playlist to the starting playlist by the user\r\n\t\t\t*/\r\n\t\t\tconfig.active_playlist = userConfig.starting_playlist;\r\n\r\n\t\t\t/*\r\n\t\t\t\tCheck if the user defined a song to start with in the playlist.\r\n\t\t\t*/\r\n\t\t\tif( userConfig.starting_playlist_song != undefined && userConfig.starting_playlist_song != '' ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tEnsure the song is a valid index.\r\n\t\t\t\t*/\r\n\t\t\t\tif( typeof userConfig.playlists[ userConfig.starting_playlist ][ parseInt( userConfig.starting_playlist_song ) ] != undefined ){\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tSet the player to the song defined by the user.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tAmplitudeHelpers.changeSong( userConfig.playlists[ userConfig.starting_playlist ][ parseInt( userConfig.starting_playlist_song ) ] );\r\n\t\t\t\t}else{\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tSet the player to the first song in the playlist\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tAmplitudeHelpers.changeSong( userConfig.playlists[ userConfig.starting_playlist ][0] );\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tDebug that the song index doesn't exist\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tAmplitudeHelpers.writeDebugMessage( 'The index of '+userConfig.starting_playlist_song+' does not exist in the playlist '+userConfig.starting_playlist );\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\t/*\r\n\t\t\t\t\tSet the player to the first song in the playlist\r\n\t\t\t\t*/\r\n\t\t\t\tAmplitudeHelpers.changeSong( userConfig.playlists[ userConfig.starting_playlist ][0] );\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t\tSync the main and song play pause buttons.\r\n\t\t\t*/\r\n\t\t\tAmplitudeVisualSync.syncMainPlayPause( 'paused' );\r\n\t\t\tAmplitudeVisualSync.syncSongPlayPause( config.active_playlist, 0, 'paused' );\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tRun after init callback\r\n\t\t*/\r\n\t\tAmplitudeHelpers.runCallback('after_init');\r\n\t}\r\n\r\n\t/**\r\n\t * Counts the number of playlists the user has configured. This ensures\r\n\t * that the user has at least 1 playlist so we can validate the songs\r\n\t * defined in the playlist are correct and they didn't enter an invalid\r\n\t * ID.\r\n\t *\r\n\t * @access private\r\n\t * @param {object} playlists \t-\r\n\t */\r\n\tfunction countPlaylists( playlists ){\r\n\t\t/*\r\n\t\t\tInitialize the placeholders to iterate through the playlists\r\n\t\t\tand find out how many we have to account for.\r\n\t\t*/\r\n\t\tlet size = 0, key;\r\n\r\n\t\t/*\r\n\t\t\tIterate over playlists and if the user has the playlist defined,\r\n\t\t\tincrement the size of playlists.\r\n\t\t*/\r\n\t\tfor ( key in playlists ) {\r\n\t\t\tif( playlists.hasOwnProperty( key) ){\r\n\t\t\t\tsize++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tDebug how many playlists are in the config.\r\n\t\t*/\r\n\t\tAmplitudeHelpers.writeDebugMessage( 'You have '+size+' playlist(s) in your config' );\r\n\r\n\t\t/*\r\n\t\t\tReturn the number of playlists in the config.\r\n\t\t*/\r\n\t\treturn size;\r\n\t}\r\n\r\n\t/**\r\n\t* Ensures the indexes in the playlists are valid indexes. The song has\r\n\t* to exist in the Amplitude config to be played correctly.\r\n\t*\r\n\t* @access private\r\n\t*/\r\n\tfunction checkValidSongsInPlaylists(){\r\n\t\t/*\r\n\t\t\tIterate over all of the config's playlists\r\n\t\t*/\r\n\t\tfor( let key in config.playlists ){\r\n\t\t\t/*\r\n\t\t\t\tChecks if the playlist key is accurate.\r\n\t\t\t*/\r\n\t\t\tif( config.playlists.hasOwnProperty( key) ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tChecks if the playlist has songs.\r\n\t\t\t\t*/\r\n\t\t\t\tif( config.playlists[key].songs ){\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tIterate over all of the songs in the playlist\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tfor( let i = 0; i < config.playlists[key].songs.length; i++ ){\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\tCheck to see if the index for the song in the playlist\r\n\t\t\t\t\t\t\texists in the songs config.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\tif( !config.songs[ config.playlists[key].songs[i] ] ){\r\n\t\t\t\t\t\t\tAmplitudeHelpers.writeDebugMessage('The song index: '+config.playlists[key].songs[i]+' in playlist with key: '+key+' is not defined in your songs array!');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the shuffle statuses for each of the playlists. These will\r\n\t * be referenced when we shuffle individual playlists.\r\n\t *\r\n\t * @access private\r\n\t */\r\n\tfunction initializePlaylistShuffleStatuses(){\r\n\t\t/*\r\n\t\t\tIterate over all of the playlists the user defined adding\r\n\t\t\tthe playlist key to the shuffled playlist array and creating\r\n\t\t\tand empty object to house the statuses.\r\n\t\t*/\r\n\t\tfor ( let key in config.playlists ) {\r\n\t\t\tconfig.shuffled_statuses[ key ] = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the repeat statuses for each of the playlists.  These will\r\n\t * be referenced when we repeat individual playlits.\r\n\t *\r\n\t * @access private\r\n\t */\r\n\t function initializePlaylistsRepeatStatuses(){\r\n\t\t /*\r\n \t\t\tIterate over all of the playlists the user defined adding\r\n \t\t\tthe playlist key to the repeated playlist array and creating\r\n \t\t\tand empty object to house the statuses.\r\n \t\t*/\r\n \t\tfor ( let key in config.playlists ) {\r\n \t\t\tconfig.repeat_statuses[ key ] = false;\r\n \t\t}\r\n\t }\r\n\r\n\t/**\r\n\t * Initializes the shuffled playlist placeholders. These will be set for\r\n\t * playlists that are shuffled and contain the shuffled songs.\r\n\t *\r\n\t * @access private\r\n \t */\r\n\tfunction initializePlaylistShuffleLists(){\r\n\t\t/*\r\n\t\t\tIterate over all of the playlists the user defined adding\r\n\t\t\tthe playlist key to the shuffled playlists array and creating\r\n\t\t\tand empty object to house the shuffled playlists\r\n\t\t*/\r\n\t\tfor ( let key in config.playlists ) {\r\n\t\t\tconfig.shuffled_playlists[ key ] = [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the shuffled playlist indexes array. These will be set for\r\n\t * playlists that are shuffled and contain the active shuffled index.\r\n\t *\r\n\t * @access private\r\n\t */\r\n\tfunction initializePlaylistShuffleIndexes(){\r\n\t\t/*\r\n\t\t\tIterates over all of the playlists adding a key\r\n\t\t\tto the shuffled_active_indexes array that contains\r\n\t\t\tthe active shuffled index.\r\n\t\t*/\r\n\t\tfor( let key in config.playlists ) {\r\n\t\t\tconfig.shuffled_active_indexes[ key ] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Intializes the display for the first song in the playlist meta data.\r\n\t *\r\n\t * @access private\r\n\t */\r\n\tfunction initializeFirstSongInPlaylistMetaData(){\r\n\t\t/*\r\n\t\t\tIterates over all of the playlists setting the meta data for the\r\n\t\t\tfirst song.\r\n\t\t*/\r\n\t\tfor( let key in config.playlists ){\r\n\t\t\tAmplitudeVisualSync.setFirstSongInPlaylist( config.songs[ config.playlists[ key ][0] ] , key );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Intializes the default live settings for all of the songs.\r\n\t *\r\n\t * @access priavet\r\n\t */\r\n\tfunction initializeDefaultLiveSettings(){\r\n\t\tfor( let i = 0; i < config.songs.length; i++ ){\r\n\t\t\tif( config.songs[i].live == undefined ){\r\n\t\t\t\tconfig.songs[i].live = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t\tReturns the publicly accessible methods\r\n\t*/\r\n\treturn {\r\n\t\tinitialize: initialize,\r\n\t\tsetConfig: setConfig,\r\n\t\trebindDisplay: rebindDisplay\r\n\t}\r\n})();\r\n\r\nexport default AmplitudeInitializer\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/init/init.js","/**\r\n * Imports the config module\r\n * @module config\r\n */\r\nimport config from '../config.js';\r\n\r\n/**\r\n * Imports the helpers for the event handlers.\r\n * @module events/AmplitudeEventsHelpers\r\n */\r\nimport AmplitudeEventsHelpers from './helpers.js';\r\n\r\n/**\r\n * Imports the visual sync module to keep the display in sync with AmplitudeJS\r\n * @module visual/AmplitudeVisualSync\r\n */\r\nimport AmplitudeVisualSync from '../visual/visual.js';\r\n\r\n/**\r\n * Imports the core module of Amplitude which handles the basic functions\r\n * @module core/AmplitudeCore\r\n */\r\nimport AmplitudeCore from '../core/core.js';\r\n\r\n/**\r\n * Imports the core helpers for Amplitude which help run some of AmplitudeJS functions\r\n * @module core/AmplitudeHelpers\r\n */\r\nimport AmplitudeCoreHelpers from '../core/helpers.js';\r\n\r\n/**\r\n * These functions handle the events that we bound to each element and\r\n * prepare for a function to be called. These kind of act like filters/middleware.\r\n *\r\n * @module events/AmplitudeHandlers\r\n */\r\nlet AmplitudeHandlers = (function () {\r\n    /**\r\n     * When the time updates on the active song, we sync the current time displays\r\n     *\r\n     * HANDLER FOR: timeupdate\r\n     *\r\n     * @access public\r\n     */\r\n    function updateTime(){\r\n        /*\r\n            Help from: http://jsbin.com/badimipi/1/edit?html,js,output\r\n        */\r\n        if( config.active_song.buffered.length - 1 >= 0 ){\r\n            let bufferedEnd = config.active_song.buffered.end( config.active_song.buffered.length - 1 );\r\n            let duration =  config.active_song.duration;\r\n\r\n            config.buffered = ( ( bufferedEnd / duration ) * 100 );\r\n        }\r\n\r\n        /*\r\n            Sync the buffered progress bars.\r\n        */\r\n        AmplitudeVisualSync.syncBufferedProgressBars();\r\n\r\n        /*\r\n            If the current song is not live, then\r\n            we can update the time information. Otherwise the\r\n            current time updates wouldn't mean much since the time\r\n            is infinite.\r\n        */\r\n        if( !config.active_metadata.live ){\r\n            /*\r\n                Compute the current time\r\n            */\r\n            let currentTime = AmplitudeEventsHelpers.computeCurrentTimes();\r\n\r\n            /*\r\n                Compute the song completion percentage\r\n            */\r\n            let songCompletionPercentage = AmplitudeEventsHelpers.computeSongCompletionPercentage();\r\n\r\n            /*\r\n                Computes the song duration\r\n            */\r\n            let songDuration = AmplitudeEventsHelpers.computeSongDuration();\r\n\r\n            /*\r\n                Sync the current time elements with the current\r\n                location of the song and the song duration elements with\r\n                the duration of the song.\r\n            */\r\n            AmplitudeVisualSync.syncCurrentTime( currentTime, songCompletionPercentage );\r\n            AmplitudeVisualSync.syncSongDuration( currentTime, songDuration );\r\n\r\n            /*\r\n                Runs the callback defined for the time update.\r\n            */\r\n            AmplitudeCoreHelpers.runCallback( 'time_update' );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When the keydown event is fired, we determine which function should be run\r\n     * based on what was passed in.\r\n     *\r\n     * HANDLER FOR: keydown\r\n     *\r\n     * @access public\r\n     */\r\n    function keydown( event ){\r\n        AmplitudeEventsHelpers.runKeyEvent( event.which );\r\n    }\r\n\r\n    /**\r\n     * When the song has ended, handles what to do next\r\n     *\r\n     * HANDLER FOR: ended\r\n     *\r\n     * @access public\r\n     */\r\n    function songEnded(){\r\n        setTimeout( function(){\r\n            if( config.continue_next ){\r\n                /*\r\n                    If the song slider is not being slid\r\n                */\r\n                if(!config.is_sliding) {\r\n                    /*\r\n                        If the active playlist is not set, we set the\r\n                        next song that's in the songs array.\r\n                    */\r\n                    if (config.active_playlist == ''\r\n                        || config.active_playlist == null) {\r\n                        AmplitudeEventsHelpers.setNext(true);\r\n                    } else {\r\n                        /*\r\n                            Set the next song in the playlist\r\n                        */\r\n                        AmplitudeEventsHelpers.setNextPlaylist(config.active_playlist, true);\r\n                    }\r\n                } else {\r\n                    AmplitudeCoreHelpers.waitFor(() => !config.is_sliding, () => {\r\n                        songEnded();\r\n                    });\r\n                }\r\n            }else{\r\n                if( !config.is_touch_moving ){\r\n                    /*\r\n                        Sets all of the play/pause buttons to pause\r\n                    */\r\n                    AmplitudeVisualSync.setPlayPauseButtonsToPause();\r\n\r\n                    /*\r\n                        Stops the active song.\r\n                    */\r\n                    AmplitudeCore.stop();\r\n                }\r\n            }\r\n        }, config.delay );\r\n\r\n    }\r\n\r\n    /**\r\n     * As the song is buffered, we can display the buffered percentage in\r\n     * a progress bar.\r\n     *\r\n     * HANDLER FOR: ended\r\n     *\r\n     * @access public\r\n     */\r\n    function progress(){\r\n        /*\r\n            Help from: http://jsbin.com/badimipi/1/edit?html,js,output\r\n        */\r\n        if( config.active_song.buffered.length - 1 >= 0 ){\r\n            let bufferedEnd = config.active_song.buffered.end( config.active_song.buffered.length - 1 );\r\n            let duration =  config.active_song.duration;\r\n\r\n            config.buffered = ( ( bufferedEnd / duration ) * 100 );\r\n        }\r\n\r\n        /*\r\n            Sync the buffered progress bars.\r\n        */\r\n        AmplitudeVisualSync.syncBufferedProgressBars();\r\n    }\r\n\r\n    /**\r\n     * Handles an event on a play button in Amplitude.\r\n     *\r\n     * HANDLER FOR: 'amplitude-play'\r\n     *\r\n     * @access public\r\n     * @TODO Finish commenting and re-structure\r\n     */\r\n    function play(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                Gets the attribute for song index so we can check if\r\n                there is a need to change the song.  In some scenarios\r\n                there might be multiple play classes on the page. In that\r\n                case it is possible the user could click a different play\r\n                class and change the song.\r\n            */\r\n            let playButtonSongIndex = this.getAttribute('amplitude-song-index');\r\n            let playButtonPlaylistIndex = this.getAttribute('amplitude-playlist');\r\n\r\n            if( playButtonPlaylistIndex == null && playButtonSongIndex == null ){\r\n                AmplitudeEventsHelpers.setSongPlayPause( config.active_playlist, config.active_index );\r\n            }\r\n\r\n            /*\r\n\r\n            */\r\n            if( playButtonPlaylistIndex != null && playButtonPlaylistIndex != '' ){\r\n                if( AmplitudeCoreHelpers.checkNewPlaylist( playButtonPlaylistIndex ) ){\r\n                    AmplitudeCoreHelpers.setActivePlaylist( playButtonPlaylistIndex );\r\n\r\n                    if( playButtonSongIndex != null ){\r\n                        AmplitudeCoreHelpers.changeSong( playButtonSongIndex );\r\n                        AmplitudeEventsHelpers.setPlaylistPlayPause( playButtonPlaylistIndex );\r\n                    }else{\r\n                        AmplitudeCoreHelpers.changeSong( config.playlists[ playButtonPlaylistIndex ][0] );\r\n                        AmplitudeEventsHelpers.setPlaylistPlayPause( playButtonPlaylistIndex );\r\n                    }\r\n                }else{\r\n                    if( playButtonSongIndex != null ){\r\n                        AmplitudeCoreHelpers.changeSong( playButtonSongIndex );\r\n                        AmplitudeEventsHelpers.setPlaylistPlayPause( playButtonPlaylistIndex );\r\n                    }else{\r\n                        AmplitudeCoreHelpers.changeSong( config.active_index );\r\n                        AmplitudeEventsHelpers.setPlaylistPlayPause( playButtonPlaylistIndex );\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*\r\n\r\n            */\r\n            if( ( playButtonPlaylistIndex == null || playButtonPlaylistIndex == '' )\r\n                && ( playButtonSongIndex != null && playButtonSongIndex != '' ) ){\r\n\r\n                if( AmplitudeCoreHelpers.checkNewSong( playButtonSongIndex )\r\n                    || config.active_playlist != playButtonPlaylistIndex ){\r\n                    AmplitudeCoreHelpers.changeSong( playButtonSongIndex );\r\n                }\r\n\r\n                AmplitudeEventsHelpers.setSongPlayPause( playButtonPlaylistIndex, playButtonSongIndex );\r\n            }\r\n\r\n            /*\r\n                Start the visualizations for the song.\r\n                AMPFX-TODO: MAKE HANDLED BY AMPLITUDE FX\r\n            */\r\n            //privateStartVisualization();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles an event on a pause button\r\n     *\r\n     * HANDLER FOR: 'amplitude-pause'\r\n     *\r\n     * @access public\r\n     * @TODO Finish commenting and optimize\r\n     */\r\n    function pause(){\r\n        if( !config.is_touch_moving ){\r\n            let pauseButtonSongIndex = this.getAttribute('amplitude-song-index');\r\n            let pauseButtonPlaylistIndex = this.getAttribute('amplitude-playlist');\r\n\r\n            if( pauseButtonSongIndex == null && pauseButtonPlaylistIndex == null ){\r\n                AmplitudeEventsHelpers.setSongPlayPause( config.active_playlist, config.active_index );\r\n                AmplitudeCore.pause();\r\n            }\r\n\r\n\r\n            if( pauseButtonPlaylistIndex != null || pauseButtonPlaylistIndex != ''\r\n                && config.active_playlist == pauseButtonPlaylistIndex ){\r\n                /*\r\n                    The song was playing so we sync visually for the song\r\n                    to be paused and we pause the song.\r\n                */\r\n                AmplitudeVisualSync.syncMainPlayPause( 'paused' );\r\n\r\n                /*\r\n                    If there is an active playlist, then\r\n                    we need to sync that playlist's play pause\r\n                    button to the state of paused.\r\n                */\r\n                AmplitudeVisualSync.syncPlaylistPlayPause( config.active_playlist, 'paused' );\r\n\r\n                /*\r\n                    Sync the song play pause buttons\r\n                */\r\n                AmplitudeVisualSync.syncSongPlayPause( config.active_playlist, config.active_index, 'paused' );\r\n\r\n                AmplitudeCore.pause();\r\n            }\r\n\r\n            if( ( pauseButtonPlaylistIndex == null || pauseButtonPlaylistIndex == '' )\r\n                && ( pauseButtonSongIndex == config.active_index ) ){\r\n                /*\r\n                    The song was playing so we sync visually for the song\r\n                    to be paused and we pause the song.\r\n                */\r\n                AmplitudeVisualSync.syncMainPlayPause( 'paused' );\r\n\r\n                /*\r\n                    If there is an active playlist, then\r\n                    we need to sync that playlist's play pause\r\n                    button to the state of paused.\r\n                */\r\n                AmplitudeVisualSync.syncPlaylistPlayPause( config.active_playlist, 'paused' );\r\n\r\n                /*\r\n                    Sync the song play pause buttons\r\n                */\r\n                AmplitudeVisualSync.syncSongPlayPause( config.active_playlist, config.active_index, 'paused' );\r\n\r\n                AmplitudeCore.pause();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles an event on a play/pause button\r\n     *\r\n     * HANDLER FOR: 'amplitude-play-pause'\r\n     *\r\n     * @access public\r\n     */\r\n    function playPause(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                Checks to see if the element has an attribute for amplitude-main-play-pause\r\n                and syncs accordingly\r\n            */\r\n            if( this.getAttribute( 'amplitude-main-play-pause' ) != null ){\r\n                AmplitudeEventsHelpers.setMainPlayPause();\r\n\r\n                /*\r\n                    Syncs playlist main play pause buttons\r\n                */\r\n            }else if( this.getAttribute('amplitude-playlist-main-play-pause') != null ){\r\n                let playlist \t= this.getAttribute('amplitude-playlist');\r\n\r\n                AmplitudeEventsHelpers.setPlaylistPlayPause( playlist );\r\n\r\n                /*\r\n                    Syncs amplitude individual song buttons\r\n                */\r\n            }else{\r\n                let playlist \t= this.getAttribute('amplitude-playlist');\r\n                let songIndex \t= this.getAttribute('amplitude-song-index');\r\n\r\n                AmplitudeEventsHelpers.setSongPlayPause( playlist, songIndex );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles an event on a stop element.\r\n     *\r\n     * HANDLER FOR: 'amplitude-stop'\r\n     *\r\n     * @access public\r\n     * @TODO: AMP-FX Before stopping, make sure that AmplitudeFX visualization is stopped as well.\r\n     */\r\n    function stop(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                Sets all of the play/pause buttons to pause\r\n            */\r\n            AmplitudeVisualSync.setPlayPauseButtonsToPause();\r\n\r\n            /*\r\n                Stops the active song.\r\n            */\r\n            AmplitudeCore.stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles an event for a mute element\r\n     *\r\n     * HANDLER FOR: 'amplitude-mute'\r\n     *\r\n     * @access public\r\n     */\r\n    function mute(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                If the current volume in the config is 0, we set the volume to the\r\n                pre_mute level.  This means that the audio is already muted and\r\n                needs to be restored to the pre_mute level.\r\n\r\n                Otherwise, we set pre_mute volume to the current volume\r\n                and set the config volume to 0, muting the audio.\r\n            */\r\n            if( config.volume == 0 ){\r\n                config.active_song.muted = false;\r\n                config.volume = config.pre_mute_volume;\r\n                AmplitudeVisualSync.syncMute( false );\r\n            }else{\r\n                config.active_song.muted = true;\r\n                config.pre_mute_volume = config.volume;\r\n                config.volume = 0;\r\n                AmplitudeVisualSync.syncMute( true );\r\n            }\r\n\r\n            /*\r\n                Calls the core function to set the volume to the computed value\r\n                based on the user's intent.\r\n            */\r\n            AmplitudeCore.setVolume( config.volume );\r\n\r\n            /*\r\n                Syncs the volume sliders so the visuals align up with the functionality.\r\n                If the volume is at 0, then the sliders should represent that so the user\r\n                has the right starting point.\r\n            */\r\n            AmplitudeVisualSync.syncVolumeSliders( config.volume );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a click on a volume up element.\r\n     *\r\n     * HANDLER FOR: 'amplitude-volume-up'\r\n     *\r\n     * @access public\r\n     */\r\n    function volumeUp(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                The volume range is from 0 to 1 for an audio element. We make this\r\n                a base of 100 for ease of working with.\r\n\r\n                If the new value is less than 100, we use the new calculated\r\n                value which gets converted to the proper unit for the audio element.\r\n\r\n                If the new value is greater than 100, we set the volume to 1 which\r\n                is the max for the audio element.\r\n            */\r\n            if( ( config.volume + config.volume_increment ) <= 100 ){\r\n                config.volume = config.volume + config.volume_increment;\r\n            }else{\r\n                config.volume = 100;\r\n            }\r\n\r\n            /*\r\n                Calls the core function to set the volume to the computed value\r\n                based on the user's intent.\r\n            */\r\n            AmplitudeCore.setVolume( config.volume );\r\n\r\n            /*\r\n                Syncs the volume sliders so the visuals align up with the functionality.\r\n                If the volume is at 0, then the sliders should represent that so the user\r\n                has the right starting point.\r\n            */\r\n            AmplitudeVisualSync.syncVolumeSliders( config.volume );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a click on a volume down element.\r\n     *\r\n     * HANDLER FOR: 'amplitude-volume-down'\r\n     *\r\n     * @access public\r\n     */\r\n    function volumeDown(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                The volume range is from 0 to 1 for an audio element. We make this\r\n                a base of 100 for ease of working with.\r\n\r\n                If the new value is less than 100, we use the new calculated\r\n                value which gets converted to the proper unit for the audio element.\r\n\r\n                If the new value is greater than 100, we set the volume to 1 which\r\n                is the max for the audio element.\r\n            */\r\n            if( ( config.volume - config.volume_increment ) > 0 ){\r\n                config.volume = config.volume - config.volume_increment;\r\n            }else{\r\n                config.volume = 0;\r\n            }\r\n\r\n            /*\r\n                Calls the core function to set the volume to the computed value\r\n                based on the user's intent.\r\n            */\r\n            AmplitudeCore.setVolume( config.volume );\r\n\r\n            /*\r\n                Syncs the volume sliders so the visuals align up with the functionality.\r\n                If the volume is at 0, then the sliders should represent that so the user\r\n                has the right starting point.\r\n            */\r\n            AmplitudeVisualSync.syncVolumeSliders( config.volume );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a change on the song slider\r\n     *\r\n     * HANDLER FOR: 'amplitude-song-slider'\r\n     *\r\n     * @access public\r\n     */\r\n    function songSlider(){\r\n        /*\r\n            Gets the percentage of the song we will be setting the location for.\r\n        */\r\n        let locationPercentage = this.value;\r\n\r\n        /*\r\n            Checks to see if the element has an attribute for amplitude-main-play-pause\r\n            and syncs accordingly\r\n        */\r\n        if( this.getAttribute( 'amplitude-main-song-slider' ) != null ){\r\n            /*\r\n                If the active song is not live, set the current time\r\n            */\r\n            if( !config.active_metadata.live ){\r\n                let currentTime = ( config.active_song.duration ) * ( locationPercentage / 100 );\r\n\r\n                if( isFinite( currentTime ) ){\r\n                    config.active_song.currentTime = currentTime;\r\n                }\r\n            }\r\n\r\n            AmplitudeVisualSync.syncMainSliderLocation( locationPercentage );\r\n\r\n            if( config.active_playlist != '' && config.active_playlist != null ){\r\n                AmplitudeVisualSync.syncPlaylistSliderLocation( config.active_playlist, locationPercentage );\r\n            }\r\n        }\r\n\r\n        /*\r\n            Syncs playlist main play pause buttons\r\n        */\r\n        if( this.getAttribute('amplitude-playlist-song-slider') != null ){\r\n            let playlist \t= this.getAttribute('amplitude-playlist');\r\n\r\n            /*\r\n                We don't want to song slide a playlist that's not the\r\n                active placylist.\r\n            */\r\n            if( config.active_playlist == playlist ){\r\n                /*\r\n                    If the active song is not live, set the current time\r\n                */\r\n                if( !config.active_metadata.live ){\r\n                    config.active_song.currentTime = ( config.active_song.duration ) * ( locationPercentage / 100 );\r\n                }\r\n                AmplitudeVisualSync.syncMainSliderLocation( locationPercentage );\r\n                AmplitudeVisualSync.syncPlaylistSliderLocation( playlist, locationPercentage );\r\n            }\r\n        }\r\n\r\n        /*\r\n            Syncs amplitude individual song buttons\r\n        */\r\n        if( this.getAttribute('amplitude-playlist-song-slider') == null\r\n            && this.getAttribute('amplitude-main-song-slider') == null ){\r\n\r\n            let playlist \t= this.getAttribute('amplitude-playlist');\r\n            let songIndex \t= this.getAttribute('amplitude-song-index');\r\n\r\n            if( config.active_index == songIndex ){\r\n                /*\r\n                    If the active song is not live, set the current time\r\n                */\r\n                if( !config.active_metadata.live ){\r\n                    config.active_song.currentTime = ( config.active_song.duration ) * ( locationPercentage / 100 );\r\n                }\r\n\r\n                AmplitudeVisualSync.syncMainSliderLocation();\r\n\r\n                if( config.active_playlist != ''\r\n                    && config.active_playlist != null\r\n                    && config.active_playlist == playlist ){\r\n                    AmplitudeVisualSync.syncPlaylistSliderLocation( playlist, location );\r\n                }\r\n\r\n                AmplitudeVisualSync.syncSongSliderLocation( playlist, songIndex, location );\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Handles a change on the volume slider\r\n     *\r\n     * HANDLER FOR: 'amplitude-volume-slider'\r\n     *\r\n     * @access public\r\n     */\r\n    function volumeSlider(){\r\n        /*\r\n            Calls the core function to set the volume to the computed value\r\n            based on the user's intent.\r\n        */\r\n        AmplitudeCore.setVolume( this.value );\r\n\r\n        /*\r\n            Sync the volume slider locations\r\n        */\r\n        AmplitudeVisualSync.syncVolumeSliderLocation( this.value );\r\n    }\r\n\r\n    /**\r\n     * Handles an event on the next button\r\n     *\r\n     * HANDLER FOR: 'amplitude-next'\r\n     *\r\n     * @access public\r\n     */\r\n    function next(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                Checks to see if the button is a playlist next button or\r\n                if it's a global playlist button.\r\n            */\r\n            if( this.getAttribute('amplitude-playlist') == ''\r\n                || this.getAttribute('amplitude-playlist') == null ){\r\n\r\n                /*\r\n                    Check to see if the current state of the player\r\n                    is in playlist mode or not playlist mode.\r\n                */\r\n                if( config.active_playlist == ''\r\n                    || config.active_playlist == null ){\r\n                    AmplitudeEventsHelpers.setNext();\r\n                }else{\r\n                    AmplitudeEventsHelpers.setNextPlaylist( config.active_playlist );\r\n                }\r\n            }else{\r\n                /*\r\n                    Gets the playlist of the next button.\r\n                */\r\n                let playlist = this.getAttribute('amplitude-playlist');\r\n\r\n                /*\r\n                    Sets the next playlist\r\n                */\r\n                AmplitudeEventsHelpers.setNextPlaylist( playlist );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles an event on the previous button\r\n     *\r\n     * HANDLER FOR: 'amplitude-prev'\r\n     *\r\n     * @access public\r\n     */\r\n    function prev(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                Checks to see if the previous button is a playlist previous\r\n                button or if it's a global playlist button.\r\n            */\r\n            if( this.getAttribute('amplitude-playlist') == ''\r\n                || this.getAttribute('amplitude-playlist') == null ){\r\n\r\n                /*\r\n                    Check to see if the current playlist has been set\r\n                    or null and set the previous song.\r\n                */\r\n                if( config.active_playlist == ''\r\n                    || config.active_playlist == null ){\r\n                    AmplitudeEventsHelpers.setPrev();\r\n                }else{\r\n                    AmplitudeEventsHelpers.setPrevPlaylist( config.active_playlist );\r\n                }\r\n            }else{\r\n                /*\r\n                    Gets the playlist of the previous button.\r\n                */\r\n                let playlist = this.getAttribute('amplitude-playlist');\r\n\r\n                /*\r\n                    Sets the previous playlist\r\n                */\r\n                AmplitudeEventsHelpers.setPrevPlaylist( playlist );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles an event on the shuffle button\r\n     *\r\n     * HANDLER FOR: 'amplitude-shuffle'\r\n     *\r\n     * @access public\r\n     */\r\n    function shuffle(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                Check to see if the shuffle button belongs to a playlist\r\n            */\r\n            if( this.getAttribute('amplitude-playlist') == ''\r\n                || this.getAttribute('amplitude-playlist') == null ){\r\n                /*\r\n                    Sets the shuffle button to null\r\n                */\r\n                AmplitudeEventsHelpers.setShuffle( null );\r\n            }else{\r\n                /*\r\n                    Gets the playlist attribute of the shuffle button and\r\n                    set shuffle to on for the playlist.\r\n                */\r\n                let playlist = this.getAttribute('amplitude-playlist');\r\n                AmplitudeEventsHelpers.setShuffle( playlist );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles an event on the repeat button\r\n     *\r\n     * HANDLER FOR: 'amplitude-repeat'\r\n     *\r\n     * @access private\r\n     */\r\n    function repeat(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                Check to see if the repeat button belongs to a playlist\r\n            */\r\n            if( this.getAttribute('amplitude-playlist') == ''\r\n                || this.getAttribute('amplitude-playlist') == null ){\r\n                /*\r\n                    Sets repeat to the opposite of what it was set to\r\n                */\r\n                AmplitudeEventsHelpers.setRepeat( !config.repeat, null );\r\n            }else{\r\n                /*\r\n                    Gets the playlist attribute of the repeat button and\r\n                    set repeat to on for the playlist.\r\n                */\r\n                let playlist = this.getAttribute('amplitude-playlist');\r\n                AmplitudeEventsHelpers.setRepeat( !config.repeat_statuses[playlist], playlist );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles an event on the repeat song button\r\n     *\r\n     * HANDLER FOR: 'amplitude-repeat-song'\r\n     *\r\n     * @access private\r\n     */\r\n    function repeatSong(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                Sets repeat song to the opposite of what it was set to\r\n            */\r\n            AmplitudeEventsHelpers.setRepeatSong( !config.repeat_song );\r\n\r\n            /*\r\n                Visually sync repeat song\r\n            */\r\n            AmplitudeVisualSync.syncRepeatSong();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles an event on the playback speed button\r\n     *\r\n     * HANDLER FOR: 'amplitude-playback-speed'\r\n     *\r\n     * @access private\r\n     */\r\n    function playbackSpeed(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                We increment the speed by .5 everytime we click\r\n                the button to change the playback speed. Once we are\r\n                actively playing back at 2, we start back at 1 which\r\n                is normal speed.\r\n            */\r\n            switch( config.playback_speed ){\r\n                case 1:\r\n                    AmplitudeEventsHelpers.setPlaybackSpeed( 1.5 );\r\n                    break;\r\n                case 1.5:\r\n                    AmplitudeEventsHelpers.setPlaybackSpeed( 2 );\r\n                    break;\r\n                case 2:\r\n                    AmplitudeEventsHelpers.setPlaybackSpeed( 1 );\r\n                    break;\r\n            }\r\n\r\n            /*\r\n                Visually sync the playback speed.\r\n            */\r\n            AmplitudeVisualSync.syncPlaybackSpeed();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles an event on a skip to button.\r\n     *\r\n     * HANDLER FOR: 'amplitude-skip-to'\r\n     *\r\n     * @access private\r\n     */\r\n    function skipTo(){\r\n        if( !config.is_touch_moving ){\r\n            /*\r\n                Determines if the skip to button is in the scope of a playlist.\r\n            */\r\n            if( this.hasAttribute('amplitude-playlist') ){\r\n                let playlist = this.getAttribute('amplitude-playlist');\r\n\r\n                if( AmplitudeCoreHelpers.checkNewPlaylist( playlist ) ){\r\n                    AmplitudeCoreHelpers.setActivePlaylist( playlist );\r\n                }\r\n                /*\r\n                    Gets the location, playlist and song index that is being skipped\r\n                    to.\r\n                */\r\n                let seconds = parseInt( this.getAttribute('amplitude-location') );\r\n                let songIndex = parseInt( this.getAttribute( 'amplitude-song-index') );\r\n\r\n                /*\r\n                    Changes the song to where it's being skipped and then\r\n                    play the song.\r\n                */\r\n                AmplitudeCoreHelpers.changeSong( songIndex );\r\n                AmplitudeCore.play();\r\n\r\n                AmplitudeVisualSync.syncMainPlayPause( 'playing' );\r\n                AmplitudeVisualSync.syncPlaylistPlayPause( playlist, 'playing' );\r\n                AmplitudeVisualSync.syncSongPlayPause( playlist, songIndex, 'playing' );\r\n\r\n                /*\r\n                    Skip to the location in the song.\r\n                */\r\n                AmplitudeCore.skipToLocation( seconds );\r\n            }else{\r\n                /*\r\n                    Gets the location and song index that is being skipped\r\n                    to.\r\n                */\r\n                let seconds = parseInt( this.getAttribute('amplitude-location') );\r\n                let songIndex = parseInt( this.getAttribute( 'amplitude-song-index') );\r\n\r\n                /*\r\n                    Changes the song to where it's being skipped and then\r\n                    play the song.\r\n                */\r\n                AmplitudeCoreHelpers.changeSong( songIndex );\r\n                AmplitudeCore.play();\r\n\r\n                AmplitudeVisualSync.syncMainPlayPause( 'playing' );\r\n                AmplitudeVisualSync.syncSongPlayPause( null, songIndex, 'playing' );\r\n\r\n                /*\r\n                    Skip to the location in the song.\r\n                */\r\n                AmplitudeCore.skipToLocation( seconds );\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n        Returns the public functions\r\n    */\r\n    return {\r\n        updateTime: updateTime,\r\n        keydown: keydown,\r\n        songEnded: songEnded,\r\n        progress: progress,\r\n        play: play,\r\n        pause: pause, playPause: playPause,\r\n        stop: stop,\r\n        mute:mute,\r\n        volumeUp: volumeUp,\r\n        volumeDown: volumeDown,\r\n        songSlider: songSlider,\r\n        volumeSlider: volumeSlider,\r\n        next: next,\r\n        prev: prev,\r\n        shuffle: shuffle,\r\n        repeat: repeat,\r\n        repeatSong: repeatSong,\r\n        playbackSpeed: playbackSpeed,\r\n        skipTo: skipTo\r\n    }\r\n})();\r\n\r\nexport default AmplitudeHandlers\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/events/handlers.js","/**\r\n * @name \t\tAmplitude.js\r\n * @version 3.3.1\r\n * @author \tDan Pastori (521 Dimensions) <dan@521dimensions.com>\r\n*/\r\n\r\n/**\r\n * AmplitudeJS Initializer Module\r\n *\r\n * @module init/AmplitudeInitializer\r\n */\r\nimport AmplitudeInitializer from './init/init.js';\r\n\r\n/**\r\n * AmplitudeJS Core Module\r\n *\r\n * @module core/AmplitudeCore\r\n */\r\nimport AmplitudeCore from './core/core.js';\r\n\r\n/**\r\n * AmplitudeJS Core Helpers Module\r\n *\r\n * @module core/AmplitudeCoreHelpers\r\n */\r\nimport AmplitudeCoreHelpers from './core/helpers.js';\r\n\r\n/**\r\n * AmplitudeJS Events Module\r\n *\r\n * @module events/AmplitudeEvents\r\n */\r\nimport AmplitudeEvents from './events/events.js';\r\n\r\n/**\r\n * AmplitudeJS Events Helpers Module\r\n *\r\n * @module events/AmplitudeEventsHelpers\r\n */\r\nimport AmplitudeEventsHelpers from './events/helpers.js';\r\n\r\n/**\r\n * AmplitudeJS Visual Sync Module\r\n *\r\n * @module visual/AmplitudeVisualSync\r\n */\r\nimport AmplitudeVisualSync from './visual/visual.js';\r\n\r\n/**\r\n * Imports the config module\r\n * @module config\r\n */\r\nimport config from './config.js';\r\n\r\n/**\r\n * Amplitude should just be an interface to the public functions.\r\n * Everything else should be handled by other objects\r\n *\r\n * @module Amplitude\r\n */\r\n\r\nlet Amplitude = (function () {\r\n\t/**\r\n\t * The main init function.  The user will call this through\r\n\t * Amplitude.init({}) and pass in their settings.\r\n\t *\r\n\t * Public Accessor: Amplitude.init( user_config_json );\r\n\t *\r\n\t * @access public\r\n\t * @param {object} userConfig \t- A JSON object of user defined values that helps configure and initialize AmplitudeJS.\r\n\t */\r\n\tfunction init( userConfig ){\r\n\t\tAmplitudeInitializer.initialize( userConfig );\r\n\t}\r\n\r\n\t/**\r\n\t * Binds new elements that were added to the page.\r\n\t *\r\n\t * Public Accessor: Amplitude.bindNewElements()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction bindNewElements(){\r\n\t\tAmplitudeInitializer.rebindDisplay();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the active playlist.\r\n\t *\r\n\t * Public Accessor: Amplitude.getActivePlaylist()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getActivePlaylist(){\r\n\t\treturn config.active_playlist;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current playback speed.\r\n\t *\r\n\t * Public Accessor: Amplitude.getPlaybackSpeed()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getPlaybackSpeed(){\r\n\t\treturn config.playback_speed;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the repeat state of the player.\r\n\t *\r\n\t * Public Accessor: Amplitude.getRepeat()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getRepeat(){\r\n\t\treturn config.repeat;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the repeat state for a playlist\r\n\t *\r\n\t * Public Accessor: Amplitude.getRepeatPlaylist()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\t function getRepeatPlaylist( playlistKey ){\r\n\t\t return config.repeat_statuses[ playlistKey ];\r\n\t }\r\n\r\n\t/**\r\n\t * Returns the shuffle state of the player.\r\n\t *\r\n\t * Public Accessor: Amplitude.getShuffle()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getShuffle(){\r\n\t\treturn config.shuffle_on\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the shuffle state of the playlist.\r\n\t *\r\n\t * Public Accessor: Amplitude.getShufflePlaylist( playlist )\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist \t- The key representing the playlist ID to see if it's shuffled or not.\r\n\t */\r\n\tfunction getShufflePlaylist( playlist ){\r\n\t\treturn config.shuffled_statuses[ playlist ];\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the shuffle state for the player.\r\n\t *\r\n\t * Public Accessor: Amplitude.setShuffle()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\t function setShuffle(){\r\n\t\t AmplitudeEventsHelpers.setShuffle( null );\r\n\t }\r\n\r\n\t /**\r\n \t * Sets the shuffle state for the playlist\r\n \t *\r\n \t * Public Accessor: Amplitude.setShufflePlaylist( playlistKey )\r\n \t *\r\n \t * @access public\r\n\t * @param {string} playlistKey \t- The key representing the playlist ID to to shuffle the playlist.\r\n \t */\r\n \t function setShufflePlaylist( playlistKey ){\r\n \t\t AmplitudeEventsHelpers.setShuffle( playlistKey );\r\n \t }\r\n\r\n\t /**\r\n\t\t* Sets the repeat state for the player.\r\n\t\t*\r\n\t\t* Public Accessor: Amplitude.setRepeat()\r\n\t\t*\r\n\t\t* @access public\r\n\t\t*/\r\n\t function setRepeat(){\r\n\t\t  if( !config.is_touch_moving ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tSets repeat to the opposite of what it was set to\r\n\t\t\t\t*/\r\n\t\t\t\tAmplitudeEventsHelpers.setRepeat( !config.repeat );\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tVisually sync repeat\r\n\t\t\t\t*/\r\n\t\t\t\tAmplitudeVisualSync.syncRepeat();\r\n\t\t  }\r\n\t }\r\n\r\n\t/**\r\n\t * Sets the repeat state for a playlist.\r\n\t *\r\n\t * Public Accessor: Amplitude.setRepeatPlaylist( playlistKey )\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlistKey \t- The key representing the playlist ID to to shuffle the playlist.\r\n\t */\r\n\t function setRepeatPlaylist( playlistKey ){\r\n\t\t if( !config.is_touch_moving ){\r\n\t\t\t /*\r\n\t\t\t \tSets repeat for the playlist to the opposite of what it was set to.\r\n\t\t\t */\r\n\t\t\t AmplitudeEventsHelpers.setRepeat( !config.repeat_statuses[playlistKey], playlistKey );\r\n\t\t }\r\n\t }\r\n\r\n\t/**\r\n\t * Sets the repeat state for the song.\r\n\t *\r\n\t * Public Accessor: Amplitude.setRepeatSong()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\t function setRepeatSong(){\r\n\t\t if( !config.is_touch_moving ){\r\n\t\t\t /*\r\n\t\t\t\t Sets repeat to the opposite of what it was set to\r\n\t\t\t */\r\n\t\t\t AmplitudeEventsHelpers.setRepeatSong( !config.repeat_song );\r\n\r\n\t\t\t /*\r\n\t\t\t\t Visually sync repeat song\r\n\t\t\t */\r\n\t\t\t AmplitudeVisualSync.syncRepeatSong();\r\n\t\t }\r\n\t }\r\n\r\n\r\n\t/**\r\n\t * Gets the default album art for the player\r\n\t *\r\n\t * Public Accessor: Amplitude.getDefaultAlbumArt()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getDefaultAlbumArt(){\r\n\t\treturn config.default_album_art;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the default album art for the player\r\n\t *\r\n\t * Public Accessor: Amplitude.setDefaultAlbumArt( url )\r\n\t *\r\n\t * @access public\r\n\t * @param {string} url \t- A string representing the URL of the new default album art.\r\n\t */\r\n\tfunction setDefaultAlbumArt( url ){\r\n\t\tconfig.default_album_art = url;\r\n\t}\r\n\r\n\t/**\r\n\t * Allows the user to get the percentage of the song played.\r\n\t *\r\n\t * Public Accessor: Amplitude.getSongPlayedPercentage();\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getSongPlayedPercentage(){\r\n\t\t/*\r\n\t\t\tReturns the percentage of the song played.\r\n\t\t*/\r\n\t\treturn ( config.active_song.currentTime / config.active_song.duration ) * 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Allows the user to get the amount of seconds the song has played.\r\n\t *\r\n\t * Public Accessor: Amplitude.getSongPlayed();\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getSongPlayedSeconds(){\r\n\t\t/*\r\n\t\t\tReturns the amount of seconds the song has played.\r\n\t\t*/\r\n\t\treturn config.active_song.currentTime;\r\n\t}\r\n\r\n\t/**\r\n\t * Allows the user to get the duration of the current song\r\n\t *\r\n\t * Public Accessor: Amplitude.getSongPlayed();\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getSongDuration(){\r\n\t\t/*\r\n\t\t\tReturns the duration of the current song\r\n\t\t*/\r\n\t\treturn config.active_song.duration;\r\n\t}\r\n\r\n\t/**\r\n\t * Allows the user to set how far into the song they want to be. This is\r\n\t * helpful for implementing custom range sliders. Only works on the current song.\r\n\t *\r\n\t * Public Accessor: Amplitude.setSongPlayedPercentage( float );\r\n\t *\r\n\t * @access public\r\n\t * @param {number} percentage \t- The percentage of the song played\r\n\t */\r\n\tfunction setSongPlayedPercentage( percentage ){\r\n\t\t/*\r\n\t\t\tEnsures the percentage is a number and is between 0 and 100.\r\n\t\t*/\r\n\t\tif( typeof percentage == 'number'\r\n\t\t\t&& ( percentage > 0 && percentage < 100 ) ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tSets the current time of the song to the percentage.\r\n\t\t\t\t*/\r\n\t\t\t\tconfig.active_song.currentTime = ( config.active_song.duration ) * ( percentage / 100 );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Allows the user to turn on debugging.\r\n\t *\r\n\t * Public Accessor: Amplitude.setDebug( bool );\r\n\t *\r\n\t * @access public\r\n\t * @param {boolean} state \t\t- Turns debugging on and off.\r\n\t */\r\n\tfunction setDebug( state ){\r\n\t\t/*\r\n\t\t\tSets the global config debug on or off.\r\n\t\t*/\r\n\t\tconfig.debug = state;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the active song meta data for the user to do what is\r\n\t * needed.\r\n\t *\r\n\t * Public Accessor: Amplitude.getActiveSongMetadata();\r\n\t *\r\n\t * @access public\r\n\t * @returns {object} JSON Object with the active song information\r\n\t */\r\n\tfunction getActiveSongMetadata(){\r\n\t\treturn config.active_metadata;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a song in the songs array at that index\r\n\t *\r\n\t * Public Accessor: Amplitude.getSongByIndex( song_index )\r\n\t *\r\n\t * @access public\r\n\t * @param {number} index \t- The integer for the index of the song in the songs array.\r\n\t * @returns {object} JSON representation for the song at a specific index.\r\n\t */\r\n\tfunction getSongByIndex( index ){\r\n\t\treturn config.songs[index];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a song at a playlist index\r\n\t *\r\n\t * Public Accessor: Amplitude.getSongAtPlaylistIndex( playlist, index\r\n\t *\r\n\t * @access public\r\n\t * @param {number} index \t\t\t- The integer for the index of the song in the playlist.\r\n\t * @param {string} playlist\t\t- The key of the playlist we are getting the song at the index for\r\n\t * @returns {object} JSON representation for the song at a specific index.\r\n\t */\r\n\tfunction getSongAtPlaylistIndex( playlist, index ){\r\n\t\tlet songIndex = config.playlists[playlist][index];\r\n\r\n\t\treturn config.songs[songIndex];\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a song to the end of the config array.  This will allow Amplitude\r\n\t * to play the song in a playlist type setting.\r\n\t *\r\n\t * Public Accessor: Amplitude.addSong( song_json )\r\n\t *\r\n\t * @access public\r\n\t * @param {object} song \t- JSON representation of a song.\r\n\t * @returns {number} New index of the song.\r\n\t */\r\n\tfunction addSong( song ){\r\n\t\t/*\r\n\t\t\tEnsures we have a songs array to push to.\r\n\t\t*/\r\n\t\tif( config.songs == undefined ){\r\n\t\t\tconfig.songs = [];\r\n\t\t}\r\n\r\n\t\tconfig.songs.push( song );\r\n\t\tAmplitudeEventsHelpers.setNext();\r\n\t\treturn config.songs.length - 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a song to a playlist. This will allow Amplitude to play the song in the\r\n\t * playlist\r\n\t *\r\n\t * Public Accessor: Amplitude.addSongToPlaylist( song_json, playlist_key )\r\n\t *\r\n\t * @access public\r\n\t * @param {object} song \t\t\t- JSON representation of a song.\r\n\t * @param {string} playlist\t\t- Playlist we are adding the song to.\r\n\t * @returns {mixed} New index of song in playlist or null if no playlist exists\r\n\t */\r\n\t function addSongToPlaylist( song, playlist ){\r\n\t\t \t/*\r\n\t \t\t\tEnsures we have a songs array to push to. This is step 1.\r\n\t \t\t*/\r\n\t \t\tif( config.songs == undefined ){\r\n\t \t\t\tconfig.songs = [];\r\n\t \t\t}\r\n\r\n\t \t\tconfig.songs.push( song );\r\n\r\n\t\t\tvar songIndex = config.songs.length - 1;\r\n\r\n\t\t\t/*\r\n\t\t\t\tEnsures the playlist is valid to push the song on to.\r\n\t\t\t*/\r\n\t\t\tif( config.playlists[playlist] != undefined ){\r\n\t\t\t\tconfig.playlists[playlist].push( songIndex );\r\n\r\n\t\t\t\tAmplitudeEventsHelpers.setNextPlaylist( playlist );\r\n\r\n\t\t\t\treturn config.playlists[playlist].length - 1;\r\n\t\t\t}else{\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t }\r\n\r\n\t /**\r\n \t * Removes a song from the song array\r\n \t *\r\n \t * Public Accessor: Amplitude.removeSong( index )\r\n \t *\r\n \t * @access public\r\n \t * @param {integer} index \t\t\t- Index of the song being removed\r\n \t * @returns {boolean} True if removed false if not.\r\n \t */\r\n\t function removeSong( index ){\r\n\t\t if( config.songs[index] != undefined ){\r\n\t\t\t config.songs.splice( index, 1 );\r\n\t\t\t return true;\r\n\t\t }else{\r\n\t\t \treturn false;\r\n\t\t }\r\n\t }\r\n\r\n\t /**\r\n \t * Removes a song from the playlist\r\n \t *\r\n \t * Public Accessor: Amplitude.removeSongFromPlaylist( index, playlist )\r\n \t *\r\n \t * @access public\r\n \t * @param {integer} index \t\t\t- Index of the song being removed from the playlist.\r\n \t * @param {string} playlist\t\t\t- Playlist we are removing the song from.\r\n \t * @returns {boolean} True if removed false if not.\r\n \t */\r\n\t function removeSongFromPlaylist( index, playlist ){\r\n\t\t if( config.playlists[playlist] != undefined ){\r\n\t\t\t config.playlists[playlist].splice( index, 1 );\r\n\t\t }else{\r\n\t\t\t return false;\r\n\t\t }\r\n\t }\r\n\r\n\t/**\r\n\t * When you pass a song object it plays that song right awawy.  It sets\r\n\t * the active song in the config to the song you pass in and synchronizes\r\n\t * the visuals.\r\n\t *\r\n\t * Public Accessor: Amplitude.playNow( song )\r\n\t *\r\n\t * @access public\r\n\t * @param {object} song \t- JSON representation of a song.\r\n\t */\r\n\tfunction playNow( song ){\r\n\t\tAmplitudeCore.playNow( song );\r\n\t}\r\n\r\n    /**\r\n     * Sets a song at the index passed in from the songs array.\r\n     *\r\n     * Public Accessor: Amplitude.setSongAtIndex( index )\r\n     *\r\n     * @access public\r\n     * @param {number} index \t- The number representing the song in the songs array.\r\n     */\r\n    function setSongAtIndex( index ){\r\n        AmplitudeCore.setSongAtIndex( index );\r\n    }\r\n\r\n\t/**\r\n\t * Plays a song at the index passed in from the songs array.\r\n\t *\r\n\t * Public Accessor: Amplitude.playSongAtIndex( index )\r\n\t *\r\n\t * @access public\r\n\t * @param {number} index \t- The number representing the song in the songs array.\r\n\t */\r\n\tfunction playSongAtIndex( index ){\r\n\t\tAmplitudeCore.playSongAtIndex( index );\r\n\t}\r\n\r\n    /**\r\n     * Sets a song at the index passed in for the playlist provided. The index passed\r\n     * in should be the index of the song in the playlist and not the songs array.\r\n     *\r\n     * @access public\r\n     * @param {number} index \t\t- The number representing the song in the playlist array.\r\n     * @param {string} playlist - The key string representing the playlist we are playing the song from.\r\n     *\r\n     */\r\n    function setPlaylistSongAtIndex( index, playlist ){\r\n        AmplitudeCore.setPlaylistSongAtIndex( index, playlist );\r\n    }\r\n\r\n\t/**\r\n\t * Plays a song at the index passed in for the playlist provided. The index passed\r\n\t * in should be the index of the song in the playlist and not the songs array.\r\n\t *\r\n\t * @access public\r\n\t * @param {number} index \t\t- The number representing the song in the playlist array.\r\n\t * @param {string} playlist - The key string representing the playlist we are playing the song from.\r\n\t *\r\n\t */\r\n\tfunction playPlaylistSongAtIndex( index, playlist ){\r\n\t\tAmplitudeCore.playPlaylistSongAtIndex( index, playlist );\r\n\t}\r\n\r\n\t/**\r\n\t * @TODO: Implement Add Song To Playlist Functionality\r\n\t */\r\n\tfunction addSongToPlaylist( song, playlist ){\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Allows the user to play whatever the active song is directly\r\n\t * through Javascript. Normally ALL of Amplitude functions that access\r\n\t * the core features are called through event handlers.\r\n\t *\r\n\t * Public Accessor: Amplitude.play();\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction play(){\r\n\t\tAmplitudeCore.play();\r\n\t}\r\n\r\n\t/**\r\n\t * Allows the user to pause whatever the active song is directly\r\n\t * through Javascript. Normally ALL of Amplitude functions that access\r\n\t * the core features are called through event handlers.\r\n\t *\r\n\t * Public Accessor: Amplitude.pause();\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction pause(){\r\n\t\tAmplitudeCore.pause();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the audio object used to play the audio\r\n\t *\r\n\t * Public Accessor: Amplitude.getAudio();\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getAudio(){\r\n\t\treturn config.active_song;\r\n\t}\r\n\r\n\t/**\r\n\t * Plays the next song either in the playlist or globally.\r\n\t *\r\n\t * Public Accessor: Amplitude.next( playlist );\r\n\t *\r\n\t * @access public\r\n\t * @param {string} [playlist = null] \t- The playlist key\r\n\t */\r\n\tfunction next( playlist = null ){\r\n\t\t/*\r\n\t\t\tIf the playlist is empty or null, then we check the active\r\n\t\t\tplaylist\r\n\t\t*/\r\n\t\tif( playlist == '' || playlist == null ){\r\n\t\t\t/*\r\n\t\t\t\tIf the active playlist is null, then we set the next global\r\n\t\t\t\tsong or we set the next in the playlist.\r\n\t\t\t*/\r\n\t\t\tif( config.active_playlist == null || config.active_playlist == '' ){\r\n\t\t\t\tAmplitudeEventsHelpers.setNext()\r\n\t\t\t}else{\r\n\t\t\t\tAmplitudeEventsHelpers.setNextPlaylist( config.active_playlist );\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tSet the next in the playlist for the key provided.\r\n\t\t\t*/\r\n\t\t\tAmplitudeEventsHelpers.setNextPlaylist( playlist );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Plays the prev song either in the playlist or globally.\r\n\t *\r\n\t * Public Accessor: Amplitude.prev( playlist );\r\n\t *\r\n\t * @access public\r\n\t * @param {string} [playlist = null] \t- The playlist key\r\n\t */\r\n\tfunction prev( playlist = null ){\r\n\t\t/*\r\n\t\t\tIf the playlist is empty or null, then we check the active\r\n\t\t\tplaylist\r\n\t\t*/\r\n\t\tif( playlist == '' || playlist == null ){\r\n\t\t\t/*\r\n\t\t\t\tIf the active playlist is null, then we set the prev global\r\n\t\t\t\tsong or we set the prev in the playlist.\r\n\t\t\t*/\r\n\t\t\tif( config.active_playlist == null || config.active_playlist == '' ){\r\n\t\t\t\tAmplitudeEventsHelpers.setPrev()\r\n\t\t\t}else{\r\n\t\t\t\tAmplitudeEventsHelpers.setPrevPlaylist( config.active_playlist );\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t/*\r\n\t\t\t\tSet the prev in the playlist for the key provided.\r\n\t\t\t*/\r\n\t\t\tAmplitudeEventsHelpers.setPrevPlaylist( playlist );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets all of the songs in the songs array\r\n\t *\r\n\t * Public Accessor: Amplitude.getSongs( );\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getSongs(){\r\n\t\treturn config.songs;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets all of the songs in a playlist\r\n\t *\r\n\t * Public Accessor: Amplitude.getSongsInPlaylist( playlist );\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist \t- The playlist key\r\n\t */\r\n\tfunction getSongsInPlaylist( playlist ){\r\n\t\tlet songsArray = [];\r\n\r\n\t\tfor( let i = 0; i < config.playlists[playlist].length; i++ ){\r\n\t\t\tlet songIndex = config.playlists[playlist][i];\r\n\t\t\tsongsArray.push( config.songs[songIndex] );\r\n\t\t}\r\n\r\n\t\treturn songsArray;\r\n\t}\r\n\r\n\t/**\r\n\t * Get current state of songs. If shuffled, this will return the shuffled\r\n\t * songs.\r\n\t *\r\n\t * Public Accessor: Amplitude.getSongsState();\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getSongsState(){\r\n\t\tif( config.shuffle_on ){\r\n\t\t\treturn config.shuffle_list;\r\n\t\t}else{\r\n\t\t\treturn config.songs;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get current state of songs in playlist. If shuffled, this will return the\r\n\t * shuffled songs.\r\n\t *\r\n\t * Public Accessor: Amplitude.getSongsStatePlaylist( playlist );\r\n\t *\r\n\t * @access public\r\n\t * @param {string} playlist \t- The playlist key\r\n\t * @todo Finish commenting\r\n\t */\r\n\tfunction getSongsStatePlaylist( playlist ){\r\n\t\tlet songsArray = [];\r\n\r\n\t\tif( config.shuffled_status[playlist] ){\r\n\r\n\t\t\tfor( let i = 0; i < config.shuffled_playlists[playlist].length; i++ ){\r\n\t\t\t\tsongsArray.push( config.songs[i] );\r\n\t\t\t}\r\n\r\n\t\t}else{\r\n\r\n\t\t\tfor( let i = 0; i < config.playlists[playlist].length; i++ ){\r\n\t\t\t\tsongsArray.push( config.songs[i] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn songsArray;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the active index of the player\r\n\t *\r\n\t * Public Accessor: Amplitude.getActiveIndex()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getActiveIndex(){\r\n\t\treturn parseInt( config.active_index );\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the active index with respect to the state of the player whether it is\r\n\t * shuffled or not.\r\n\t *\r\n\t * Public Accessor: Amplitude.getActiveIndexState()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getActiveIndexState(){\r\n\t\tif( config.shuffle_on ){\r\n\t\t\treturn parseInt( config.shuffle_active_index );\r\n\t\t}else{\r\n\t\t\treturn parseInt( config.active_index );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get the version of AmplitudeJS\r\n\t *\r\n\t * Public Accessor: Amplitude.getVersion()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getVersion(){\r\n\t\treturn config.version;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the buffered amount for the current song\r\n\t *\r\n\t * Public Accessor: Amplitude.getBuffered()\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction getBuffered(){\r\n\t\treturn config.buffered;\r\n\t}\r\n\r\n\t/**\r\n\t * Skip to a certain location in a selected song.\r\n\t *\r\n\t * Public Accessor: Amplitude.getBuffered()\r\n\t *\r\n\t * @access public\r\n\t * @param {number} seconds \t\t\t\t\t\t- The amount of seconds we should skip to in the song.\r\n\t * @param {number} songIndex \t\t\t\t\t- The index of the song in the songs array.\r\n\t * @param {string} [playlist = null]\t- The playlist the song we are skipping to belogns to.\r\n\t */\r\n\tfunction skipTo( seconds, songIndex, playlist = null ){\r\n\t\tif( playlist != null ){\r\n\t\t\tif( AmplitudeCoreHelpers.checkNewPlaylist( playlist ) ){\r\n\t\t\t\tAmplitudeCoreHelpers.setActivePlaylist( playlist );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tseconds = parseInt( seconds );\r\n\r\n\t\t/*\r\n\t\t\tChanges the song to where it's being skipped and then\r\n\t\t\tplay the song.\r\n\t\t*/\r\n\t\tAmplitudeCoreHelpers.changeSong( songIndex );\r\n\t\tAmplitudeCore.play();\r\n\r\n\t\tAmplitudeVisualSync.syncMainPlayPause( 'playing' );\r\n\r\n\t\tif( playlist != null ){\r\n\t\t\tAmplitudeVisualSync.syncPlaylistPlayPause( playlist, 'playing' );\r\n\t\t}\r\n\r\n\t\tAmplitudeVisualSync.syncSongPlayPause( playlist, songIndex, 'playing' );\r\n\r\n\t\t/*\r\n\t\t\tSkip to the location in the song.\r\n\t\t*/\r\n\t\tAmplitudeCore.skipToLocation( seconds );\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the meta data for a song in the songs array. This will set any\r\n\t * meta data for a song besides the URL. The URL could cause issues if the\r\n\t * song was playing.\r\n\t *\r\n\t * Public Accessor: Amplitude.setMetaData()\r\n\t *\r\n\t * @access public\r\n\t * @param {number} index\t\t\t\t\t- The index of the song in the songs array.\r\n\t * @param {object} metaData \t\t\t- The object containing the meta data we are updating.\r\n\t */\r\n\t function setMetaData( index, metaData ){\r\n\t\t\tfor ( var key in metaData ) {\r\n\t\t\t\tif ( metaData.hasOwnProperty( key ) ){\r\n\t\t\t\t\tif( key != 'url' && key != 'URL' ){\r\n\t\t\t\t\t\tconfig.songs[index][key] = metaData[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tAmplitudeVisualSync.displaySongMetadata();\r\n\t }\r\n\r\n\t /**\r\n\t  * Sets the delay between the songs when they are finished.\r\n\t\t*\r\n\t\t* Public Accessor: Amplitude.setDelay()\r\n\t\t*\r\n\t\t* @access public\r\n\t\t* @param {number} delay \t- The millisecond delay time between songs\r\n\t  */\r\n\t\tfunction setDelay( time ){\r\n\t\t\tconfig.delay = time;\r\n\t\t}\r\n\r\n\t/*\r\n\t\tReturns all of the publically accesible methods.\r\n\t*/\r\n\treturn {\r\n\t\tinit: init,\r\n\t\tbindNewElements: bindNewElements,\r\n\t\tgetActivePlaylist: getActivePlaylist,\r\n\t\tgetPlaybackSpeed: getPlaybackSpeed,\r\n\t\tgetRepeat: getRepeat,\r\n\t\tgetRepeatPlaylist: getRepeatPlaylist,\r\n\t\tgetShuffle: getShuffle,\r\n\t\tgetShufflePlaylist: getShufflePlaylist,\r\n\t\tsetShuffle: setShuffle,\r\n\t\tsetShufflePlaylist: setShufflePlaylist,\r\n\t\tsetRepeat: setRepeat,\r\n\t\tsetRepeatSong: setRepeatSong,\r\n\t\tsetRepeatPlaylist: setRepeatPlaylist,\r\n\t\tgetDefaultAlbumArt: getDefaultAlbumArt,\r\n\t\tsetDefaultAlbumArt: setDefaultAlbumArt,\r\n\t\tgetSongPlayedPercentage: getSongPlayedPercentage,\r\n\t\tsetSongPlayedPercentage: setSongPlayedPercentage,\r\n\t\tgetSongPlayedSeconds: getSongPlayedSeconds,\r\n\t\tgetSongDuration: getSongDuration,\r\n\t\tsetDebug: setDebug,\r\n\t\tgetActiveSongMetadata: getActiveSongMetadata,\r\n\t\tgetSongByIndex: getSongByIndex,\r\n\t\tgetSongAtPlaylistIndex: getSongAtPlaylistIndex,\r\n\t\taddSong: addSong,\r\n\t\taddSongToPlaylist: addSongToPlaylist,\r\n\t\tremoveSong: removeSong,\r\n\t\tremoveSongFromPlaylist: removeSongFromPlaylist,\r\n\t\tplayNow: playNow,\r\n\t\tsetSongAtIndex: setSongAtIndex,\r\n\t\tplaySongAtIndex: playSongAtIndex,\r\n\t\tsetPlaylistSongAtIndex: setPlaylistSongAtIndex,\r\n\t\tplayPlaylistSongAtIndex: playPlaylistSongAtIndex,\r\n\t\tplay: play,\r\n\t\tpause: pause,\r\n\t\taudio: getAudio,\r\n\t\tnext: next,\r\n\t\tprev: prev,\r\n\t\tgetSongs: getSongs,\r\n\t\tgetSongsInPlaylist: getSongsInPlaylist,\r\n\t\tgetSongsState: getSongsState,\r\n\t\tgetSongsStatePlaylist: getSongsStatePlaylist,\r\n\t\tgetActiveIndex: getActiveIndex,\r\n\t\tgetActiveIndexState: getActiveIndexState,\r\n\t\tgetVersion: getVersion,\r\n\t\tgetBuffered: getBuffered,\r\n\t\tskipTo: skipTo,\r\n\t\tsetMetaData: setMetaData,\r\n\t\tsetDelay: setDelay\r\n\t}\r\n})();\r\n\r\nexport default Amplitude;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/**\r\n * Imports the config module\r\n * @module config\r\n */\r\nimport config from '../config.js';\r\n\r\n/**\r\n * Imports the helper functions for the core module\r\n * @module core/AmplitudeHelers\r\n */\r\nimport AmplitudeHelpers from '../core/helpers.js';\r\n\r\n/**\r\n * Imports the initializer\r\n * @module init/AmplitudeInitializer\r\n */\r\nimport AmplitudeInitializer from '../init/init.js';\r\n\r\n/**\r\n * These helpers wrap around the basic methods of the Soundcloud API\r\n * and get the information we need from SoundCloud to make the songs\r\n * streamable through Amplitude\r\n *\r\n * @module soundcloud/AmplitudeSoundcloud\r\n */\r\nlet AmplitudeSoundcloud = (function() {\r\n\r\n\t/**\r\n\t * Defines the temporary user config used while we configure soundcloud\r\n\t * @type {object}\r\n\t */\r\n\tlet tempUserConfig = {};\r\n\r\n\t/**\r\n\t * Loads the soundcloud SDK for use with Amplitude so the user doesn't have\r\n\t * to load it themselves.\r\n\t * With help from: http://stackoverflow.com/questions/950087/include-a-javascript-file-in-another-javascript-file\r\n\t *\r\n\t * @access public\r\n\t * @param {object} userConfig \t- The config defined by the user for AmplitudeJS\r\n\t */\r\n\tfunction loadSoundCloud( userConfig ){\r\n\t\t/*\r\n\t\t\tSets the temporary config to the config passed by the user so we can make changes\r\n\t\t\tand not break the actual config.\r\n\t\t*/\r\n\t\ttempUserConfig = userConfig;\r\n\r\n\t\t/*\r\n\t\t\tGets the head tag for the document and create a script element.\r\n\t\t*/\r\n\t\tlet head = document.getElementsByTagName('head')[0];\r\n\t\tlet script = document.createElement('script');\r\n\r\n\t\tscript.type = 'text/javascript';\r\n\r\n\t\t/*\r\n\t\t\tURL to the remote soundcloud SDK\r\n\t\t*/\r\n\t\tscript.src = 'https://connect.soundcloud.com/sdk.js';\r\n\t\tscript.onreadystatechange = initSoundcloud;\r\n\t\tscript.onload = initSoundcloud;\r\n\r\n\t\t/*\r\n\t\t\tAdd the script to the head of the document.\r\n\t\t*/\r\n\t\thead.appendChild( script );\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes soundcloud with the key provided.\r\n\t *\r\n\t * @access private\r\n\t */\r\n\tfunction initSoundcloud(){\r\n\t\t/*\r\n\t\t\tCalls the SoundCloud initialize function\r\n\t\t\tfrom their API and sends it the client_id\r\n\t\t\tthat the user passed in.\r\n\t\t*/\r\n\t\tSC.initialize({\r\n\t\t\tclient_id: config.soundcloud_client\r\n\t\t});\r\n\r\n\t\t/*\r\n\t\t\tGets the streamable URLs to run through Amplitue. This is\r\n\t\t\tVERY important since Amplitude can't stream the copy and pasted\r\n\t\t\tlink from the SoundCloud page, but can resolve the streaming\r\n\t\t\tURLs from the link.\r\n\t\t*/\r\n\t\tgetStreamableURLs();\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the streamable URL from the URL provided for\r\n\t * all of the soundcloud links.  This will loop through\r\n\t * and set all of the information for the soundcloud\r\n\t * urls.\r\n\t *\r\n\t * @access private\r\n\t */\r\n\tfunction getStreamableURLs(){\r\n\t\t/*\r\n\t\t\tDefine the regex to find the soundcloud URLs\r\n\t\t*/\r\n\t\tlet soundcloud_regex = /^https?:\\/\\/(soundcloud.com|snd.sc)\\/(.*)$/;\r\n\r\n\t\tfor( let i = 0; i < config.songs.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tIf the URL matches soundcloud, we grab\r\n\t\t\t\tthat url and get the streamable link\r\n\t\t\t\tif there is one.\r\n\t\t\t*/\r\n\t\t\tif( config.songs[i].url.match( soundcloud_regex ) ){\r\n\t\t\t\tconfig.soundcloud_song_count++;\r\n\t\t\t\tresolveStreamable(config.songs[i].url, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Due to Soundcloud SDK being asynchronous, we need to scope the\r\n\t * index of the song in another function. The privateGetSoundcloudStreamableURLs\r\n\t * function does the actual iteration and scoping.\r\n\t *\r\n\t * @access private\r\n\t * @param {string} url \t\t- URL of the soundcloud song\r\n\t * @param {number} index \t- The index of the soundcloud song in the songs array.\r\n\t */\r\n\tfunction resolveStreamable( url, index ){\r\n\t\tSC.get('/resolve/?url='+url, function( sound ){\r\n\t\t\t/*\r\n\t\t\t\tIf streamable we get the url and bind the client ID to the end\r\n\t\t\t\tso Amplitude can just stream the song normally. We then overwrite\r\n\t\t\t\tthe url the user provided with the streamable URL.\r\n\t\t\t*/\r\n\t\t\tif( sound.streamable ){\r\n\t\t\t\tconfig.songs[index].url = sound.stream_url+'?client_id='+config.soundcloud_client;\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the user want's to use soundcloud art, we overwrite the\r\n\t\t\t\t\tcover_art_url with the soundcloud artwork url.\r\n\t\t\t\t*/\r\n\t\t\t\tif( config.soundcloud_use_art ){\r\n\t\t\t\t\tconfig.songs[index].cover_art_url = sound.artwork_url;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t\tGrab the extra metadata from soundcloud and bind it to the\r\n\t\t\t\t\tsong.  The user can get this through the public function:\r\n\t\t\t\t\tgetActiveSongMetadata\r\n\t\t\t\t*/\r\n\t\t\t\tconfig.songs[index].soundcloud_data = sound;\r\n\t\t\t}else{\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf not streamable, then we print a message to the user stating\r\n\t\t\t\t\tthat the song with name X and artist X is not streamable. This\r\n\t\t\t\t\tgets printed ONLY if they have debug turned on.\r\n\t\t\t\t*/\r\n\t\t\t\tAmplitudeHelpers.writeDebugMessage( config.songs[index].name +' by '+config.songs[index].artist +' is not streamable by the Soundcloud API' );\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t\tIncrements the song ready counter.\r\n\t\t\t*/\r\n\t\t\tconfig.soundcloud_songs_ready++;\r\n\r\n\t\t\t/*\r\n\t\t\t\tWhen all songs are accounted for, then amplitude is ready\r\n\t\t\t\tto rock and we set the rest of the config.\r\n\t\t\t*/\r\n\t\t\tif( config.soundcloud_songs_ready == config.soundcloud_song_count ){\r\n\t\t\t\tAmplitudeInitializer.setConfig( tempUserConfig );\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n\t\tReturns the publically accessible methods\r\n\t*/\r\n\treturn {\r\n\t\tloadSoundCloud: loadSoundCloud\r\n\t}\r\n})();\r\n\r\nexport default AmplitudeSoundcloud\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/soundcloud/soundcloud.js","/**\r\n * Imports the config module\r\n * @module config\r\n */\r\nimport config from '../config.js';\r\n\r\n/**\r\n * These methods help sync visual displays. They essentially make the visual sync\r\n * methods smaller and more maintainable.\r\n *\r\n * @module visual/AmplitudeVisualSyncHelpers\r\n */\r\nlet AmplitudeVisualSyncHelpers = (function() {\r\n\t/**\r\n\t * Updates any elements that display the current hour for the song.\r\n\t *\r\n\t * @access public\r\n\t * @param {number} hours \t- An integer conaining how many hours into the song.\r\n\t */\r\n\tfunction syncCurrentHours( hours ){\r\n\t\t/*\r\n\t\t\tGets all of the song hour selectors.\r\n\t\t*/\r\n\t\tlet hourSelectors = [];\r\n\r\n\t\tif( config.active_playlist != null && config.active_playlist != '' ){\r\n\t\t\thourSelectors = [\r\n\t\t\t\t'.amplitude-current-hours[amplitude-main-current-hours=\"true\"]',\r\n\t\t\t\t'.amplitude-current-hours[amplitude-playlist-current-hours=\"true\"][amplitude-playlist=\"'+config.active_playlist+'\"]',\r\n\t\t\t\t'.amplitude-current-hours[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t\t];\r\n\t\t}else{\r\n\t\t\thourSelectors = [\r\n\t\t\t\t'.amplitude-current-hours[amplitude-main-current-hours=\"true\"]',\r\n\t\t\t\t'.amplitude-current-hours[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tEnsures that there are some hour selectors.\r\n\t\t*/\r\n\t\tif( document.querySelectorAll( hourSelectors.join() ).length > 0 ){\r\n\t\t\t/*\r\n\t\t\t\tGet all of the hour selectors\r\n\t\t\t*/\r\n\t\t\tconst currentHourSelectors = document.querySelectorAll( hourSelectors.join() );\r\n\r\n\t\t\t/*\r\n\t\t\t\tSet the current hour selector's inner html to hours passed in.\r\n\t\t\t*/\r\n\t\t\tfor( let i = 0; i < currentHourSelectors.length; i++ ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the selector is a main selector, we set the hours.\r\n\t\t\t\t*/\r\n\t\t\t\tif( currentHourSelectors[i].getAttribute('amplitude-main-current-hours') == 'true' ){\r\n\t\t\t\t\tcurrentHourSelectors[i].innerHTML = hours;\r\n\t\t\t\t}else{\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tIf the active playlist is not null or empty\r\n\t\t\t\t\t\tand the attribute of the playlist is equal to the\r\n\t\t\t\t\t\tactive playlist, then we set the inner html.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif( config.active_playlist != ''\r\n\t\t\t\t\t\t&& config.active_playlist != null\r\n\t\t\t\t\t\t&& currentHourSelectors[i].getAttribute('amplitude-playlist') == config.active_playlist ){\r\n\t\t\t\t\t\t\tcurrentHourSelectors[i].innerHTML = hours;\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tIf the active playlist is not set and the selector\r\n\t\t\t\t\t\tdoes not have a playlist then we set the hours. This\r\n\t\t\t\t\t\tmeans that the current selector is an individual song\r\n\t\t\t\t\t\tselector.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\t}else if( config.active_playlist == ''\r\n\t\t\t\t\t\t|| config.active_playlist == null\r\n\t\t\t\t\t\t&& !currentHourSelectors[i].hasAttribute('amplitude-playlist') ){\r\n\t\t\t\t\t\t\tcurrentHourSelectors[i].innerHTML = hours;\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tIf nothing else matches, set the selector's inner HTML to '00'\r\n\t\t\t\t\t*/\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tcurrentHourSelectors[i].innerHTML = '0';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------\r\n\t\tResets the current hours displays to 0\r\n\t--------------------------------------------------------------------------*/\r\n\tfunction resetCurrentHours(){\r\n\t\t/*\r\n\t\t\tGets the hour display elements\r\n\t\t*/\r\n\t\tlet hourSelectors = document.querySelectorAll('.amplitude-current-hours');\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the hour selectors and sets the inner HTML\r\n\t\t\tto 00.\r\n\t\t*/\r\n\t\tfor( var i = 0; i < hourSelectors.length; i++ ){\r\n\t\t\thourSelectors[i].innerHTML = '0';\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates any elements that display the current minutes for the song.\r\n\t *\r\n\t * @access public\r\n\t * @param {number} minutes \t- An integer conaining how many minutes into the song.\r\n\t */\r\n\tfunction syncCurrentMinutes( minutes ){\r\n\t\t/*\r\n\t\t\tGets all of the song minute selectors.\r\n\t\t*/\r\n\t\tlet minuteSelectors = [];\r\n\r\n\t\tif( config.active_playlist != null && config.active_playlist != '' ){\r\n\t\t\tminuteSelectors = [\r\n\t\t\t\t'.amplitude-current-minutes[amplitude-main-current-minutes=\"true\"]',\r\n\t\t\t\t'.amplitude-current-minutes[amplitude-playlist-current-minutes=\"true\"][amplitude-playlist=\"'+config.active_playlist+'\"]',\r\n\t\t\t\t'.amplitude-current-minutes[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t\t];\r\n\t\t}else{\r\n\t\t\tminuteSelectors = [\r\n\t\t\t\t'.amplitude-current-minutes[amplitude-main-current-minutes=\"true\"]',\r\n\t\t\t\t'.amplitude-current-minutes[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tGrabs the current minute selectors\r\n\t\t*/\r\n    const currentMinuteSelectors = document.querySelectorAll( minuteSelectors.join() );\r\n\r\n\t\t/*\r\n\t\t\tSet the current minute selector's inner html to minutes passed in.\r\n\t\t*/\r\n\t\tfor( let i = 0, l = currentMinuteSelectors.length; i < l; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tIf the selector is a main selector, we set the seconds.\r\n\t\t\t*/\r\n\t\t\tif( currentMinuteSelectors[i].getAttribute('amplitude-main-current-minutes') == 'true' ){\r\n\t\t\t\tcurrentMinuteSelectors[i].innerHTML = minutes;\r\n\t\t\t}else{\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the active playlist is not null or empty\r\n\t\t\t\t\tand the attribute of the playlist is equal to the\r\n\t\t\t\t\tactive playlist, then we set the inner html.\r\n\t\t\t\t*/\r\n\t\t\t\tif( config.active_playlist != ''\r\n\t\t\t\t\t&& config.active_playlist != null\r\n\t\t\t\t\t&& currentMinuteSelectors[i].getAttribute('amplitude-playlist') == config.active_playlist ){\r\n\t\t\t\t\t\tcurrentMinuteSelectors[i].innerHTML = minutes;\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the active playlist is not set and the selector\r\n\t\t\t\t\tdoes not have a playlist then we set the minutes. This\r\n\t\t\t\t\tmeans that the current selector is an individual song\r\n\t\t\t\t\tselector.\r\n\t\t\t\t*/\r\n\t\t\t\t}else if( config.active_playlist == ''\r\n\t\t\t\t\t|| config.active_playlist == null\r\n\t\t\t\t\t&& !currentMinuteSelectors[i].hasAttribute('amplitude-playlist') ){\r\n\t\t\t\t\t\tcurrentMinuteSelectors[i].innerHTML = minutes;\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf nothing else matches, set the selector's inner HTML to '00'\r\n\t\t\t\t*/\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcurrentMinuteSelectors[i].innerHTML = '00';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the current minutes displays to 00\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction resetCurrentMinutes(){\r\n\t\t/*\r\n\t\t\tGets the minutes display elements\r\n\t\t*/\r\n\t\tlet minuteSelectors = document.querySelectorAll('.amplitude-current-minutes');\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the minute selectors and sets the inner HTML\r\n\t\t\tto 00.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < minuteSelectors.length; i++ ){\r\n\t\t\tminuteSelectors[i].innerHTML = '00';\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates any elements that display the current seconds for the song.\r\n\t *\r\n\t * @access public\r\n\t * @param {number} seconds\t- An integer conaining how many seconds into the song.\r\n\t */\r\n\tfunction syncCurrentSeconds( seconds ){\r\n\t\t/*\r\n\t\t\tGets all of the song second selectors. If the active playlist\r\n\t\t\tis not null, then we get the playlist selectors.\r\n\t\t*/\r\n\t\tlet secondSelectors = [];\r\n\r\n\t\tif( config.active_playlist != null && config.active_playlist != '' ){\r\n\t\t\tsecondSelectors = [\r\n\t\t\t\t'.amplitude-current-seconds[amplitude-main-current-seconds=\"true\"]',\r\n\t\t\t\t'.amplitude-current-seconds[amplitude-playlist-current-seconds=\"true\"][amplitude-playlist=\"'+config.active_playlist+'\"]',\r\n\t\t\t\t'.amplitude-current-seconds[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t\t];\r\n\t\t}else{\r\n\t\t\tsecondSelectors = [\r\n\t\t\t\t'.amplitude-current-seconds[amplitude-main-current-seconds=\"true\"]',\r\n\t\t\t\t'.amplitude-current-seconds[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t\t];\r\n\t\t}\r\n\r\n    /*\r\n    \tGet all of the second selectors\r\n    */\r\n    const currentSecondSelectors = document.querySelectorAll( secondSelectors.join() );\r\n\r\n    /*\r\n    \tIterate over all of the second selectors.\r\n    */\r\n    for( let i = 0, l = currentSecondSelectors.length; i < l; i++ ){\r\n    \t/*\r\n    \t\tIf the selector is a main selector, we set the seconds.\r\n    \t*/\r\n    \tif( currentSecondSelectors[i].getAttribute('amplitude-main-current-seconds') == 'true' ){\r\n    \t\tcurrentSecondSelectors[i].innerHTML = seconds;\r\n    \t}else{\r\n    \t\t/*\r\n    \t\t\tIf the active playlist is not null or empty\r\n    \t\t\tand the attribute of the playlist is equal to the\r\n    \t\t\tactive playlist, then we set the inner html.\r\n    \t\t*/\r\n    \t\tif( config.active_playlist != ''\r\n    \t\t\t&& config.active_playlist != null\r\n    \t\t\t&& currentSecondSelectors[i].getAttribute('amplitude-playlist') == config.active_playlist ){\r\n    \t\t\t\tcurrentSecondSelectors[i].innerHTML = seconds;\r\n    \t\t/*\r\n    \t\t\tIf the active playlist is not set and the selector\r\n    \t\t\tdoes not have a playlist then we set the seconds. This\r\n    \t\t\tmeans that the current selector is an individual song\r\n    \t\t\tselector.\r\n    \t\t*/\r\n    \t\t}else if( config.active_playlist == ''\r\n    \t\t\t|| config.active_playlist == null\r\n    \t\t\t&& !currentSecondSelectors[i].hasAttribute('amplitude-playlist') ){\r\n    \t\t\t\tcurrentSecondSelectors[i].innerHTML = seconds;\r\n    \t\t/*\r\n    \t\t\tIf nothing else matches, set the selector's inner HTML to '00'\r\n    \t\t*/\r\n    \t\t}else{\r\n    \t\t\tcurrentSecondSelectors[i].innerHTML = '00';\r\n    \t\t}\r\n    \t}\r\n    }\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the current seconds displays to 00\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction resetCurrentSeconds(){\r\n\t\t/*\r\n\t\t\tGets the seconds display elements\r\n\t\t*/\r\n\t\tlet secondSelectors = document.querySelectorAll('.amplitude-current-seconds');\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the seconds selectors and sets the inner HTML\r\n\t\t\tto 00.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < secondSelectors.length; i++ ){\r\n\t\t\tsecondSelectors[i].innerHTML = '00';\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates any elements that display the current time for the song. This\r\n\t * is a computed field that will be commonly used.\r\n\t *\r\n\t * @access public\r\n\t * @param {object} currentTime \t- A json object conaining the parts for the current time for the song.\r\n\t */\r\n\tfunction syncCurrentTime( currentTime ){\r\n\t\t/*\r\n\t\t\tGets all of the song time selectors.\r\n\t\t*/\r\n\t\tlet timeSelectors = [\r\n\t\t\t'.amplitude-current-time[amplitude-main-current-time=\"true\"]',\r\n\t\t\t'.amplitude-current-time[amplitude-playlist-main-current-time=\"'+config.active_playlist+'\"]',\r\n\t\t\t'.amplitude-current-time[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t];\r\n\r\n\t\t/*\r\n\t\t\tGet all of the time selectors.\r\n\t\t*/\r\n\t\tlet currentTimeSelectors = document.querySelectorAll( timeSelectors.join() );\r\n\r\n\t\t/*\r\n\t\t\tSet the time selector's inner html to the current time for the song. The current\r\n\t\t\ttime is computed by joining minutes and seconds.\r\n\t\t*/\r\n\t\tvar timeText = currentTime.minutes+':'+currentTime.seconds;\r\n\t\tif ( currentTime.hours > 0 ) {\r\n\t\t\ttimeText = currentTime.hours + ':' + timeText;\r\n\t\t}\r\n\t\tfor( let i = 0, l=currentTimeSelectors.length; i < l; i++ ){\r\n\t\t\tcurrentTimeSelectors[i].innerHTML = timeText;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the current time displays to 00:00\r\n\t *\r\n\t * @access public\r\n\t */\r\n\tfunction resetCurrentTime(){\r\n\t\t/*\r\n\t\t\tGets the time selector display elements\r\n\t\t*/\r\n\t\tlet timeSelectors = document.querySelectorAll('.amplitude-current-time');\r\n\r\n\t\t/*\r\n\t\t\tIterates over all of the time selectors and sets the inner HTML\r\n\t\t\tto 00.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < timeSelectors.length; i++ ){\r\n\t\t\ttimeSelectors[i].innerHTML = '00:00';\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs the song played progress bars. These are HTML5 progress elements.\r\n\t *\r\n\t * @access private\r\n\t * @param {number} songPlayedPercentage  \t- The percentage of the song that has been played.\r\n\t */\r\n\tfunction syncSongPlayedProgressBar( songPlayedPercentage ){\r\n\t\tsyncMainSongPlayedProgressBars( songPlayedPercentage );\r\n\t\tsyncPlaylistSongPlayedProgressBars( songPlayedPercentage );\r\n\t\tsyncIndividualSongPlayedProgressBars( songPlayedPercentage );\r\n\t}\r\n\r\n\t/**\r\n\t * Sync how much has been played with a progress bar. This is the main progress bar.\r\n\t *\r\n\t * @access private\r\n\t * @param {number} songPlayedPercentage \t- The percent of the song completed.\r\n\t */\r\n\tfunction syncMainSongPlayedProgressBars( songPlayedPercentage ){\r\n\t\t/*\r\n\t\t\tEnsure that the song completion percentage is a number\r\n\t\t*/\r\n\t\tif( !isNaN( songPlayedPercentage ) ){\r\n\t\t\t/*\r\n\t\t\t\tGet all of the song progress bars\r\n\t\t\t*/\r\n\t\t\tlet songPlayedProgressBars = document.querySelectorAll('.amplitude-song-played-progress[amplitude-main-song-played-progress=\"true\"]');\r\n\r\n\t\t\tfor( let i = 0; i < songPlayedProgressBars.length; i++ ){\r\n\t\t\t\tlet max = songPlayedProgressBars[i].max;\r\n\r\n\t\t\t\tsongPlayedProgressBars[i].value = ( songPlayedPercentage / 100 ) * max;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sync how much has been played with a progress bar. This is the playlist progress bar.\r\n\t *\r\n\t * @access public\r\n\t * @param {number} songPlayedPercentage \t- The percent of the song completed.\r\n\t */\r\n\tfunction syncPlaylistSongPlayedProgressBars( songPlayedPercentage ){\r\n\t\t/*\r\n\t\t\tEnsure that the song completion percentage is a number\r\n\t\t*/\r\n\t\tif( !isNaN( songPlayedPercentage ) ){\r\n\t\t\t/*\r\n\t\t\t\tGet all of the song progress bars\r\n\t\t\t*/\r\n\t\t\tlet songPlayedProgressBars = document.querySelectorAll('.amplitude-song-played-progress[amplitude-playlist-song-played-progress=\"true\"][amplitude-playlist=\"'+config.active_playlist+'\"]');\r\n\r\n\t\t\tfor( let i = 0; i < songPlayedProgressBars.length; i++ ){\r\n\t\t\t\tlet max = songPlayedProgressBars[i].max;\r\n\r\n\t\t\t\tsongPlayedProgressBars[i].value = ( songPlayedPercentage / 100 ) * max;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sync how much has been played with a progress bar. This is for an individual song.\r\n\t *\r\n\t * @access private\r\n\t * @param {number} songPlayedPercentage \t- The percent of the song completed.\r\n\t */\r\n\tfunction syncIndividualSongPlayedProgressBars( songPlayedPercentage ){\r\n\t\t/*\r\n\t\t\tEnsure that the song completion percentage is a number\r\n\t\t*/\r\n\t\tif( !isNaN( songPlayedPercentage ) ){\r\n\t\t\t/*\r\n\t\t\t\tIf the active playlist is not null, we get the individual song\r\n\t\t\t\tplayed progress for the playlist.\r\n\t\t\t*/\r\n\t\t\tif( config.active_playlist != '' && config.active_playlist != null ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tGet all of the song progress bars\r\n\t\t\t\t*/\r\n\t\t\t let songPlayedProgressBars = document.querySelectorAll('.amplitude-song-played-progress[amplitude-playlist=\"'+config.active_playlist+'\"][amplitude-song-index=\"'+config.active_index+'\"]');\r\n\r\n\t\t\t\tfor( let i = 0; i < songPlayedProgressBars.length; i++ ){\r\n\t\t\t\t let max = songPlayedProgressBars[i].max;\r\n\r\n\t\t\t\t\tsongPlayedProgressBars[i].value = ( songPlayedPercentage / 100 ) * max;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\t/*\r\n\t\t\t\t\tGet all of the song progress bars\r\n\t\t\t\t*/\r\n\t\t\t\tlet songPlayedProgressBars = document.querySelectorAll('.amplitude-song-played-progress[amplitude-song-index=\"'+config.active_index+'\"]');\r\n\r\n\t\t\t\tfor( let i = 0; i < songPlayedProgressBars.length; i++ ){\r\n\t\t\t\t\tlet max = songPlayedProgressBars[i].max;\r\n\r\n\t\t\t\t\tsongPlayedProgressBars[i].value = ( songPlayedPercentage / 100 ) * max;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets an element to be playing by removing the 'amplitude-paused' class\r\n\t * and adding the 'amplitude-playing' class\r\n\t *\r\n\t * @access public\r\n\t * @param {element} element \t- The element getting the playing class added.\r\n\t */\r\n\tfunction setElementPlay( element ){\r\n\t\telement.classList.add('amplitude-playing');\r\n\t\telement.classList.remove('amplitude-paused');\r\n\t}\r\n\r\n\t/**\r\n\t * Sets an element to be paused by adding the 'amplitude-paused' class\r\n\t * and removing the 'amplitude-playing' class\r\n\t *\r\n\t * @access public\r\n\t * @param {element} element \t- The element getting the paused class added.\r\n\t */\r\n\tfunction setElementPause( element ){\r\n\t\telement.classList.remove('amplitude-playing');\r\n\t\telement.classList.add('amplitude-paused');\r\n\t}\r\n\r\n\t/**\r\n\t * Updates any elements that display the duration hour for the song.\r\n\t *\r\n\t * @access public\r\n\t * @param {number} hours \t\t- An integer conaining how many hours are in the song\r\n\t */\r\n\tfunction syncDurationHours( hours ){\r\n\t\t/*\r\n\t\t\tGets all of the song hour selectors.\r\n\t\t*/\r\n\t\tlet hourSelectors = [];\r\n\r\n\t\tif( config.active_playlist != null && config.active_playlist != '' ){\r\n\t\t\thourSelectors = [\r\n\t\t\t\t'.amplitude-duration-hours[amplitude-main-duration-hours=\"true\"]',\r\n\t\t\t\t'.amplitude-duration-hours[amplitude-playlist-duration-hours=\"true\"][amplitude-playlist=\"'+config.active_playlist+'\"]',\r\n\t\t\t\t'.amplitude-duration-hours[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t\t];\r\n\t\t}else{\r\n\t\t\thourSelectors = [\r\n\t\t\t\t'.amplitude-duration-hours[amplitude-main-duration-hours=\"true\"]',\r\n\t\t\t\t'.amplitude-duration-hours[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tEnsures that there are some hour selectors.\r\n\t\t*/\r\n\t\tif( document.querySelectorAll( hourSelectors.join() ).length > 0 ){\r\n\t\t\t/*\r\n\t\t\t\tGet all of the hour selectors\r\n\t\t\t*/\r\n\t\t\tlet durationHourSelectors = document.querySelectorAll( hourSelectors.join() );\r\n\r\n\t\t\t/*\r\n\t\t\t\tSet the duration hour selector's inner html to hours passed in.\r\n\t\t\t*/\r\n\t\t\tfor( let i = 0; i < durationHourSelectors.length; i++ ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the selector is a main selector, we set the hours.\r\n\t\t\t\t*/\r\n\t\t\t\tif( durationHourSelectors[i].getAttribute('amplitude-main-duration-hours') == 'true' ){\r\n\t\t\t\t\tdurationHourSelectors[i].innerHTML = hours;\r\n\t\t\t\t}else{\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tIf the active playlist is not null or empty\r\n\t\t\t\t\t\tand the attribute of the playlist is equal to the\r\n\t\t\t\t\t\tactive playlist, then we set the inner html.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif( config.active_playlist != ''\r\n\t\t\t\t\t\t&& config.active_playlist != null\r\n\t\t\t\t\t\t&& durationHourSelectors[i].getAttribute('amplitude-playlist') == config.active_playlist ){\r\n\t\t\t\t\t\t\tdurationHourSelectors[i].innerHTML = hours;\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tIf the active playlist is not set and the selector\r\n\t\t\t\t\t\tdoes not have a playlist then we set the hours. This\r\n\t\t\t\t\t\tmeans that the duration selector is an individual song\r\n\t\t\t\t\t\tselector.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\t}else if( config.active_playlist == ''\r\n\t\t\t\t\t\t|| config.active_playlist == null\r\n\t\t\t\t\t\t&& !durationHourSelectors[i].hasAttribute('amplitude-playlist') ){\r\n\t\t\t\t\t\t\tdurationHourSelectors[i].innerHTML = hours;\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tIf nothing else matches, set the selector's inner HTML to '00'\r\n\t\t\t\t\t*/\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tdurationHourSelectors[i].innerHTML = '0';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates any elements that display the duration minutes for the song.\r\n\t *\r\n\t * @access public\r\n\t * @param {number} minutes \t- An integer conaining how many minutes into the song.\r\n\t */\r\n\tfunction syncDurationMinutes( minutes ){\r\n\t\t/*\r\n\t\t\tGets all of the song minute selectors.\r\n\t\t*/\r\n\t\tlet minuteSelectors = [];\r\n\r\n\t\tif( config.active_playlist != null && config.active_playlist != '' ){\r\n\t\t\tminuteSelectors = [\r\n\t\t\t\t'.amplitude-duration-minutes[amplitude-main-duration-minutes=\"true\"]',\r\n\t\t\t\t'.amplitude-duration-minutes[amplitude-playlist-duration-minutes=\"true\"][amplitude-playlist=\"'+config.active_playlist+'\"]',\r\n\t\t\t\t'.amplitude-duration-minutes[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t\t];\r\n\t\t}else{\r\n\t\t\tminuteSelectors = [\r\n\t\t\t\t'.amplitude-duration-minutes[amplitude-main-duration-minutes=\"true\"]',\r\n\t\t\t\t'.amplitude-duration-minutes[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tGet all of the minute selectors\r\n\t\t*/\r\n\t\tlet durationMinuteSelectors = document.querySelectorAll( minuteSelectors.join() );\r\n\r\n\t\t/*\r\n\t\t\tSet the duration minute selector's inner html to minutes passed in.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < durationMinuteSelectors.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tIf the selector is a main selector, we set the seconds.\r\n\t\t\t*/\r\n\t\t\tif( durationMinuteSelectors[i].getAttribute('amplitude-main-duration-minutes') == 'true' ){\r\n\t\t\t\tdurationMinuteSelectors[i].innerHTML = minutes;\r\n\t\t\t}else{\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the active playlist is not null or empty\r\n\t\t\t\t\tand the attribute of the playlist is equal to the\r\n\t\t\t\t\tactive playlist, then we set the inner html.\r\n\t\t\t\t*/\r\n\t\t\t\tif( config.active_playlist != ''\r\n\t\t\t\t\t&& config.active_playlist != null\r\n\t\t\t\t\t&& durationMinuteSelectors[i].getAttribute('amplitude-playlist') == config.active_playlist ){\r\n\t\t\t\t\t\tdurationMinuteSelectors[i].innerHTML = minutes;\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the active playlist is not set and the selector\r\n\t\t\t\t\tdoes not have a playlist then we set the minutes. This\r\n\t\t\t\t\tmeans that the duration selector is an individual song\r\n\t\t\t\t\tselector.\r\n\t\t\t\t*/\r\n\t\t\t\t}else if( config.active_playlist == ''\r\n\t\t\t\t\t|| config.active_playlist == null\r\n\t\t\t\t\t&& !durationMinuteSelectors[i].hasAttribute('amplitude-playlist') ){\r\n\t\t\t\t\t\tdurationMinuteSelectors[i].innerHTML = minutes;\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf nothing else matches, set the selector's inner HTML to '00'\r\n\t\t\t\t*/\r\n\t\t\t\t}else{\r\n\t\t\t\t\tdurationMinuteSelectors[i].innerHTML = '00';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates any elements that display the duration seconds for the song.\r\n\t *\r\n\t * @access private\r\n\t * @param {number} seconds \t- An integer conaining how many seconds into the song.\r\n\t */\r\n\tfunction syncDurationSeconds( seconds ){\r\n\t\t/*\r\n\t\t\tGets all of the song second selectors. If the active playlist\r\n\t\t\tis not null, then we get the playlist selectors.\r\n\t\t*/\r\n\t\tlet secondSelectors = [];\r\n\r\n\t\tif( config.active_playlist != null && config.active_playlist != '' ){\r\n\t\t\tsecondSelectors = [\r\n\t\t\t\t'.amplitude-duration-seconds[amplitude-main-duration-seconds=\"true\"]',\r\n\t\t\t\t'.amplitude-duration-seconds[amplitude-playlist-duration-seconds=\"true\"][amplitude-playlist=\"'+config.active_playlist+'\"]',\r\n\t\t\t\t'.amplitude-duration-seconds[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t\t];\r\n\t\t}else{\r\n\t\t\tsecondSelectors = [\r\n\t\t\t\t'.amplitude-duration-seconds[amplitude-main-duration-seconds=\"true\"]',\r\n\t\t\t\t'.amplitude-duration-seconds[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tGet all of the second selectors\r\n\t\t*/\r\n\t\tlet durationSecondSelectors = document.querySelectorAll( secondSelectors.join() );\r\n\r\n\t\t/*\r\n\t\t\tIterate over all of the second selectors.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < durationSecondSelectors.length; i++ ){\r\n\t\t\t/*\r\n\t\t\t\tIf the selector is a main selector, we set the seconds.\r\n\t\t\t*/\r\n\t\t\tif( durationSecondSelectors[i].getAttribute('amplitude-main-duration-seconds') == 'true' ){\r\n\t\t\t\tdurationSecondSelectors[i].innerHTML = seconds;\r\n\t\t\t}else{\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the active playlist is not null or empty\r\n\t\t\t\t\tand the attribute of the playlist is equal to the\r\n\t\t\t\t\tactive playlist, then we set the inner html.\r\n\t\t\t\t*/\r\n\t\t\t\tif( config.active_playlist != ''\r\n\t\t\t\t\t&& config.active_playlist != null\r\n\t\t\t\t\t&& durationSecondSelectors[i].getAttribute('amplitude-playlist') == config.active_playlist ){\r\n\t\t\t\t\t\tdurationSecondSelectors[i].innerHTML = seconds;\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf the active playlist is not set and the selector\r\n\t\t\t\t\tdoes not have a playlist then we set the seconds. This\r\n\t\t\t\t\tmeans that the duration selector is an individual song\r\n\t\t\t\t\tselector.\r\n\t\t\t\t*/\r\n\t\t\t\t}else if( config.active_playlist == ''\r\n\t\t\t\t\t|| config.active_playlist == null\r\n\t\t\t\t\t&& !durationSecondSelectors[i].hasAttribute('amplitude-playlist') ){\r\n\t\t\t\t\t\tdurationSecondSelectors[i].innerHTML = seconds;\r\n\t\t\t\t/*\r\n\t\t\t\t\tIf nothing else matches, set the selector's inner HTML to '00'\r\n\t\t\t\t*/\r\n\t\t\t\t}else{\r\n\t\t\t\t\tdurationSecondSelectors[i].innerHTML = '00';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates any elements that display the duration time for the song. This\r\n\t * is a computed field that will be commonly used.\r\n\t *\r\n\t * @access public\r\n\t * @param {object} durationTime \t- A json object conaining the parts for the duration time for the song.\r\n\t */\r\n\tfunction syncDurationTime( durationTime ){\r\n\t\t/*\r\n\t\t\tGets all of the song time selectors.\r\n\t\t*/\r\n\t\tlet timeSelectors = [\r\n\t\t\t'.amplitude-duration-time[amplitude-main-duration-time=\"true\"]',\r\n\t\t\t'.amplitude-duration-time[amplitude-playlist-main-duration-time=\"'+config.active_playlist+'\"]',\r\n\t\t\t'.amplitude-duration-time[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t];\r\n\r\n\t\t/*\r\n\t\t\tGet all of the time selectors.\r\n\t\t*/\r\n\t\tlet durationTimeSelectors = document.querySelectorAll( timeSelectors.join() );\r\n\r\n\t\t/*\r\n\t\t\tSet the time selector's inner html to the duration time for the song. The duration\r\n\t\t\ttime is computed by joining minutes and seconds.\r\n\t\t*/\r\n\t\tvar durationText = '00:00';\r\n\t\tif( !isNaN( durationTime.minutes ) && !isNaN( durationTime.seconds ) ){\r\n\t\t\tdurationText = durationTime.minutes+':'+durationTime.seconds;\r\n\t\t\tif( !isNaN( durationTime.hours ) && durationTime.hours > 0 ){\r\n\t\t\t\tdurationText = durationTime.hours+':'+durationText;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor( var i = 0; i < durationTimeSelectors.length; i++ ){\r\n\t\t\tdurationTimeSelectors[i].innerHTML = durationText;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the elements that show how much time is remaining in the song.\r\n\t *\r\n\t * @access public\r\n\t * @param {object} currentTime \t- A json object containing the parts for the current time for the song.\r\n\t * @param {object} durationTime - A json object conaining the parts for the duration time for the song.\r\n\t */\r\n\tfunction syncCountDownTime( currentTime, songDuration ){\r\n\t\t/*\r\n\t\t\tInitialize time remaining.\r\n\t\t*/\r\n\t\tlet timeRemaining = '00:00';\r\n\r\n\t\t/*\r\n\t\t\tEnsure that all values are defined.\r\n\t\t*/\r\n\t\tif( currentTime != undefined && songDuration != undefined ){\r\n\t\t\t/*\r\n\t\t\t\tInitialize the total current seconds and total duration seconds\r\n\t\t\t*/\r\n\t\t\tlet totalCurrentSeconds = parseInt( currentTime.seconds ) + ( parseInt( currentTime.minutes ) * 60 ) + ( ( parseInt( currentTime.hours ) * 60 * 60 ) );\r\n\t\t\tlet totalDurationSeconds = parseInt( songDuration.seconds ) + ( parseInt( songDuration.minutes ) * 60 ) + ( ( parseInt( songDuration.hours ) * 60 * 60 ) );\r\n\r\n\t\t\t/*\r\n\t\t\t\tIf the two variables are numbers we continue the computing.\r\n\t\t\t*/\r\n\t\t\tif( !isNaN( totalCurrentSeconds ) && !isNaN( totalDurationSeconds ) ){\r\n\t\t\t\t/*\r\n\t\t\t\t\tFind the total remaining seconds.\r\n\t\t\t\t*/\r\n\t\t\t\tlet timeRemainingTotalSeconds = totalDurationSeconds - totalCurrentSeconds;\r\n\r\n\t\t\t\tvar remainingHours = Math.floor(timeRemainingTotalSeconds / 3600);\r\n\t\t\t\tvar remainingMinutes = Math.floor((timeRemainingTotalSeconds - (remainingHours * 3600)) / 60);\r\n\t\t\t\tvar remainingSeconds = timeRemainingTotalSeconds - (remainingHours * 3600) - (remainingMinutes * 60);\r\n\r\n\t\t\t\ttimeRemaining = (remainingMinutes < 10 ? '0' + remainingMinutes : remainingMinutes) + ':' +\r\n\t\t\t\t\t(remainingSeconds < 10 ? '0' + remainingSeconds : remainingSeconds);\r\n\r\n\t\t\t\tif(remainingHours > 0) {\r\n\t\t\t\t\ttimeRemaining = remainingHours + ':' + timeRemaining;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tGets all of the song time selectors.\r\n\t\t*/\r\n\t let timeSelectors = [\r\n\t\t\t'.amplitude-time-remaining[amplitude-main-time-remaining=\"true\"]',\r\n\t\t\t'.amplitude-time-remaining[amplitude-playlist-main-time-remaining=\"'+config.active_playlist+'\"]',\r\n\t\t\t'.amplitude-time-remaining[amplitude-song-index=\"'+config.active_index+'\"]'\r\n\t\t];\r\n\r\n\t\t/*\r\n\t\t\tGet all of the time selectors.\r\n\t\t*/\r\n\t let timeRemainingSelectors = document.querySelectorAll( timeSelectors.join() );\r\n\r\n\t\t/*\r\n\t\t\tSet the time selector's inner html to the duration time for the song. The duration\r\n\t\t\ttime is computed by joining minutes and seconds.\r\n\t\t*/\r\n\t\tfor( let i = 0; i < timeRemainingSelectors.length; i++ ){\r\n\t\t\ttimeRemainingSelectors[i].innerHTML = timeRemaining;\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t\tReturn the publically available functions.\r\n\t*/\r\n\treturn {\r\n\t\tsyncCurrentHours: syncCurrentHours,\r\n\t\tsyncCurrentMinutes: syncCurrentMinutes,\r\n\t\tsyncCurrentSeconds: syncCurrentSeconds,\r\n\t\tsyncCurrentTime: syncCurrentTime,\r\n\t\tresetCurrentHours: resetCurrentHours,\r\n\t\tresetCurrentMinutes: resetCurrentMinutes,\r\n\t\tresetCurrentSeconds: resetCurrentSeconds,\r\n\t\tresetCurrentTime: resetCurrentTime,\r\n\t\tsyncSongPlayedProgressBar: syncSongPlayedProgressBar,\r\n\t\tsetElementPlay: setElementPlay,\r\n\t\tsetElementPause: setElementPause,\r\n\t\tsyncDurationHours: syncDurationHours,\r\n\t\tsyncDurationMinutes: syncDurationMinutes,\r\n\t\tsyncDurationSeconds: syncDurationSeconds,\r\n\t\tsyncDurationTime: syncDurationTime,\r\n\t\tsyncCountDownTime: syncCountDownTime\r\n\t}\r\n})();\r\n\r\nexport default AmplitudeVisualSyncHelpers\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/visual/helpers.js"],"sourceRoot":""}